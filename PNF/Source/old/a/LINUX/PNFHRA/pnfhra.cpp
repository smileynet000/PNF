#line 2 "pnfhra.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 165
#define YY_END_OF_BUFFER 166
static yyconst short int yy_acclist[729] =
    {   0,
      122,  122,  166,  164,  165,  162,  164,  165,  162,  165,
       23,  164,  165,  164,  165,   36,  122,  164,  165,   15,
      164,  165,   21,  164,  165,  164,  165,    8,  164,  165,
        9,  164,  165,   13,  164,  165,   11,  164,  165,    7,
      164,  165,   12,   25,  164,  165,   33,  164,  165,   14,
      164,  165,    3,  122,  164,  165,    3,  122,  164,  165,
       24,  164,  165,    6,  164,  165,   28,  164,  165,   10,
      164,  165,   29,  164,  165,   32,  164,  165,  122,  164,
      165,   34,  164,  165,   35,  164,  165,   16,  164,  165,
      122,  164,  165,  122,  164,  165,  122,  164,  165,  122,

      164,  165,  122,  164,  165,  122,  164,  165,  122,  164,
      165,  122,  164,  165,  122,  164,  165,  122,  164,  165,
      122,  164,  165,  122,  164,  165,  122,  164,  165,  122,
      164,  165,  122,  164,  165,  122,  164,  165,  122,  164,
      165,  122,  164,  165,  122,  164,  165,  122,  164,  165,
      122,  164,  165,  160,  164,  165,  164,  165,  161,  164,
      165,  162,   27,   17,    5,  122,   20,   18,   19,  163,
        3,    3,  122,    1,  122,   30,   26,   31,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,

      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,   65,
      122,  115,  122,  113,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,   46,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,   22,    4,  163,    3,
      122,  122,  122,  122,  115,  122,  122,  122,   43,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      101,  122,  122,   42,  122,  122,  122,  110,  122,  110,

      122,  122,  122,  122,  122,  122,   79,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  115,
      122,  109,  122,   48,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  106,  122,  122,  122,  110,
      122,  122,  122,  122,  122,  122,  122,   37,  122,  122,
      112,  122,  122,  122,  122,  142,  122,  122,  122,  122,
      122,  122,   50,  122,  122,  122,  122,  122,  122,   67,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,   66,  122,  122,   93,  122,

      122,  122,  122,  122,   88,  122,  122,  122,  122,  122,
      122,  122,  122,   80,  122,  122,   45,  122,   55,  122,
      122,  122,  122,  122,  122,  122,   44,  122,   92,  122,
      122,   56,  122,  122,  109,  122,  122,  122,  122,  122,
      122,   47,  122,  122,  118,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  102,  122,    2,  122,
      122,  112,  122,  122,  122,  122,  122,  105,  122,  122,
      107,  122,  159,  142,  123,  125,  108,  134,  130,   75,
      122,  122,  122,  122,   97,  122,  122,  122,   98,  122,
      122,   71,  122,   68,  122,  122,  122,   83,  122,  122,

      122,  122,   53,  122,  122,  122,  122,   78,  122,  122,
      122,  103,  122,   94,  122,  122,   60,  122,  122,   85,
      122,   86,  122,  122,  122,   91,  122,  122,  122,   58,
      122,  122,  114,  122,  122,   72,  122,  122,  122,  122,
      122,  122,  122,  122,  122,   38,  122,   95,  122,  122,
      122,  122,  122,   64,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  116,  122,  122,   73,  122,  159,  151,
      147,  124,  135,  132,  129,  131,  122,  111,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  104,
      122,  122,   40,  122,   87,  122,  122,  122,   89,  122,

      122,  122,  100,  122,  122,  109,  122,  122,  122,   96,
      122,  122,  122,   57,  122,  117,  122,   76,  122,  120,
      122,  122,   51,  122,  122,   49,  122,  122,  122,  122,
      152,  149,  146,  148,  128,  133,  122,  122,  122,  122,
       84,  122,  122,  122,   52,  122,  122,   69,  122,   77,
      122,  122,   81,  122,  122,  122,  122,  122,   99,  122,
      122,   39,  122,  122,  122,  121,  122,  122,  122,  122,
       54,  122,  145,  150,  136,  139,  138,  137,  127,  122,
      122,   70,  122,  122,  122,   82,  122,  122,   41,  122,
       90,  122,  119,  122,  122,   62,  122,  122,  122,  122,

      153,  156,  155,  154,  144,  140,  141,  126,   74,  122,
      122,  122,  122,  122,  122,  157,  158,  143,  122,  122,
       63,  122,   59,  122,   61,  122,  112,  122
    } ;

static yyconst short int yy_accept[699] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   14,   16,   20,
       23,   26,   28,   31,   34,   37,   40,   43,   47,   50,
       53,   57,   61,   64,   67,   70,   73,   76,   79,   82,
       85,   88,   91,   94,   97,  100,  103,  106,  109,  112,
      115,  118,  121,  124,  127,  130,  133,  136,  139,  142,
      145,  148,  151,  154,  157,  159,  162,  163,  164,  165,
      165,  166,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  168,  168,  169,  170,
      171,  172,  174,  176,  177,  178,  179,  180,  181,  182,
      183,  184,  185,  186,  187,  188,  189,  190,  191,  192,

      193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
      203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
      213,  214,  215,  216,  217,  218,  219,  220,  222,  224,
      226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
      236,  237,  238,  239,  240,  241,  242,  243,  245,  246,
      247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
      257,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  259,  260,
      261,  262,  263,  264,  265,  267,  268,  269,  271,  272,

      273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
      283,  284,  285,  286,  287,  288,  289,  290,  291,  293,
      294,  296,  297,  298,  300,  302,  303,  304,  305,  306,
      307,  309,  310,  311,  312,  313,  314,  315,  316,  317,
      318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
      328,  329,  330,  332,  334,  336,  337,  338,  339,  340,
      341,  342,  343,  344,  345,  346,  348,  349,  350,  352,
      353,  354,  355,  356,  357,  358,  360,  361,  363,  364,
      365,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  367,  367,  367,  367,

      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  368,  369,  370,
      371,  372,  373,  375,  376,  377,  378,  379,  380,  382,
      383,  384,  385,  386,  387,  388,  389,  390,  391,  392,
      393,  394,  395,  396,  398,  399,  401,  402,  403,  404,
      405,  407,  408,  409,  410,  411,  412,  413,  414,  416,
      417,  419,  421,  422,  423,  424,  425,  426,  427,  429,
      431,  432,  434,  435,  437,  438,  439,  440,  441,  442,
      444,  445,  447,  448,  449,  450,  451,  452,  453,  454,
      455,  456,  457,  459,  461,  462,  464,  465,  466,  467,

      468,  470,  471,  473,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      475,  476,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  478,  478,  479,  479,  480,  480,  480,  480,  480,
      480,  480,  482,  483,  484,  485,  487,  488,  489,  491,
      492,  494,  496,  497,  498,  500,  501,  502,  503,  505,
      506,  507,  508,  510,  511,  512,  514,  516,  517,  519,
      520,  522,  524,  525,  526,  528,  529,  530,  532,  533,
      535,  536,  538,  539,  540,  541,  542,  543,  544,  545,
      546,  548,  550,  551,  552,  553,  554,  556,  557,  558,

      559,  560,  561,  562,  563,  564,  566,  567,  569,  570,
      570,  570,  570,  570,  570,  570,  570,  571,  571,  572,
      572,  572,  572,  572,  572,  572,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  574,  575,  575,  575,  575,
      576,  577,  578,  580,  581,  582,  583,  584,  585,  586,
      587,  588,  589,  590,  592,  593,  595,  597,  598,  599,
      601,  602,  603,  605,  606,  608,  609,  610,  612,  613,
      614,  616,  618,  620,  622,  623,  625,  626,  628,  629,
      630,  631,  631,  631,  631,  631,  631,  631,  631,  632,
      633,  633,  633,  633,  634,  635,  635,  635,  635,  635,

      635,  635,  635,  636,  637,  637,  637,  638,  639,  640,
      641,  643,  644,  645,  647,  648,  650,  652,  653,  655,
      656,  657,  658,  659,  661,  662,  664,  665,  666,  668,
      669,  670,  671,  673,  673,  673,  673,  673,  673,  673,
      674,  675,  675,  675,  675,  675,  676,  677,  678,  679,
      679,  680,  680,  681,  682,  684,  685,  686,  688,  689,
      691,  693,  695,  696,  698,  699,  700,  701,  701,  701,
      702,  703,  704,  705,  706,  706,  707,  708,  708,  709,
      711,  712,  713,  714,  715,  716,  717,  718,  719,  719,
      720,  721,  723,  725,  727,  727,  729,  729

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,   28,    1,   29,   30,   31,   32,   33,   34,
       35,   35,   36,   35,   35,   37,   38,   39,   35,   40,
       35,   35,   35,   41,   35,   42,   35,   35,   35,   35,
       43,    1,   44,   45,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   35,   56,   57,   58,   59,
       60,   61,   35,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[74] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1,    1
    } ;

static yyconst short int yy_base[704] =
    {   0,
        0,    0,  779,  780,   72,   75,   54,  772,    0,   92,
      768,    0,  780,  780,  780,  762,  780,  759,  780,  756,
       64,   70,  780,  780,  747,  746,  745,  780,    0,  780,
      780,  780,   46,   56,   86,   54,   95,  111,  710,   47,
       68,  144,   44,  115,  704,   66,  123,  114,  131,  709,
      137,  713,  715,  780,  693,  780,  199,  780,  780,  758,
      780,    0,  173,  758,  726,  725,  730,  174,  710,  711,
      706,   64,  140,  709,  696,  780,  744,  780,  780,    0,
      213,  220,    0,  780,  780,  780,  703,  686,   41,  690,
       62,  692,   93,  702,  689,  700,  686,  694,  681,  696,

      691,   83,  131,  694,  673,  677,  686,  155,  676,  673,
      144,  673,  683,  682,  675,  674,  670,  669,  151,  666,
       94,  668,  679,  153,  668,  658,  663,    0,  182,    0,
      674,  662,  673,  661,  668,  664,  654,  657,  650,  661,
      157,  657,  648,  651,  197,  640,  657,  165,  659,  651,
      646,  653,  638,  641,  639,  638,  189,  644,  643,  635,
      780,  691,  221,  644,  190,  205,  647,  634,  688,  652,
      660,  653,  224,  659,  651,  650,  649,  635,  626,  630,
      618,  630,  210,  618,  629,  628,  626,  780,    0,  251,
      205,  624,  626,  626,    0,  215,  625,    0,  622,  608,

      622,  609,  610,  619,  614,  601,  611,  600,  612,  602,
      146,  596,  603,  595,  609,  595,  603,  599,    0,  601,
      596,  592,  594,  589,    0,  584,  586,  593,  594,  592,
      591,  586,  593,  584,  589,  575,  571,  575,  570,  582,
      567,  573,  565,  565,  577,  574,  576,  219,  561,  577,
      565,  574,  560,  573,    0,  564,  559,  563,  563,  565,
      559,  562,  547,  550,  544,    0,  547,  220,  546,  543,
      556,  546,  108,  553,  552,  547,  536,  537,  549,  541,
      537,  592,  236,  566,  558,  557,  556,  539,  527,  539,
      230,  527,  538,  537,  535,    0,  576,  575,  543,  552,

      544,  538,  541,  538,  538,  510,  525,  518,  521,  226,
      520,  520,  509,  511,  505,  515,  499,  513,  504,  511,
      511,  491,    0,  504,  496,  501,  505,  499,    0,  503,
      506,  505,  495,  499,  494,  493,  493,  482,  494,  479,
      481,  487,  486,    0,  488,  473,  479,  473,  485,  472,
        0,  483,  474,  466,  472,  480,  470,  464,    0,  479,
        0,    0,  467,  474,  460,  461,  465,  457,    0,    0,
      458,    0,  455,  471,  466,  451,  452,  450,  449,    0,
      461,    0,  448,  457,  447,  457,  456,  455,  446,  455,
      443,  453,    0,    0,  452,  236,  447,  452,  440,  442,

        0,  445,    0,    0,  466,  458,  452,  455,  452,  452,
      434,  437,  228,  436,  436,  425,  427,  421,  431,    0,
      780,  780,  473,  439,  441,  445,  444,  443,  442,  416,
      780,  414,  780,  420,  780,  419,  419,  407,  403,  407,
      414,    0,  402,  400,  406,    0,  415,  392,    0,  413,
        0,    0,  394,  409,    0,  398,  392,  396,    0,  405,
      394,  395,    0,  399,  393,    0,    0,  385,    0,  397,
        0,    0,  396,  382,    0,  381,  389,    0,  379,    0,
      377,    0,  387,  371,  384,  381,  375,  372,  377,  379,
      376,  366,  367,  375,  370,  267,  381,  374,  362,  360,

      370,  363,  370,  366,  372,    0,  359,    0,    0,  377,
      379,  383,  382,  381,  380,  353,  780,  359,  780,  358,
      358,  346,  342,  346,  353,  780,  371,  370,  391,  390,
      389,  388,  333,  346,  780,  780,  344,  331,  344,  780,
      780,  330,    0,  344,  332,  333,  325,  324,  332,  321,
      331,  320,  319,    0,  331,  324,    0,  318,  322,    0,
      318,  328,    0,  310,  309,  308,  314,    0,  321,  308,
        0,    0,    0,  320,  305,    0,  316,    0,  304,  309,
      306,  331,  330,  351,  350,  349,  348,  307,  780,  780,
      305,  292,  305,  780,  780,  343,  342,  340,  339,  338,

      337,  291,  780,  780,  343,  295,  285,  287,  279,  291,
        0,  281,  289,    0,  293,    0,    0,  279,    0,  278,
      277,  271,  283,    0,  282,    0,  270,  267,    0,  275,
      265,  277,    0,  316,  315,  313,  312,  311,  310,  780,
      780,  317,  269,  307,  306,  780,  780,  780,  780,  270,
      780,  312,  263,  263,    0,  251,  253,    0,  244,    0,
        0,    0,  252,    0,  253,  242,  247,  283,  282,  780,
      780,  780,  780,  780,  289,  780,  780,  228,  780,    0,
      240,  230,  204,  203,  174,  780,  780,  780,  170,  124,
       78,    0,    0,    0,   31,    0,  780,  296,   79,  299,

      302,  305,  308
    } ;

static yyconst short int yy_def[704] =
    {   0,
      697,    1,  697,  697,  697,  697,  697,  698,  699,  697,
      697,  700,  697,  697,  697,  697,  697,  697,  697,  697,
      699,  699,  697,  697,  697,  697,  697,  697,  699,  697,
      697,  697,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  697,  697,  697,  697,  697,  697,  698,
      697,  699,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  701,
      697,  699,  699,  697,  697,  697,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  701,  697,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  702,  697,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  699,  703,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  702,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  699,  699,  699,  699,  699,  699,  703,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  699,
      699,  699,  699,  699,  699,  697,  697,  697,  697,  699,
      699,  699,  699,  699,  697,  699,    0,  697,  697,  697,

      697,  697,  697
    } ;

static yyconst short int yy_nxt[854] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   23,   24,   25,   26,   27,   28,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   30,   31,   32,   29,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   29,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   29,   29,   53,
       54,   55,   56,   57,   57,   57,   57,   57,   57,   58,
       81,   62,   82,   82,   82,   82,   81,  193,   82,   82,
       82,   82,  431,  125,  134,   87,   88,  126,   59,   63,

      194,   64,   89,  135,  107,   83,   90,   91,   92,   93,
       95,   94,   96,  108,  196,   97,  127,   98,  109,  128,
      181,   65,  182,  197,  140,  141,  129,  142,   66,  208,
      143,   67,   99,  209,  100,  101,  696,   68,   69,  102,
       70,   71,   72,  195,  233,  103,   73,  104,  105,   74,
      106,  110,  199,  111,  234,  112,   75,  115,  394,  116,
      113,  117,  114,  130,  130,  136,  395,  147,  118,  144,
      119,  120,  121,  145,  137,  122,  123,  148,  149,  138,
      150,  151,  162,  156,  152,  696,  146,  157,  210,  211,
      131,  183,  153,  221,  132,  335,  158,  184,  185,  154,

       57,   57,   57,  133,  173,  174,  216,  175,  222,  336,
      176,  230,  231,  217,  177,  237,  238,  255,  163,  256,
      266,  218,  164,  165,  267,  317,  268,  166,  242,  695,
      167,  190,  190,  190,  190,  694,   81,  168,   82,   82,
       82,   82,  243,  260,  244,  225,  289,  277,  290,  261,
      278,  283,  284,  693,  285,  300,  291,  286,  262,  311,
      263,  287,  292,  293,  301,  692,  318,  405,  312,  190,
      190,  190,  190,  266,  389,  370,  406,  266,  371,  414,
      434,  502,  518,  435,  390,  519,  572,  572,  415,  691,
      690,  689,  688,  687,  686,  503,   60,  685,   60,   77,

      684,   77,  189,  683,  189,  420,  682,  420,  509,  681,
      509,  403,  401,  543,  680,  679,  678,  677,  676,  675,
      674,  673,  672,  671,  670,  669,  668,  266,  667,  666,
      665,  664,  403,  403,  663,  662,  661,  660,  659,  658,
      657,  656,  655,  654,  653,  652,  651,  650,  649,  648,
      647,  646,  645,  644,  643,  642,  641,  640,  639,  638,
      637,  636,  635,  634,  633,  632,  631,  266,  630,  629,
      628,  627,  626,  625,  624,  623,  622,  621,  620,  619,
      618,  617,  616,  615,  614,  613,  612,  611,  610,  609,
      401,  608,  607,  606,  605,  604,  603,  602,  601,  600,

      599,  598,  597,  596,  595,  594,  593,  592,  591,  590,
      589,  588,  587,  586,  585,  584,  583,  582,  581,  580,
      579,  578,  577,  576,  575,  574,  401,  573,  571,  570,
      569,  568,  567,  566,  565,  480,  401,  403,  564,  266,
      563,  562,  266,  561,  560,  559,  558,  557,  556,  555,
      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,
      195,  544,  543,  543,  542,  541,  540,  539,  538,  537,
      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  517,  516,  515,
      514,  513,  512,  511,  510,  508,  507,  506,  505,  504,

      195,  501,  500,  499,  498,  497,  225,  496,  495,  494,
      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  482,  481,  480,  266,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  394,  469,  468,  467,  466,
      465,  464,  463,  462,  461,  460,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
      266,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  433,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  419,  418,  417,  416,  413,  412,
      411,  410,  409,  408,  407,  404,  403,  402,  401,  400,

      399,  398,  397,  396,  393,  266,  392,  391,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  369,  368,  367,  366,  365,
      364,  363,  225,  362,  361,  360,  359,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  316,  315,  314,  313,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  299,  298,
      297,  296,  295,  294,  288,  282,  281,  280,  279,  276,

      275,  274,  273,  272,  271,  270,  269,  265,  264,  259,
      258,  257,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  241,  240,  239,  236,  235,  232,  229,  228,
      227,  226,  225,  224,  223,  220,  219,  215,  214,  213,
      212,  207,  206,  205,  204,  203,  202,  201,  200,  198,
      195,  192,  191,  188,  187,  186,  180,  179,  178,  172,
      171,  170,  169,   61,  161,  160,  159,  155,  139,  124,
       86,   85,   84,   80,   79,   78,   76,   61,  697,    3,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697
    } ;

static yyconst short int yy_chk[854] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    5,    5,    6,    6,    6,    7,
       21,  699,   21,   21,   21,   21,   22,   89,   22,   22,
       22,   22,  695,   40,   43,   33,   33,   40,    7,   10,

       89,   10,   33,   43,   36,   21,   33,   33,   33,   33,
       34,   33,   34,   36,   91,   34,   41,   34,   36,   41,
       72,   10,   72,   91,   46,   46,   41,   46,   10,  102,
       46,   10,   35,  102,   35,   35,  691,   10,   10,   35,
       10,   10,   10,   93,  121,   35,   10,   35,   35,   10,
       35,   37,   93,   37,  121,   37,   10,   38,  273,   38,
       37,   38,   37,   42,   42,   44,  273,   48,   38,   47,
       38,   38,   38,   47,   44,   38,   38,   48,   48,   44,
       48,   49,   63,   51,   49,  690,   47,   51,  103,  103,
       42,   73,   49,  111,   42,  211,   51,   73,   73,   49,

       57,   57,   57,   42,   68,   68,  108,   68,  111,  211,
       68,  119,  119,  108,   68,  124,  124,  141,   63,  141,
      148,  108,   63,   63,  148,  191,  148,   63,  129,  689,
       63,   81,   81,   81,   81,  685,   82,   63,   82,   82,
       82,   82,  129,  145,  129,  129,  165,  157,  165,  145,
      157,  163,  163,  684,  163,  173,  166,  163,  145,  183,
      145,  163,  166,  166,  173,  683,  191,  283,  183,  190,
      190,  190,  190,  196,  268,  248,  283,  196,  248,  291,
      310,  396,  413,  310,  268,  413,  496,  496,  291,  682,
      681,  678,  675,  669,  668,  396,  698,  667,  698,  700,

      666,  700,  701,  665,  701,  702,  663,  702,  703,  659,
      703,  657,  656,  654,  653,  652,  650,  645,  644,  643,
      642,  639,  638,  637,  636,  635,  634,  632,  631,  630,
      628,  627,  625,  623,  622,  621,  620,  618,  615,  613,
      612,  610,  609,  608,  607,  606,  605,  602,  601,  600,
      599,  598,  597,  596,  593,  592,  591,  588,  587,  586,
      585,  584,  583,  582,  581,  580,  579,  577,  575,  574,
      570,  569,  567,  566,  565,  564,  562,  561,  559,  558,
      556,  555,  553,  552,  551,  550,  549,  548,  547,  546,
      545,  544,  542,  539,  538,  537,  534,  533,  532,  531,

      530,  529,  528,  527,  525,  524,  523,  522,  521,  520,
      518,  516,  515,  514,  513,  512,  511,  510,  507,  505,
      504,  503,  502,  501,  500,  499,  498,  497,  495,  494,
      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  481,  479,  477,  476,  474,  473,  470,  468,  465,
      464,  462,  461,  460,  458,  457,  456,  454,  453,  450,
      448,  447,  445,  444,  443,  441,  440,  439,  438,  437,
      436,  434,  432,  430,  429,  428,  427,  426,  425,  424,
      423,  419,  418,  417,  416,  415,  414,  412,  411,  410,
      409,  408,  407,  406,  405,  402,  400,  399,  398,  397,

      395,  392,  391,  390,  389,  388,  387,  386,  385,  384,
      383,  381,  379,  378,  377,  376,  375,  374,  373,  371,
      368,  367,  366,  365,  364,  363,  360,  358,  357,  356,
      355,  354,  353,  352,  350,  349,  348,  347,  346,  345,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  331,  330,  328,  327,  326,  325,  324,  322,
      321,  320,  319,  318,  317,  316,  315,  314,  313,  312,
      311,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  295,  294,  293,  292,  290,  289,
      288,  287,  286,  285,  284,  282,  281,  280,  279,  278,

      277,  276,  275,  274,  272,  271,  270,  269,  267,  265,
      264,  263,  262,  261,  260,  259,  258,  257,  256,  254,
      253,  252,  251,  250,  249,  247,  246,  245,  244,  243,
      242,  241,  240,  239,  238,  237,  236,  235,  234,  233,
      232,  231,  230,  229,  228,  227,  226,  224,  223,  222,
      221,  220,  218,  217,  216,  215,  214,  213,  212,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  197,  194,  193,  192,  187,  186,  185,  184,  182,
      181,  180,  179,  178,  177,  176,  175,  174,  172,  171,
      170,  169,  168,  167,  164,  162,  160,  159,  158,  156,

      155,  154,  153,  152,  151,  150,  149,  147,  146,  144,
      143,  142,  140,  139,  138,  137,  136,  135,  134,  133,
      132,  131,  127,  126,  125,  123,  122,  120,  118,  117,
      116,  115,  114,  113,  112,  110,  109,  107,  106,  105,
      104,  101,  100,   99,   98,   97,   96,   95,   94,   92,
       90,   88,   87,   77,   75,   74,   71,   70,   69,   67,
       66,   65,   64,   60,   55,   53,   52,   50,   45,   39,
       27,   26,   25,   20,   18,   16,   11,    8,    3,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "pnfhra.lpp"
#define INITIAL 0
#line 5 "pnfhra.lpp"
/* Prologue */
/*
Copyright (C) 2019 Dennis Earl Smiley

This file is part of pnfhra.

    pnfhra is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pnfhra is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pnfhra.  If not, see <https://www.gnu.org/licenses/>. 
*/
/*
CHANGELOG
=========

5/3/19 Origional a-a-a - 1. The first version.
			 2. Added structs.
*/
#include <stdarg.h>

#include "pnfhra.tab.cpp"


void generate_code();
void generate_pcode(bool names);
void generate_switch_code();
String strip_quotes(String str);
void generate_comment_code();


PNF_Variable lval;
/* Flex Definitions */
/* Flex Patterns Below %% */
#line 920 "pnfhra.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 393 "pnfhra.lpp"


#line 1074 "pnfhra.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 698 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 780 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 395 "pnfhra.lpp"
lval.put("1"); yylval = lval; return VOIDV;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 397 "pnfhra.lpp"
{
			 String b;
			 if (strcmp(yytext, "true") == 0)
		          b = "true";
			 else if (strcmp(yytext, "false") == 0)
			  b = "false";
			 else
 			  b = "true";

			 lval.put(b); 
			 yylval = lval.to_boolean(); 
			 return BOOLEANV;
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 411 "pnfhra.lpp"
{
			 double d = atof(yytext);
			 PNF_Number n(d);
			 PNF_Variable v(n);
			 lval.put(v.to_number());
			 yylval.put(lval.to_number());
			 return NUMBERV;
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 420 "pnfhra.lpp"
{
			 char ch = yytext[1];
			 PNF_Character c(ch);
			 lval.put(c);
			 yylval = lval.to_character();
			 return CHARACTERV;
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 428 "pnfhra.lpp"
{
			 String str = yytext;
			 PNF_String s(str);
			 lval.put(s);
			 yylval = lval.to_string();
			 return STRINGV;
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 436 "pnfhra.lpp"
lval.put("1"); yylval = lval; return SEND;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 438 "pnfhra.lpp"
lval.put("1"); yylval = lval; return COMMA;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 440 "pnfhra.lpp"
lval.put("0"); yylval = lval; return LEFTP;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 442 "pnfhra.lpp"
lval.put("0"); yylval = lval; return RIGHTP;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 444 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPEQUAL;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 446 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPPLUS;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 448 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPMINUS;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 450 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPTIMES;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 452 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPDIV;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 454 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPMODULUS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 456 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPPOWER;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 458 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPROOT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 460 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPINC;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 462 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPDEC;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 464 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPAND;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 466 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPAMP;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 468 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPOR;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 470 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPNOT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 472 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPCOLON;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 474 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPSUB;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 476 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPEQU;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 478 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPNEQU;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 480 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPLSS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 482 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPGTR;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 484 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPLEQU;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 486 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPGEQU;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 488 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPQUES;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 490 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPDOT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 492 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPLSQ;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 494 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPRSQ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 496 "pnfhra.lpp"
lval.put("0"); yylval = lval; return OPSTR;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 498 "pnfhra.lpp"
lval.put("0"); yylval = lval; return VAR;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 500 "pnfhra.lpp"
lval.put("0"); yylval = lval; return PRINT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 502 "pnfhra.lpp"
lval.put("0"); yylval = lval; return PRINTLN;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 504 "pnfhra.lpp"
lval.put("0"); yylval = lval; return EPRINT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 506 "pnfhra.lpp"
lval.put("0"); yylval = lval; return EPRINTLN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 508 "pnfhra.lpp"
lval.put("0"); yylval = lval; return END;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 510 "pnfhra.lpp"
lval.put("0"); yylval = lval; return ASM;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 512 "pnfhra.lpp"
lval.put("0"); yylval = lval; return LOAD;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 514 "pnfhra.lpp"
lval.put("0"); yylval = lval; return GOTO;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 516 "pnfhra.lpp"
lval.put("0"); yylval = lval; return ST;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 518 "pnfhra.lpp"
lval.put("0"); yylval = lval; return PUSH;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 520 "pnfhra.lpp"
lval.put("0"); yylval = lval; return POP;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 522 "pnfhra.lpp"
lval.put("0"); yylval = lval; return TYPEOF;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 524 "pnfhra.lpp"
lval.put("0"); yylval = lval; return ATOC;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 526 "pnfhra.lpp"
lval.put("0"); yylval = lval; return SWITCH;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 528 "pnfhra.lpp"
lval.put("0"); yylval = lval; return CSWITCH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 530 "pnfhra.lpp"
lval.put("0"); yylval = lval; return CRASH;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 532 "pnfhra.lpp"
lval.put("0"); yylval = lval; return VERSION;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 534 "pnfhra.lpp"
lval.put("0"); yylval = lval; return HALT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 536 "pnfhra.lpp"
lval.put("0"); yylval = lval; return MODT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 538 "pnfhra.lpp"
lval.put("0"); yylval = lval; return RETURN;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 540 "pnfhra.lpp"
lval.put("0"); yylval = lval; return GOSUB;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 542 "pnfhra.lpp"
lval.put("0"); yylval = lval; return SUB;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 544 "pnfhra.lpp"
lval.put("0"); yylval = lval; return EVENT;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 546 "pnfhra.lpp"
lval.put("0"); yylval = lval; return UNREGISTER;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 548 "pnfhra.lpp"
lval.put("0"); yylval = lval; return REGISTER;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 550 "pnfhra.lpp"
lval.put("0"); yylval = lval; return REREGISTER;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 552 "pnfhra.lpp"
lval.put("0"); yylval = lval; return STORE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 554 "pnfhra.lpp"
lval.put("0"); yylval = lval; return IF;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 556 "pnfhra.lpp"
{
			 lval.put("0");
			 yylval = lval;
			 return ELSE;
			}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 562 "pnfhra.lpp"
lval.put("0"); yylval = lval; return CASE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 564 "pnfhra.lpp"
lval.put("0"); yylval = lval; return CCASE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 566 "pnfhra.lpp"
lval.put("0"); yylval = lval; return DEFAULT;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 568 "pnfhra.lpp"
lval.put("0"); yylval = lval; return CDEFAULT;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 570 "pnfhra.lpp"
lval.put("0"); yylval = lval; return BREAK;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 572 "pnfhra.lpp"
lval.put("0"); yylval = lval; return LABEL;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 574 "pnfhra.lpp"
lval.put("0"); yylval = lval; return WHILE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 576 "pnfhra.lpp"
lval.put("0"); yylval = lval; return ADDRESSOF;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 578 "pnfhra.lpp"
lval.put("0"); yylval = lval; return ADD2V;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 580 "pnfhra.lpp"
lval.put("0"); yylval = lval; return STOREA;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 582 "pnfhra.lpp"
lval.put("0"); yylval = lval; return DOWHILE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 584 "pnfhra.lpp"
lval.put("0"); yylval = lval; return DOFOR;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 586 "pnfhra.lpp"
lval.put("0"); yylval = lval; return FOR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 588 "pnfhra.lpp"
lval.put("0"); yylval = lval; return FVAR;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 590 "pnfhra.lpp"
lval.put("0"); yylval = lval; return FOREVER;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 592 "pnfhra.lpp"
lval.put("0"); yylval = lval; return CONTINUE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 594 "pnfhra.lpp"
lval.put("0"); yylval = lval; return CHECK;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 596 "pnfhra.lpp"
lval.put("0"); yylval = lval; return HCMNT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 598 "pnfhra.lpp"
lval.put("0"); yylval = lval; return FMODE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 600 "pnfhra.lpp"
lval.put("0"); yylval = lval; return FOPEN;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 602 "pnfhra.lpp"
lval.put("0"); yylval = lval; return FCLOSE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 604 "pnfhra.lpp"
lval.put("0"); yylval = lval; return FEOF;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 606 "pnfhra.lpp"
lval.put("0"); yylval = lval; return FPRINT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 608 "pnfhra.lpp"
lval.put("0"); yylval = lval; return FPRINTLN;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 610 "pnfhra.lpp"
lval.put("0"); yylval = lval; return FREAD;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 612 "pnfhra.lpp"
lval.put("0"); yylval = lval; return MEML;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 614 "pnfhra.lpp"
lval.put("0"); yylval = lval; return ENUM;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 616 "pnfhra.lpp"
lval.put("0"); yylval = lval; return ENUMV;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 618 "pnfhra.lpp"
lval.put("0"); yylval = lval; return RANGE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 620 "pnfhra.lpp"
lval.put("0"); yylval = lval; return RANGEV;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 622 "pnfhra.lpp"
lval.put("0"); yylval = lval; return ARRAY;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 624 "pnfhra.lpp"
lval.put("0"); yylval = lval; return BLANK;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 626 "pnfhra.lpp"
lval.put("0"); yylval = lval; return PNFASM;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 628 "pnfhra.lpp"
lval.put("0"); yylval = lval; return LENGTH;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 630 "pnfhra.lpp"
lval.put("0"); yylval = lval; return DUP;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 632 "pnfhra.lpp"
lval.put("0"); yylval = lval; return THEN;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 634 "pnfhra.lpp"
lval.put("0"); yylval = lval; return ENDIF;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 636 "pnfhra.lpp"
lval.put("0"); yylval = lval; return DONEIF;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 638 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return TYPE;
			}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 645 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return LTYPE;
			}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 652 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return GTYPE;
			}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 659 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return RTYPE;
			}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 666 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return VTYPE;
			}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 673 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return STYPE;
			}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 680 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return ATYPE;
			}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 687 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return CTYPE;
			}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 694 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return CMTYPE;
			}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 701 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return BFMODEC;
			}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 708 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FMODEC;
			}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 715 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return VTYPE2;
			}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 722 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return RTYPE2;
			}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 729 "pnfhra.lpp"
lval.put("0"); yylval = lval; return READ;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 731 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FUNCTION;
			}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 738 "pnfhra.lpp"
{
			 lval.put("0");
			 yylval = lval;
			 return STRUCT;
			}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 744 "pnfhra.lpp"
{
			 lval.put("0");
			 yylval = lval;
			 return STRUCTD;
			}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 750 "pnfhra.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return ID;
			}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 757 "pnfhra.lpp"
return PBIN;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 759 "pnfhra.lpp"
return PPBIN;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 761 "pnfhra.lpp"
return PLIB;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 763 "pnfhra.lpp"
return PINCLUDE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 765 "pnfhra.lpp"
return PIMPORT;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 767 "pnfhra.lpp"
return PDEFINE;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 769 "pnfhra.lpp"
return PMACRO;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 771 "pnfhra.lpp"
return PENDM;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 773 "pnfhra.lpp"
return PUNDEF;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 775 "pnfhra.lpp"
return PIFDEF;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 777 "pnfhra.lpp"
return PIFNDEF;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 779 "pnfhra.lpp"
return PELSE;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 781 "pnfhra.lpp"
return PENDIF;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 783 "pnfhra.lpp"
return PPDATE;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 785 "pnfhra.lpp"
return PPTIME;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 787 "pnfhra.lpp"
return PPLINE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 789 "pnfhra.lpp"
return PPFILE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 791 "pnfhra.lpp"
return PPCDATE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 793 "pnfhra.lpp"
return PPCTIME;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 795 "pnfhra.lpp"
{ 
		 conprint("' %s\n", yytext);		 
		}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 799 "pnfhra.lpp"
return PPINCLUDE;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 801 "pnfhra.lpp"
return PPIMPORT;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 803 "pnfhra.lpp"
return PPDEFINE;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 805 "pnfhra.lpp"
return PPMACRO;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 807 "pnfhra.lpp"
return PPENDM;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 809 "pnfhra.lpp"
return PPUNDEF;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 811 "pnfhra.lpp"
return PPIFDEF;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 813 "pnfhra.lpp"
return PPIFNDEF;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 815 "pnfhra.lpp"
return PPELSE;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 817 "pnfhra.lpp"
return PPENDIF;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 819 "pnfhra.lpp"
return PPPDATE;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 821 "pnfhra.lpp"
return PPPTIME;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 823 "pnfhra.lpp"
return PPPLINE;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 825 "pnfhra.lpp"
return PPPFILE;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 827 "pnfhra.lpp"
return PPPCDATE;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 829 "pnfhra.lpp"
return PPPCTIME;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 831 "pnfhra.lpp"
{ 
		 conprint("'! %s\n", yytext); 
		}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 835 "pnfhra.lpp"
{
			 lval.put("0");
			 yylval = lval;
			 return LEFTB;
			}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 841 "pnfhra.lpp"
{
			 lval.put("0");
			 yylval = lval;
			 return RIGHTB;
			}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 847 "pnfhra.lpp"
/* Eat up Whitespace */
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 849 "pnfhra.lpp"
/* Eat up comment */
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 851 "pnfhra.lpp"
{
			 String str = "Scan error: ";
			 str += yytext;
			 yyerror(str.getString().c_str());

			 lval.put("0");
			 yylval = lval;
			}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 860 "pnfhra.lpp"
ECHO;
	YY_BREAK
#line 2127 "pnfhra.cpp"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 698 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 698 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 697);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 860 "pnfhra.lpp"

/* Additional Code */
int main(int argc, char ** argv)
{
 try
 {
  yydebug = 0;


  varTable[scope].insert();


  if (argc == 3)
  {
   String extension = get_extension(argv[1]);
   if (extension == ".ppphra")
    preprocess(argv[1]);

   FILE * input = fopen((strip_extension(argv[1]) + ".phra").getString().c_str(), "r");
   if (!input)
   {
    yyerror("can't open file");
    return -1;
   }
   yyin = input;
   output = fopen(argv[2], "w");
   if (!output)
   {
    yyerror("can't open file for write");
    return -1;
   }

  
   int ret = yyparse();
   //generate_pcode(false);
   //generate_switch_code();
   //generate_comment_code();
   generate_code();


   fclose(output);
   return ret;
  }
  else
   yyerror("can't find input file or output file.");
 }
 catch (Exception e)
 {
  cout << e.what() << endl;
 }
 catch (...)
 {
  error(ERRORMSG, "Some error.");
 }
}

void yyerror(char const * c)
{
 cout << "* ERROR: " << yylineno << ": " << c << endl;
}

String get_extension(String fileName)
{
 unsigned long index = fileName.getString().find(".");
 if (index == string::npos)
  yyerror((char *)"File has No Extension.");

 String extension = fileName.getString().substr(index);


 return extension;
}

String strip_extension(String fileName)
{
 unsigned long index = fileName.getString().find(".");
 if (index == string::npos)
  yyerror((char *)"File has No Extension.");

 String stripped = fileName.getString().substr(0, index);


 return stripped;
}

void preprocess(String arg)
{ 
 _spawnl(_P_WAIT, "pnfpp.exe", "pnfpp.exe", (strip_extension(arg) + (char *)".ppphra").getString().c_str(), 
 		 (strip_extension(arg) + (char *)".phra").getString().c_str(), NULL);
}

int conprint(const char * format, ...)
{
 va_list arg;
 int done = 0;

 va_start(arg, format);

 out.insert();
 done = vsnprintf(outbuffer, 256, format, arg);
 String str = "";
 if (outbuffer != NULL)
  str += outbuffer;
 out[outcount] = str;
 ++outcount;

 va_end(arg);


 return done;
}

void generate_code()
{
 unsigned long len = out.length();
 for (unsigned long i = 0; i < out.length(); ++i)
 {
  if (out[i].getString() == "")
   out.remove(i);
 }

 for (unsigned long i = 0; i < out.length(); ++i)
 {
  fprintf(output, "%s", out[i].getString().c_str());
 }
}

void generate_pcode(bool names)
{
 unsigned long len = tree.nodenumber();

 for (unsigned long i = 0; i < len; ++i)
 {
  ASTNode node(tree.getNode(i));
  String nodename = node.getName();
  nodename += ":\n\n";
  if (names)
   conprint("%s", nodename.getString().c_str());

  for (unsigned long j = 0; j < node.getValue().length(); ++j)
   conprint("%s", node.getValue()[j].getString().c_str());
 }
}