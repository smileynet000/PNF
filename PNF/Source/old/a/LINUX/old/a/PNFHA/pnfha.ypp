%{
/* Prologue */
#include <deslib/deslib.hpp>
#include <cmath>
#include <sstream>
#include <typeinfo>

#include "..\pnf.hpp"


#define YYSTYPE PNF_Variable
#define YYDEBUG 1


int main(int argc, char ** argv);
void yyerror(char const * c);
String get_extension(String fileName);
String strip_extension(String fileName);
void preprocess(String arg);
int conprint(const char * format, ...);
void movelineno(unsigned long index, unsigned long line);
void sort(Array<unsigned long> & array);
void sort_lines(Array<String> & array);
int yylex();
String strip_quotes(String str);
FILE * output;

PNF_Type_Enum exptype;


class Var
{
 private:
  String itsname;
  PNF_Variable itsvalue;
  unsigned long itsaddress;

 public:
  Var();
  Var(int v);


  void name(String name);
  String name();

  void value(PNF_Variable value);
  PNF_Variable value();

  void address(unsigned long a);
  unsigned long address();

  Var operator=(const Var & v);
};

Var::Var()
{
 itsname = "";
 itsvalue.to_number().put(0);
 itsaddress = 0;
}

Var::Var(int v)
{
 itsname = "";
 PNF_Number n(v);
 PNF_Variable p(n);
 itsvalue = p;
 itsaddress = 0;
}

void Var::name(String name)
{
 itsname = name;
}

String Var::name()
{
 return itsname;
}

void Var::value(PNF_Variable value)
{
 itsvalue = value;
}

PNF_Variable Var::value()
{
 return itsvalue;
}

void Var::address(unsigned long a)
{
 itsaddress = a;
}

unsigned long Var::address()
{
 return itsaddress;
}

Var Var::operator=(const Var & v)
{
 if (this == &v)
  return *this;

 itsname = v.itsname;
 itsvalue = v.itsvalue;
 itsaddress = v.itsaddress;
  
  
 return (*this);
}


class CLabel
{
 private:
  String itsname;
  unsigned long itsaddress;
  bool itsdeclared;

 public:
  CLabel();
  CLabel(int i);


  void name(String name);
  String name();

  void address(unsigned long a);
  unsigned long address();

  void declared(bool d);
  bool declared();
};

CLabel::CLabel()
{
 itsname = "";
 itsaddress = 0;
}

CLabel::CLabel(int i)
{
 itsname = "";
 itsaddress = i;
 itsdeclared = false;
}

void CLabel::name(String name)
{
 itsname = name;
}

String CLabel::name()
{
 return itsname;
}

void CLabel::address(unsigned long a)
{
 itsaddress = a;
}

unsigned long CLabel::address()
{
 return itsaddress;
}

void CLabel::declared(bool d)
{
 itsdeclared = d;
}

bool CLabel::declared()
{
 return itsdeclared;
}

class CELabel : public CLabel
{
 protected:
  static unsigned long itshevents;
  static unsigned long itsshevents;
  static unsigned long itsevents;
  static unsigned long itsexceptions;
  static unsigned long itsints;

 
 public:
  CELabel();
  CELabel(int i);

  static void inchevents();
  static void dechevents();
  static unsigned long hevents();

  static void incshevents();
  static void decshevents();
  static unsigned long shevents();

  static void incevents();
  static void decevents();
  static unsigned long events();

  static void incexceptions();
  static void decexceptions();
  static unsigned long exceptions();

  static void incints();
  static void decints();
  static unsigned long ints();
};


unsigned long CELabel::itshevents = 0;
unsigned long CELabel::itsshevents = 0;
unsigned long CELabel::itsevents = 0;
unsigned long CELabel::itsexceptions = 0;
unsigned long CELabel::itsints = 0;

CELabel::CELabel() : CLabel()
{

}

CELabel::CELabel(int i) : CLabel(i)
{

}

void CELabel::inchevents()
{
 ++itshevents;
}

void CELabel::dechevents()
{
 --itshevents;
}

unsigned long CELabel::hevents()
{
 return itshevents;
}

void CELabel::incshevents()
{
 ++itsshevents;
}

void CELabel::decshevents()
{
 --itsshevents;
}

unsigned long CELabel::shevents()
{
 return itsshevents;
}

void CELabel::incevents()
{
 ++itsevents;
}

void CELabel::decevents()
{
 --itsevents;
}

unsigned long CELabel::events()
{
 return itsevents;
}

void CELabel::incexceptions()
{
 ++itsexceptions;
}

void CELabel::decexceptions()
{
 --itsexceptions;
}

unsigned long CELabel::exceptions()
{
 return itsexceptions;
}

void CELabel::incints()
{
 ++itsints;
}

void CELabel::decints()
{
 --itsints;
}

unsigned long CELabel::ints()
{
 return itsints;
}

class ASTNode
{
 protected:
  String name;
  Array<String> value;
  unsigned long valuecount;


 public:
  ASTNode(const String n = "");
  ASTNode(char * n);
  ASTNode(const Array<String> v, const String n = "");
	
  ASTNode(ASTNode & n);

  ~ASTNode();

  
  String getName();
  Array<String> getValue();

  void setName(const String n);
  void setValue(const Array<String> v);

  void setNode(const ASTNode n);


  int conprint(const char * format, ...);


  ASTNode operator=(ASTNode & n);
};

ASTNode::ASTNode(const String n)
{
 name = n;
 valuecount = 0;
}

ASTNode::ASTNode(char * n)
{
 name = n;
 valuecount = 0;
}

ASTNode::ASTNode(const Array<String> v, const String n)
{
 name = n;
 value = v;
 valuecount = value.length();
}

ASTNode::ASTNode(ASTNode & n)
{
 name = n.getName();
 
 for (unsigned long i = 0; i < n.value.length(); ++i)
 {
  if (i != 0)
   value.insert();

  value[i] = n.value[i];
 }
}

ASTNode::~ASTNode()
{
 
}

String ASTNode::getName()
{
 return name;
}

Array<String> ASTNode::getValue()
{
 return value;
}

void ASTNode::setName(String n)
{
 name = n;
}

void ASTNode::setValue(Array<String> v)
{
 for (unsigned long i = 0; i < v.length(); ++i)
 {
  if (i != 0)
   value.insert();

  value[i] = v[i];
 }
}

void ASTNode::setNode(ASTNode n)
{
 name = n.getName();
 
 for (unsigned long i = 0; i < n.value.length(); ++i)
 {
  if (i != 0)
   value.insert();

  value[i] = n.value[i];
 }
}

int ASTNode::conprint(const char * format, ...)
{
 char outbuffer[256];


 va_list arg;
 int done = 0;

 va_start(arg, format);

 value.insert();
 done = vsnprintf(outbuffer, 256, format, arg);
 String str = "";
 if (outbuffer != NULL)
  str += outbuffer;
 value[valuecount] = str;
 ++valuecount;

 va_end(arg);


 return done;
}

ASTNode ASTNode::operator=(ASTNode & n)
{
 if (this == &n)
  return *this;

 name = n.name;
 value = n.value;

 return *this; 
}

class ASTTree
{
 protected:
  Array<ASTNode *> nodes;


 public:
  ASTTree();
  ASTTree(ASTTree & t);
  ~ASTTree();


  void add_node(ASTNode & node);
  void remove_node();
  void remove_node(String n);

  ASTNode & getNode(String n);
  ASTNode & getNode(unsigned long offset);
  void setNode(String n, ASTNode & node);
  void setNode(unsigned long offset, ASTNode & node);

  unsigned long nodenumber();
};

ASTTree::ASTTree()
{
 nodes[0] = 0;
}

ASTTree::ASTTree(ASTTree & t)
{
 nodes = t.nodes;
}

ASTTree::~ASTTree()
{
 for (unsigned long i = 1; i < nodenumber(); ++i)
  remove_node();
}

void ASTTree::add_node(ASTNode & node)
{
 if (nodes.length() == 1 && nodes[0] == NULL)
  nodes[0] = new ASTNode (node);
 else
 {
  nodes.insert();
  nodes[nodes.length() - 1] = new ASTNode(node);
 }
}

void ASTTree::remove_node()
{
 if (nodes.length() > 1)
 {
  delete nodes[nodes.length() - 1];
  nodes[nodes.length() - 1] = NULL;
  nodes.remove();
 }
 else if (nodes.length() == 1 && nodes[0] != NULL)
 {
  delete nodes[0];
  nodes[0] = NULL;
 }
 else
 {
  cout << "* ERROR: Called ASTTree::remove_node(), but nothing to do." << endl;
  exit(-1);
 }
}

void ASTTree::remove_node(String n)
{
 for (unsigned long i = 0; i < nodes.length(); ++i)
 {
  if (nodes[i]->getName().getString() == n.getString())
  {
   nodes.remove(i);
  }
 }
}

ASTNode & ASTTree::getNode(String n)
{
 for (unsigned long i = 0; i < nodes.length(); ++i)
 {
  if (nodes[i]->getName().getString() == n.getString())
   return *nodes[i];
 }
}
 
ASTNode & ASTTree::getNode(unsigned long offset)
{
 if (offset < nodes.length())
 {
  return *nodes[offset];
 }
 else if (offset < 0 || offset > nodes.length())
 {
  String errormsg = "Index out of bounds. node = ";
  String temp;
  char temp2[33];
  itoa(offset, temp2, 10);
  temp = temp2;
  errormsg += temp;
  cout << "* ERROR: " << errormsg.getString().c_str() << endl;
  exit(-1);
 }
}

void ASTTree::setNode(String n, ASTNode & node)
{
 for (unsigned long i = 0; i < nodes.length(); ++i)
 {
  if (nodes[i]->getName().getString() == n.getString())
  {
   nodes[i] = NULL;
   nodes[i] = new ASTNode(node);
  }
 }
}

void ASTTree::setNode(unsigned long offset, ASTNode & node)
{
 if (offset < nodes.length())
 {
  nodes[offset] = NULL;
  nodes[offset] = new ASTNode(node);
 }
 else
 {
  String errormsg = "Index out of bounds. node = ";
  String temp;
  char temp2[33];
  itoa(offset, temp2, 10);
  temp = temp2;
  errormsg += temp;
  cout << "* ERROR: " << errormsg.getString().c_str() << endl;
  exit(-1);
 }
}

unsigned long ASTTree::nodenumber()
{
 return nodes.length();
}


unsigned long scope = 0;
Array< Array<Var> > varTable;
Array<CLabel> labelTable;
Array<CELabel> eventLabelTable;

unsigned long ifcounter = 0;
String ifcounternum = "";
unsigned long ifnest = 0;
unsigned long elsecounter = 0;
unsigned long ifgoto = 0;

Array<String> out;
char outbuffer[256];
unsigned long outcount;

Array<unsigned long> statementoutcount = 0;
unsigned long ifbegin = 0;
unsigned long ifbeginlineno = 0;
unsigned long elsebegin = 0;
unsigned long elsebeginlineno = 0;
unsigned long endifbegin = 0;
Array<unsigned long> statementlineno = 0;


unsigned long varcount = 0;

bool inblock = false;
bool blockinstmt = false;
bool blockinelse = false;
bool blockinif = false;
bool inif = false;


unsigned long switchcounter = 0;
PNF_Type_Enum switchexptype = TVOID;
unsigned long switchcasecounter = 0;
bool inswitch = false;
bool switchfound = false;

bool inloop = false;
unsigned long midloop = 0;
bool loopexpr = false;
bool infor = false;
unsigned short inforfor = 3;

unsigned long whilecounter = 0;

unsigned long dowhilecounter = 0;

unsigned long forcounter = 0;

unsigned long doforcounter = 0;

unsigned long forevercounter = 0;


bool inloop2 = false;
bool inwhile = false;
bool indowhile = false;
bool infor2 = false;
bool indofor = false;
bool inforever = false;


bool exptruth = false;


unsigned long topcounter = 0;

bool intop = false;
unsigned long intopfor = 2;


bool breakinforever = false;


ASTTree tree;
%}
/* Bison Declarations */
%debug


%expect 23
%error-verbose


%left OPINC OPDEC
%left NEG
%left OPNOT OPBTNOT
%left OPAMP
%right OPPOWER OPROOT
%left OPTIMES OPDIV OPMODULUS
%left OPMINUS OPPLUS
%left OPBTSL OPBTSR
%left OPLSS OPLEQU OPGTR OPGEQU
%left OPEQU OPNEQU
%left OPBTXOR OPBTOR
%left OPAND
%left OPOR
%right OPEQUAL

%token LEFTP
%token RIGHTP
%token LEFTB
%token RIGHTB

%token VOIDV
%token BOOLEANV
%token NUMBERV
%token CHARACTERV
%token STRINGV

%token SEND
%token COMMA

%token OPEQUAL
%token OPPLUS
%token OPMINUS
%token OPTIMES
%token OPDIV
%token OPMODULUS
%token OPPOWER
%token OPROOT
%token OPINC
%token OPDEC
%token OPAND
%token OPAMP
%token OPOR
%token OPNOT
%token OPQUES
%token OPCOLON
%token OPSUB
%token OPEQU
%token OPNEQU
%token OPGTR
%token OPLSS
%token OPLEQU
%token OPGEQU
%token OPBTOR
%token OPBTXOR
%token OPBTNOT
%token OPBTSL
%token OPBTSR
%token OPSTR

%token ID

%token VAR
%token PRINT
%token PRINTLN
%token EPRINT
%token EPRINTLN
%token END
%token ASM
%token TYPE
%token READ
%token LOAD
%token LTYPE
%token GOTO
%token GTYPE
%token ST
%token PUSH
%token POP
%token TYPEOF
%token RTYPE
%token ATOC
%token SWITCH
%token CSWITCH
%token CRASH
%token VERSION
%token VTYPE
%token HALT
%token MODT
%token RETURN
%token GOSUB
%token SUB
%token EVENT
%token STYPE
%token ATYPE
%token CTYPE
%token CMTYPE
%token BFMODEC
%token FMODEC
%token UNREGISTER
%token REGISTER
%token REREGISTER
%token STORE
%token IF
%token ELSE
%token CASE
%token CCASE
%token DEFAULT
%token CDEFAULT
%token BREAK
%token LABEL
%token WHILE
%token ADDRESSOF
%token ADD2V
%token STOREA
%token DOWHILE
%token DOFOR
%token FOR
%token FVAR
%token FOREVER
%token CONTINUE
%token CHECK
%token HCMNT
%token FMODE
%token FOPEN
%token FCLOSE
%token FEOF
%token FPRINT
%token FPRINTLN
%token FREAD
%token MEML
%token ENUM
%token ENUMV
%token VTYPE2
%token RANGE
%token RTYPE2
%token OPDOT
%token RANGEV
%token OPLSQ
%token OPRSQ
%token ARRAY
%token BLANK
%token PNFASM
%token LENGTH
%token DUP


%token PBIN
%token PPBIN
%token PLIB

%token PINCLUDE
%token PIMPORT
%token PDEFINE
%token PMACRO
%token PENDM
%token PUNDEF
%token PIFDEF
%token PIFNDEF
%token PELSE
%token PENDIF
%token PPDATE
%token PPTIME
%token PPLINE
%token PPFILE
%token PPCDATE
%token PPCTIME

%token PPINCLUDE
%token PPIMPORT
%token PPDEFINE
%token PPMACRO
%token PPENDM
%token PPUNDEF
%token PPIFDEF
%token PPIFNDEF
%token PPELSE
%token PPENDIF
%token PPPDATE
%token PPPTIME
%token PPPLINE
%token PPPFILE
%token PPPCDATE
%token PPPCTIME

%%
/* Grammar Rules */

input:	// Empty
	| input line { ASTNode start("START"); tree.add_node(start); }
	;

line:	{
	 ASTNode line("line");
         tree.add_node(line);
	}
	"\n"
	| statement
	| error		{ yyerrok; }
	;

statement:	{
		 ASTNode statement("statement");
  		 tree.add_node(statement);
		}
		stmt
		| statement COMMA stmt
		;

stmt:		control_statement { statementoutcount.insert(); statementoutcount[statementoutcount.length() - 1] = outcount - 1; 
		    	                    statementlineno.insert(); statementlineno[statementlineno.length() - 1] = yylineno; }
		| SEND { ASTNode stmt("stmt"); stmt.conprint("VOID TVOID 0V\n"); tree.add_node(stmt); statementoutcount.insert(); 
                         statementoutcount[statementoutcount.length() - 1] = outcount - 1; statementlineno.insert(); statementlineno[statementlineno.length() - 1]                          = yylineno; }
		| expression_statement  { statementoutcount.insert(); statementoutcount[statementoutcount.length() - 1] = outcount - 1;
					  statementlineno.insert(); statementlineno[statementlineno.length() - 1] = yylineno; }
		| declaration_statement  { statementoutcount.insert(); statementoutcount[statementoutcount.length() - 1] = outcount - 1;
					   statementlineno.insert(); statementlineno[statementlineno.length() - 1] = yylineno; }
		| label_statement  { statementoutcount.insert(); statementoutcount[statementoutcount.length() - 1] = outcount - 1;
				     statementlineno.insert(); statementlineno[statementlineno.length() - 1] = yylineno; }
		| command_statement  { statementoutcount.insert(); statementoutcount[statementoutcount.length() - 1] = outcount - 1;
				       statementlineno.insert(); statementlineno[statementlineno.length() - 1] = yylineno; }
		| statement_block  { statementoutcount.insert(); statementoutcount[statementoutcount.length() - 1] = outcount - 1;
				     statementlineno.insert(); statementlineno[statementlineno.length() - 1] = yylineno; inblock = true;
				   }
		| pp_directive
		| pp_statement
		;

expression_statement:	expression SEND
			{
			 ASTNode expression_statement("expression_statement");
			 tree.add_node(expression_statement);
			}
			;

declaration_statement:	declaration SEND
			{
			 ASTNode declaration_statement("declaration_statement");
			 tree.add_node(declaration_statement);
			}
			;

command_statement:	command SEND
			{
			 ASTNode command_statement("command_statement");
			 tree.add_node(command_statement);
			}
			;

label_statement:	ID OPCOLON 
			{
			 ASTNode label_statement("label_statement");

			 bool declared = false;
			 String str;
			 for (unsigned long i = 0; i < labelTable.length(); ++i)
			 {
			  str = labelTable[i].name();
			  if ($1.to_string().get().getString() == labelTable[i].name().getString())
			  {
			   declared = true;
			   if (labelTable[i].declared() == true)
 			   {
			    str += " implemented already.";
			    yyerror(str.getString().c_str());
			   }
			   else
			   {
                            labelTable[i].declared(true);
			    label_statement.conprint("LBL TVOID 0V\n");
			   }
			  }
			 }

			 if (!declared)
			 {	  
			  str += " not declared.";
			  yyerror(str.getString().c_str());
			 }

			 tree.add_node(label_statement);
			}
			| SUB ID OPCOLON
			{
			 ASTNode label_statement("label_statement");

			 label_statement.conprint("LBL TVOID 0V\n");

			 tree.add_node(label_statement);
			}
			| EVENT ID OPCOLON
			{
			 ASTNode label_statement("label_statement");

			 label_statement.conprint("ELBL TVOID 0V\n");

			 tree.add_node(label_statement);
			}
			;

control_statement:	if_statement
			{
			 ASTNode control_statement("control_statement");
			 tree.add_node(control_statement);
			}
			| switch_statement
			{
			 ASTNode control_statement("control_statement");
			 tree.add_node(control_statement);
			}
			| loop_statement
			{
			 ASTNode control_statement("control_statement");

			 breakinforever = false;

			 tree.add_node(control_statement);
			}
			;

if_statement:		IF
			{
			 inif = true;
			 ++ifcounter;
			 ifcounternum.from_long(ifcounter);
                         String nname = (String)"if_statementp1_" + ifcounternum;
			 ASTNode if_statementp1(nname);
			 ifgoto = ifcounter < 2 ? ifcounter : ifcounter + 1;

			 String if_body_str = "if_body_";
			 if_body_str += ifgoto - 1;

			 labelTable.insert();
			 labelTable[labelTable.length() - 1].name(if_body_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 2);

			 if_statementp1.conprint("; Begin if :%u\n", ifcounter);

			 tree.add_node(if_statementp1);		
			}
			LEFTP expression RIGHTP
			{
			 String nname = (String)"if_statementp2_" + ifcounternum;
			 ASTNode if_statementp2(nname);


			 PNF_Boolean b(exptruth);
			 String str = b.get();
			 if_statementp2.conprint("ALOAD TBOOLEAN %s\n", str.getString().c_str());
			 if_statementp2.conprint("CGOTOL TSTRING \"iftrue_%u\"\n", ifcounter);
			 if_statementp2.conprint("GOTOL TSTRING \"iffalse_or_end_%u\"\n", ifcounter);

			 if_statementp2.conprint("\n\n; Begin if code :%u\n", ifcounter);
			 if_statementp2.conprint("LBL TSTRING \"iftrue_%u\"\n", ifcounter);

			 labelTable.insert();
			 String iftrue_str_num;
			 iftrue_str_num.from_long(ifcounter);
			 String iftrue_str = (String)"iftrue_" + iftrue_str_num;
			 labelTable[labelTable.length() - 1].name(iftrue_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 2);


			 tree.add_node(if_statementp2);
			}
			stmt
			{
			 String nname = (String)"if_statementp3_" + ifcounternum;
			 ASTNode if_statementp3(nname);
			 // Code for if will be inserted here...
			 if_statementp3.conprint("; End if code :%u\n", ifcounter);
			 ifbegin = outcount;

			 String after_if_str = "after_if_";
 			 after_if_str += ifgoto - 1;

			 labelTable.insert();
			 labelTable[labelTable.length() - 1].name(after_if_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 2);
			 endifbegin = outcount - 1;

			 if_statementp3.conprint("GOTOL TSTRING \"end_%u\"\n", ifcounter);


			 if_statementp3.conprint("\n\n; Begin iffalse_or_end :%u\n", ifcounter);
			 if_statementp3.conprint("LBL TSTRING \"iffalse_or_end_%u\"\n", ifcounter);

			 labelTable.insert();
			 String iffalse_or_end_str_num;
			 iffalse_or_end_str_num.from_long(ifcounter);
			 String iffalse_or_end_str = (String)"iffalse_or_end_" + iffalse_or_end_str_num;
			 labelTable[labelTable.length() - 1].name(iffalse_or_end_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 2);

			 tree.add_node(if_statementp3);
			}
			opt_else
			{
			 --ifcounter;
			 ++ifnest;
			}
			{
			 inif = false;
			}
			;

opt_else:		| ELSE stmt
			{
			 String nname = (String)"if_statementp5_" + ifcounternum;
			 ASTNode if_statementp5(nname);

			 ++elsecounter;


			 // Code for else will be inserted here if exists...
			 if_statementp5.conprint("; End if or else code :%u\n", ifcounter);
			 elsebegin = outcount;

			 String else_body_str = "else_body_";
			 else_body_str += ifcounter;
			 String after_if_str = "after_if_";
 			 after_if_str += ifgoto - 1;

			 labelTable.remove();

			 labelTable.insert();
			 labelTable[labelTable.length() - 1].name(else_body_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 2);

			 labelTable.insert();
			 labelTable[labelTable.length() - 1].name(after_if_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 2);

			 if_statementp5.conprint("GOTOL TSTRING \"end_%u\"\n", ifcounter);


			 if_statementp5.conprint("\n\nLBL TSTRING \"end_%u\"\n", ifcounter);
			 if_statementp5.conprint("; End if :%u\n", ifcounter);

			 labelTable.insert();
			 String end_str_num;
			 end_str_num.from_long(ifcounter);
			 String end_str = (String)"end_" + end_str_num;
			 labelTable[labelTable.length() - 1].name(end_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 2);


			 tree.add_node(if_statementp5);
			}
			;

switch_statement:	SWITCH LEFTP expression RIGHTP LEFTB
			{
			 ASTNode switch_statementp1("switch_statementp1");

			 switchfound = true;
			 ++switchcounter;
			 switchcasecounter = 0;
			 inswitch = true;

			 switch (exptype)
			 {
			  case TVOID:
			   switch_statementp1.conprint("ALOAD TVOID %s\n", $3.to_string().get().getString().c_str());
			   switchexptype = TVOID;
			   break;

			  case TBOOLEAN:
			   switch_statementp1.conprint("ALOAD TBOOLEAN %s\n", $3.to_string().get().getString().c_str());
			   switchexptype = TBOOLEAN;
     			   break;

			  case TNUMBER:
			   switch_statementp1.conprint("ALOAD TNUMBER %s\n", $3.to_string().get().getString().c_str());
			   switchexptype = TNUMBER;
			   break;

			  case TCHARACTER:
			   switch_statementp1.conprint("ALOAD TCHARACTER %s\n", $3.to_string().get().getString().c_str());
			   switchexptype = TCHARACTER;
			   break;

			  case TSTRING:
			   switch_statementp1.conprint("ALOAD TSTRING %s\n", $3.to_string().get().getString().c_str());
			   switchexptype = TSTRING;
			   break;
			 }
			 switch_statementp1.conprint("ATOC TVOID 0V\n");

			 tree.add_node(switch_statementp1);
			}
			case_statements
			{
			 ASTNode switch_statementp2("switch_statementp2");

			 switch_statementp2.conprint("GOTOL TSTRING \"default_switch_%u\"\n", switchcounter);
			 switch_statementp2.conprint("LBL TSTRING \"default_switch_%u\"\n", switchcounter);

			 labelTable.insert();
			 String default_switch_str_num;
			 default_switch_str_num.from_long(switchcounter);
			 String default_switch_str = (String)"default_switch_" + default_switch_str_num;
			 labelTable[labelTable.length() - 1].name(default_switch_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 3);

			 tree.add_node(switch_statementp2);
			}
			opt_default_statement
			{
			 ASTNode switch_statementp3("switch_statementp3");
			 tree.add_node(switch_statementp3);
			}
			RIGHTB
			{
			 ASTNode switch_statementp4("switch_statementp4");

			 switch_statementp4.conprint("LBL TSTRING \"after_switch_%u\"\n", switchcounter);

			 labelTable.insert();
			 String after_switch_str_num;
			 after_switch_str_num.from_long(switchcounter);
			 String after_switch_str = (String)"after_switch_" + after_switch_str_num;
			 labelTable[labelTable.length() - 1].name(after_switch_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 3);

			 tree.add_node(switch_statementp4);
			}
			| CSWITCH LEFTP stmt RIGHTP
			{
			 ASTNode switch_statementp1("switch_statementp1");

			 switchfound = true;
			 ++switchcounter;
			 switchcasecounter = 0;
			 inswitch = true;

			 switch_statementp1.conprint("ATOC TVOID 0V\n");

			 tree.add_node(switch_statementp1);
			}
			LEFTB
			case_statements2
			{
			 ASTNode switch_statementp2("switch_statementp2");

			 switch_statementp2.conprint("GOTOL TSTRING \"default_switch_%u\"\n", switchcounter);
			 switch_statementp2.conprint("LBL TSTRING \"default_switch_%u\"\n", switchcounter);

			 labelTable.insert();
			 String default_switch_str_num;
			 default_switch_str_num.from_long(switchcounter);
			 String default_switch_str = (String)"default_switch_" + default_switch_str_num;
			 labelTable[labelTable.length() - 1].name(default_switch_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 3);

			 tree.add_node(switch_statementp2);
			}
			opt_default_statement2
			{
			 ASTNode switch_statementp3("switch_statementp3");
			 tree.add_node(switch_statementp3);
			}
			RIGHTB
			{
			 ASTNode switch_statementp4("switch_statementp4");

			 switch_statementp4.conprint("LBL TSTRING \"after_switch_%u\"\n", switchcounter);

			 labelTable.insert();
			 String after_switch_str_num;
			 after_switch_str_num.from_long(switchcounter);
			 String after_switch_str = (String)"after_switch_" + after_switch_str_num;
			 labelTable[labelTable.length() - 1].name(after_switch_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 3);

			 tree.add_node(switch_statementp4);
			}
			;

case_statements:	{
			 ASTNode case_statements("case_statements");
			 tree.add_node(case_statements);
			}
			case_statement
			| case_statements case_statement
			;

case_statement:		CASE expression
			{
			 ASTNode case_statement("case_statement");

			 ++switchcasecounter;

			 if (switchexptype != exptype)
			  yyerror("Non-Matching Switch Expression");

			 case_statement.conprint("LBL TSTRING \"skip_switch_case_%u_%u\"\n", switchcounter, switchcasecounter);

			 labelTable.insert();
			 String skip_switch_case_str_num;
			 skip_switch_case_str_num.from_long(switchcounter);
			 String skip_switch_case_str_num2;
			 skip_switch_case_str_num2.from_long(switchcasecounter);
			 String skip_switch_case_str = (String)"skip_switch_case_" + skip_switch_case_str_num + (String)"_" + skip_switch_case_str_num2;
			 labelTable[labelTable.length() - 1].name(skip_switch_case_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 3);

 			 switch (exptype)
			 {
			  case TVOID:
			   case_statement.conprint("ALOAD TVOID %s\n", $2.to_string().get().getString().c_str());
			   case_statement.conprint("EQU TVOID 0V\n");
			   case_statement.conprint("CGOTOL TSTRING \"switch_case_%u_%u\"\n", switchcounter, switchcasecounter);
			   break;

 			  case TBOOLEAN:
			   case_statement.conprint("ALOAD TBOOLEAN %s\n", $2.to_string().get().getString().c_str());
			   case_statement.conprint("EQU TVOID 0V\n");
			   case_statement.conprint("CGOTOL TSTRING \"switch_case_%u_%u\"\n", switchcounter, switchcasecounter);
			   break;

			  case TNUMBER:
			   case_statement.conprint("ALOAD TNUMBER %s\n", $2.to_string().get().getString().c_str());
			   case_statement.conprint("EQU TVOID 0V\n");
			   case_statement.conprint("CGOTOL TSTRING \"switch_case_%u_%u\"\n", switchcounter, switchcasecounter);
			   break;

			  case TCHARACTER:
			   case_statement.conprint("ALOAD TCHARACTER %s\n", $2.to_string().get().getString().c_str());
			   case_statement.conprint("EQU TVOID 0V\n");
			   case_statement.conprint("CGOTOL TSTRING \"switch_case_%u_%u\"\n", switchcounter, switchcasecounter);
			   break;

		 	  case TSTRING:
			   case_statement.conprint("ALOAD TSTRING %s\n", $2.to_string().get().getString().c_str());
			   case_statement.conprint("EQU TVOID 0V\n");
			   case_statement.conprint("CGOTOL TSTRING \"switch_case_%u_%u\"\n", switchcounter, switchcasecounter);
			   break;
			 }

			 case_statement.conprint("GOTOL TSTRING \"skip_switch_case_%u_%u\"\n", switchcounter, switchcasecounter + 1);
			 case_statement.conprint("LBL TSTRING \"switch_case_%u_%u\"\n", switchcounter, switchcasecounter);

			 labelTable.insert();
			 String switch_case_str_num;
			 switch_case_str_num.from_long(switchcounter);
			 String switch_case_str_num2;
			 switch_case_str_num2.from_long(switchcasecounter);
			 String switch_case_str = (String)"switch_case_" + switch_case_str_num + (String)"_" + switch_case_str_num2;
			 labelTable[labelTable.length() - 1].name(switch_case_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 3);

			 tree.add_node(case_statement);
			}
			OPCOLON stmt
			;

opt_default_statement:	| DEFAULT OPCOLON stmt
			;

case_statements2:	{
			 ASTNode case_statements("case_statements");
			 tree.add_node(case_statements);
			}
			case_statement2
			| case_statements2 case_statement2
			;

case_statement2:	CCASE
			{
			 ASTNode case_statementp1("case_statement");

			 ++switchcasecounter;

			 case_statementp1.conprint("LBL TSTRING \"skip_switch_case_%u_%u\"\n", switchcounter, switchcasecounter);
			
			 tree.add_node(case_statementp1);
			}
			stmt
			OPCOLON
			{
			 ASTNode case_statementp2("case_statementp2");

			 labelTable.insert();
			 String skip_switch_case_str_num;
			 skip_switch_case_str_num.from_long(switchcounter);
			 String skip_switch_case_str_num2;
			 skip_switch_case_str_num2.from_long(switchcasecounter);
			 String skip_switch_case_str = (String)"skip_switch_case_" + skip_switch_case_str_num + (String)"_" + skip_switch_case_str_num2;
			 labelTable[labelTable.length() - 1].name(skip_switch_case_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 3);

			 case_statementp2.conprint("EQU TVOID 0V\n");
			 case_statementp2.conprint("CGOTOL TSTRING \"switch_case_%u_%u\"\n", switchcounter, switchcasecounter);

			 case_statementp2.conprint("GOTOL TSTRING \"skip_switch_case_%u_%u\"\n", switchcounter, switchcasecounter + 1);
			 case_statementp2.conprint("LBL TSTRING \"switch_case_%u_%u\"\n", switchcounter, switchcasecounter);

			 labelTable.insert();
			 String switch_case_str_num;
			 switch_case_str_num.from_long(switchcounter);
			 String switch_case_str_num2;
			 switch_case_str_num2.from_long(switchcasecounter);
			 String switch_case_str = (String)"switch_case_" + switch_case_str_num + (String)"_" + switch_case_str_num2;
			 labelTable[labelTable.length() - 1].name(switch_case_str);
			 labelTable[labelTable.length() - 1].address(labelTable.length() - 3);

			 tree.add_node(case_statementp2);
			}
			stmt
			{
			 ASTNode case_statementp3("case_statementp3");

			 case_statementp3.conprint("GOTOL TSTRING \"switch_case_%u_%u\"\n", switchcounter, switchcasecounter + 1);

			 tree.add_node(case_statementp3);
			}
			;

opt_default_statement2:	| CDEFAULT OPCOLON stmt
			;

loop_statement:		{
			 loopexpr = true;
			 inloop2 = true;
			}
			while_loop
			{
			 ASTNode loop_statement("loop_statement");
			 tree.add_node(loop_statement);
			}
			| whileb_loop
			{
			 ASTNode loop_statement("loop_statement");
			 tree.add_node(loop_statement);
			}
			| for_loop
			{
			 ASTNode loop_statement("loop_statement");
			 tree.add_node(loop_statement);
			}
			| forb_loop
			{
			 ASTNode loop_statement("loop_statement");
			 tree.add_node(loop_statement);
			}
			| forever_loop
			{
			 ASTNode loop_statement("loop_statement");
			 
			 loopexpr = false;
			 inloop = true;		 

			 tree.add_node(loop_statement);
			}
			{
			 inloop2 = false;
			 inwhile = false;
			 indowhile = false;
			 infor2 = false;
			 indofor = false;
			 inforever = false;
			}
			;

while_loop:		WHILE LEFTP
			{
			 ASTNode while_loopp1("while_loopp1");

			 inwhile = true;
			 ++whilecounter;
			 while_loopp1.conprint("LBL TSTRING \"while_test_%u\"\n", whilecounter);

			 tree.add_node(while_loopp1);
			}
			stmt
			{
			 ASTNode while_loopp2("while_loopp2");

			 tree.add_node(while_loopp2);
			}
			RIGHTP
			{
			 ASTNode while_loopp3("while_loopp3");

			 while_loopp3.conprint("CGOTOL TSTRING \"while_body_%u\"\n", whilecounter);
			 while_loopp3.conprint("GOTOL TSTRING \"while_end_%u\"\n", whilecounter);

			 while_loopp3.conprint("LBL TSTRING \"while_body_%u\"\n", whilecounter);

			 tree.add_node(while_loopp3);
			}
			stmt
			{
			 ASTNode while_loopp4("while_loopp4");

			 while_loopp4.conprint("GOTOL TSTRING \"while_test_%u\"\n", whilecounter);
			 while_loopp4.conprint("LBL TSTRING \"while_end_%u\"\n", whilecounter);

			 tree.add_node(while_loopp4);
			}
			;

whileb_loop:		{
			 ASTNode do_while_loopp1("do_while_loopp1");

			 indowhile = true;
			 ++dowhilecounter;
			 do_while_loopp1.conprint("LBL TSTRING \"do_while_body_%u\"\n", dowhilecounter);

			 tree.add_node(do_while_loopp1);
			}
			DOWHILE
			{
			 ASTNode do_while_loopp2("do_while_loopp2");

			 tree.add_node(do_while_loopp2);
			}
			stmt
			WHILE 
			{
			 ASTNode do_while_loopp3("do_while_loopp3");

			 do_while_loopp3.conprint("LBL TSTRING \"do_while_test_%u\"\n", dowhilecounter);

			 tree.add_node(do_while_loopp3);
			}
			LEFTP
			{
			 ASTNode do_while_loopp4("do_while_loopp4");

			 tree.add_node(do_while_loopp4);
			}
			stmt
			{
			 ASTNode do_while_loopp5("do_while_loopp5");

			 do_while_loopp5.conprint("CGOTOL TSTRING \"do_while_body_%u\"\n", dowhilecounter);
			 do_while_loopp5.conprint("GOTOL TSTRING \"do_while_end_%u\"\n", dowhilecounter);

			 tree.add_node(do_while_loopp5);
			}
			RIGHTP
			{
			 ASTNode do_while_loopp6("do_while_loopp6");

			 do_while_loopp6.conprint("LBL TSTRING \"do_while_end_%u\"\n", dowhilecounter);

			 tree.add_node(do_while_loopp6);
			}
			;

for_loop:		{
			 infor = true;
			}
			FOR LEFTP
			{
			 ASTNode for_loopp1("for_loopp1");

			 infor2 = true;
			 ++forcounter;
			 for_loopp1.conprint("LBL TSTRING \"for_initialization_%u\"\n", forcounter);

			 tree.add_node(for_loopp1);
			}
			stmt SEND	// Initialization
			{
			 ASTNode for_loopp2("for_loopp2");

			 for_loopp2.conprint("LBL TSTRING \"for_condition_%u\"\n", forcounter);

			 tree.add_node(for_loopp2);
			}
			stmt SEND	// Condition
			{
			 ASTNode for_loopp3("for_loopp3");

			 for_loopp3.conprint("CGOTOL TSTRING \"for_body_%u\"\n", forcounter);
			 for_loopp3.conprint("GOTOL TSTRING \"for_end_%u\"\n", forcounter);
			 for_loopp3.conprint("LBL TSTRING \"for_increment_statement_%u\"\n", forcounter);

			 tree.add_node(for_loopp3);
			}
			stmt		// Increment Statement
			{
			 ASTNode for_loopp4("for_loopp4");

			 for_loopp4.conprint("GOTOL TSTRING \"for_condition_%u\"\n", forcounter);
			 for_loopp4.conprint("LBL TSTRING \"for_body_%u\"\n", forcounter);

			 tree.add_node(for_loopp4);
			}
			RIGHTP stmt
			{
			 ASTNode for_loopp5("for_loopp5");

			 for_loopp5.conprint("GOTOL TSTRING \"for_increment_statement_%u\"\n", forcounter);
			 for_loopp5.conprint("LBL TSTRING \"for_end_%u\"\n", forcounter);

			 tree.add_node(for_loopp5);
			}
			;

forb_loop:		DOFOR
			{
			 ASTNode forb_loopp1("forb_loopp1");

			 indofor = true;
			 infor = true;
			 ++doforcounter;

			 forb_loopp1.conprint("GOTOL TSTRING \"dofor_initialization_%u\"\n", doforcounter);
			 forb_loopp1.conprint("LBL TSTRING \"dofor_body_%u\"\n", doforcounter);

			 tree.add_node(forb_loopp1);
			}
			stmt
			{
			 ASTNode forb_loopp2("forb_loopp2");

			 forb_loopp2.conprint("GOTOL TSTRING \"dofor_increment_statement_%u\"\n", doforcounter);
			 forb_loopp2.conprint("LBL TSTRING \"dofor_initialization_%u\"\n", doforcounter);

			 tree.add_node(forb_loopp2);
			}
			FOR LEFTP
			{
			 ASTNode forb_loopp3("forb_loopp3");

			 tree.add_node(forb_loopp3);
			}
			stmt SEND	// Initialization
			{
			 ASTNode forb_loopp4("forb_loopp4");

			 forb_loopp4.conprint("GOTOL TSTRING \"dofor_body_%u\"\n", doforcounter);
			 forb_loopp4.conprint("LBL TSTRING \"dofor_condition_%u\"\n", doforcounter);

			 tree.add_node(forb_loopp4);
			}
			stmt SEND	// Condition
			{
			 ASTNode forb_loopp5("forb_loopp5");

			 forb_loopp5.conprint("CGOTOL TSTRING \"dofor_body_%u\"\n", doforcounter);
			 forb_loopp5.conprint("GOTOL TSTRING \"dofor_end_%u\"\n", doforcounter);
			 forb_loopp5.conprint("LBL TSTRING \"dofor_increment_statement_%u\"\n", doforcounter);

			 tree.add_node(forb_loopp5);
			}
			stmt		// Increment Statement
			{
			 ASTNode forb_loopp6("forb_loopp6");
			 tree.add_node(forb_loopp6);
			}
			RIGHTP
			{
			 ASTNode forb_loopp7("forb_loopp7");

			 forb_loopp7.conprint("GOTOL TSTRING \"dofor_condition_%u\"\n", doforcounter);
			 forb_loopp7.conprint("LBL TSTRING \"dofor_end_%u\"\n", doforcounter);

			 tree.add_node(forb_loopp7);
			}
			;

forever_loop:		FOREVER 
			{
			 ASTNode forever_loopp1("forever_loopp1");

			 breakinforever = true;
			 ++forevercounter;
			 forever_loopp1.conprint("LBL TSTRING \"forever_%u\"\n", forevercounter);

			 tree.add_node(forever_loopp1);			
			}
			stmt
			{
			 ASTNode forever_loopp2("forever_loopp2");

			 forever_loopp2.conprint("GOTOL TSTRING \"forever_%u\"\n", forevercounter);
			 forever_loopp2.conprint("LBL TSTRING \"forever_end_%u\"\n", forevercounter);

			 tree.add_node(forever_loopp2);			
			}

statement_block:	LEFTB statements RIGHTB { PNF_String str($2.to_string().get()); $$.put(str); ASTNode statement_block("statement_block"); 
                                                  tree.add_node(statement_block); }
			;

statements:		statement
			{
			 ASTNode statements("statements");
			 tree.add_node(statements);
			}
			| statement statements
			{
			 ASTNode statements("statements");
			 tree.add_node(statements);
			}
			;

expression:	void_expression { $$ = $1; exptype = TVOID; ASTNode expression("expression"); tree.add_node(expression); }
		| boolean_expression
		{
		 $$ = $1;
		 exptype = TBOOLEAN;
		 ASTNode expression("expression");
		 tree.add_node(expression);
		}
		| number_expression { $$.put($1.to_number()); exptype = TNUMBER; ASTNode expression("expression");
                                      tree.add_node(expression); }
		| character_expression { $$ = $1; exptype = TCHARACTER; ASTNode expression("expression"); 
                                         tree.add_node(expression); }
		| string_expression { $$ = $1; exptype = TSTRING; ASTNode expression("expression"); 
                                      tree.add_node(expression); }
		| id_expression { $$ = $1; exptype = (PNF_Type_Enum)$$.getType(); ASTNode expression("expression"); 
                                  tree.add_node(expression); }
		| relational_expression { $$ = $1; exptype = TBOOLEAN; ASTNode expression("expression"); 
					  tree.add_node(expression); }
		| mixed_expression { $$ = $1; exptype = (PNF_Type_Enum)$$.getType(); ASTNode expression("expression"); 
				     tree.add_node(expression); }
		;

void_expression:
			VOIDV
			{
			 PNF_String s("0V");
			 $$.put(s);

			 exptruth = false;

			 ASTNode void_expression("void_expression");
			 tree.add_node(void_expression);
			}
			| LEFTP void_expression RIGHTP { $$ = $2; }
			;

boolean_expression:	BOOLEANV 
			{ 
			 $$ = $1;

			 String str = $$.to_string().get();
			 if (str == "true")
			  exptruth = true;
                         else if (str == "false")
                          exptruth = false;
			 else
			  exptruth = true;

			 ASTNode boolean_expression("boolean_expression"); 
			 tree.add_node(boolean_expression);
			}
			| OPNOT boolean_expression 
			{
			 bool b;
			 String str = $2.to_boolean().get();

			 if (str.getString() == "true")
			  b = true;
			 else
			  b = false;

			 PNF_Boolean b2(b);
			 b2.opnot();
			 $$.put(b2);
			}
			| boolean_expression OPAND boolean_expression
			{
			 String bl = $3.to_boolean().get();
			 bool b;
			
			 if (bl.getString() == "true")
			  b = true;
			 else if (bl.getString() == "false")
			  b = false;
			 else
			  b = false;

			 PNF_Boolean b2($1.to_boolean());
			 b2.opand(b);
			 $$.put(b2);
			}
			| boolean_expression OPOR boolean_expression
			{
			 String bl = $3.to_boolean().get();
			 bool b;
			
			 if (bl.getString() == "true")
			  b = true;
			 else if (bl.getString() == "false")
			  b = false;
			 else
			  b = false;

			 PNF_Boolean b2($1.to_boolean());
			 b2.opor(b);
			 $$.put(b2);
			}
			| LEFTP boolean_expression RIGHTP { $$ = $2; }
			;

number_expression:	NUMBERV
			{ 
			 $$.put(yylval.to_number());

			 double d = $$.to_number().get();

                         if (d == 0)
                          exptruth = false;
                         else
                          exptruth = true;

			 ASTNode number_expression("number_expression");
                         tree.add_node(number_expression);
			}
			| number_expression OPPLUS number_expression	
			{
			 double d = $2.to_number().get();
			 $1.to_number().add(d);
			 $$ = $1;
			}
			| number_expression OPMINUS number_expression
			{
			 double d = $2.to_number().get();
			 $1.to_number().sub(d);
			 $$ = $1;
			}
			| number_expression OPTIMES number_expression
			{
			 double d = $2.to_number().get();
			 $1.to_number().mul(d);
			 $$ = $1;
			}
			| number_expression OPDIV number_expression
			{
			 double d = $2.to_number().get();
			 $1.to_number().div(d);
			 $$ = $1;
			}
			| number_expression OPMODULUS number_expression
			{
			 double d = $2.to_number().get();
			 $1.to_number().mod(d);
			 $$ = $1;
			}
			| OPMINUS number_expression	%prec NEG	
			{
			 char * str = "-";
			 strcat(str, $2.to_string().get().getString().c_str());
			 PNF_String s(str);
			 PNF_Variable v(s);
			 $$ = v;
			}
			| number_expression OPPOWER number_expression	
			{
			 double d = $3.to_number().get();
			 PNF_Number n($1.to_number());
			 n.pow(d);
			 $$.put(n);
			}
			| number_expression OPROOT number_expression
			{
			 double d = $1.to_number().get();
			 PNF_Number n($3.to_number());
			 n.root(d);			 
			 $$.put(n);
			}
			| OPINC number_expression
			{
			 PNF_Number n($2.to_number().get());
			 n.inc(1);
			 $$.put(n);
			}
			| number_expression OPINC
			{
			 PNF_Number n($1.to_number().get());
			 $$.put(n);
			 n.inc(1);
			}
			| OPDEC number_expression
			{
			 PNF_Number n($2.to_number().get());
			 n.dec(1);
			 $$.put(n);
			}
			| number_expression OPDEC
			{
			 PNF_Number n($1.to_number().get());
			 $$.put(n);
			 n.dec(1);
			}
			| number_expression OPAMP number_expression
			{
			 int d1 = (int)$1.to_number().get();
			 int d2 = (int)$3.to_number().get();
			 int d3 = d1 & d2;
			 PNF_Number n(d3);
			 $$.put(n);
			}
			| number_expression OPBTOR number_expression
			{
			 int d1 = (int)$1.to_number().get();
			 int d2 = (int)$3.to_number().get();
			 int d3 = d1 | d2;
			 PNF_Number n(d3);
			 $$.put(n);
			}

			| number_expression OPBTXOR number_expression
			{
			 int d1 = (int)$1.to_number().get();
			 int d2 = (int)$3.to_number().get();
			 int d3 = d1 ^ d2;
			 PNF_Number n(d3);
			 $$.put(n);
			}
			| OPBTNOT number_expression
			{
			 int d = (int)$2.to_number().get();
			 d = ~d;
			 PNF_Number n(d);
			 $$.put(n);
			}
			| number_expression OPBTSL number_expression
			{
			 int d1 = (int)$1.to_number().get();
			 int d2 = (int)$3.to_number().get();
			 int d3 = d1 << d2;
			 PNF_Number n(d3);
			 $$.put(n);
			}
			| number_expression OPBTSR number_expression
			{
			 int d1 = (int)$1.to_number().get();
			 int d2 = (int)$3.to_number().get();
			 int d3 = d1 >> d2;
			 PNF_Number n(d3);
			 $$.put(n);
			}
			| LEFTP number_expression RIGHTP		{ $$ = $2; }
			;

character_expression:
			CHARACTERV
			{
			 $$ = $1;
			 char ch = $$.to_character().get();

			 if (ch == '\0')
                          exptruth = false;
			 else
			  exptruth = true;

			 ASTNode character_expression("character_expression"); 
			 tree.add_node(character_expression);
			}
			| character_expression OPPLUS character_expression	
			{
			 char d = $1.to_character().get();
			 PNF_Character c(d);
			 c.add($3.to_character().get());
			 $$.put(c);
			}
			| character_expression OPMINUS character_expression
			{
			 char d = $1.to_character().get();
			 PNF_Character c(d);
			 c.sub($3.to_character().get());
			 $$.put(c);
			}
			| character_expression OPTIMES character_expression
			{
			 char d = $1.to_character().get();
			 PNF_Character c(d);
			 c.mul($3.to_character().get());
			 $$.put(c);
			}
			| character_expression OPDIV character_expression
			{
			 char d = $1.to_character().get();
			 PNF_Character c(d);
			 c.div($3.to_character().get());
			 $$.put(c);			}
			| character_expression OPMODULUS character_expression
			{
			 char d = $1.to_character().get();
			 PNF_Character c(d);
			 c.mod($3.to_character().get());
			 $$.put(c);
			}
			| character_expression OPPOWER character_expression	
			{
			 char d = $3.to_character().get();
			 PNF_Character c($1.to_character());
			 c.pow(d);
			 $$.put(c);
			}
			| character_expression OPROOT character_expression
			{
			 char d = $1.to_character().get();
			 PNF_Character c($3.to_character());
			 c.root(d);
			 $$.put(c);
			}
			| OPINC character_expression
			{
			 PNF_Character n($2.to_character().get());
			 n.inc(1);
			 $$.put(n);
			}
			| character_expression OPINC
			{
			 PNF_Character n($1.to_character().get());
			 $$.put(n);
			 n.inc(1);
			}
			| OPDEC character_expression
			{
			 PNF_Character n($2.to_character().get());
			 n.dec(1);
			 $$.put(n);
			}
			| character_expression OPDEC
			{
			 PNF_Character n($1.to_character().get());
			 $$.put(n);
			 n.dec(1);
			}
			| LEFTP character_expression RIGHTP	{ $$ = $2; }
			;

string_expression:
			STRINGV
			{
			 $$ = $1;
		
			 String str = $$.to_string().get();
			 if (str == "")
			  exptruth = false;
			 else
			  exptruth = true;

			 ASTNode string_expression("string_expression"); 
			 tree.add_node(string_expression);
			}
			| string_expression OPPLUS string_expression
			{
			 String d = $1.to_string().get();
			 PNF_String s(d);
			 s.add($3.to_string().get());

			 String str = s.get();
			 String str2 = "";
	   	         for (unsigned long i = 0, j = 0; i < str.length(); ++i)
			 {
			  if (str[i] == '\"')
			   continue;
			  else
			  {
			   str2 += str[i];
			   ++j;
			  }
			 }

			 String str3 = '\"';
			 str3 += str2;
			 str3 += '\"';
			 s.put(str3);
			 $$.put(s);
			}
			| OPSTR string_expression
			{
			 String str = $2.to_string().get();
			 String str2 = "\"" + str + "\"";
			 PNF_String s(str2);
			 $$.put(s);
			}
			| LEFTP string_expression RIGHTP	{ $$ = $2; }
			;

id_expression:
			ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   $$ = varTable[scope][i].value();

			   switch ($$.getType())
			   {
			    case TVOID:
			     exptruth = false;
			     break;

			    case TBOOLEAN:
			    {
			     String str = $$.to_boolean().get();
			     if (str == "true")
			      exptruth = true;
			     else if (str == "false")
			      exptruth = false;
			     else
			      exptruth = true;
			     }
			     break;

			    case TNUMBER:
			    {
			     double d = $$.to_number().get();
			     if (d == 0)
			      exptruth = false;
			     else
			      exptruth = true;
			     }
			     break;

			    case TCHARACTER:
			    {
			     char ch = $$.to_character().get();
			     if (ch == '\0')
			      exptruth = false;
			     else
			      exptruth = true;
			     }
			     break;

			    case TSTRING:
			    {
			     String str = $$.to_string().get();
			     if (str == "")
			      exptruth = false;
			     else
			      exptruth = true;
			     }
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $1.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }

			 ASTNode id_expression("id_expression");
			 tree.add_node(id_expression);
			}
			| OPAMP id_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
			  if (strcmp(varTable[scope][i].name().getString().c_str(), $2.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   PNF_Number n(varTable[scope][i].address());
			   $$.put(n);
			  }
			 }

			 if (!declared)
			 {
			  for (unsigned long i = 0; i < labelTable.length(); ++i)
			  {
			   if (strcmp(labelTable[i].name().getString().c_str(), $2.to_string().get().getString().c_str()) == 0)
			   {
			    declared = true;
			    PNF_Number n(labelTable[i].address());
			    $$.put(n);
			   }
 			  }


			  if (!declared)
			  {
			   for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			   {
			    if (strcmp(eventLabelTable[i].name().getString().c_str(), $2.to_string().get().getString().c_str()) == 0)
			    {
			     declared = true;
			     PNF_Number n(eventLabelTable[i].address());
			     $$.put(n);
			    }
  			   }
			  }
			 }
			}
			| OPNOT id_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
			  if (strcmp(varTable[scope][i].name().getString().c_str(), $2.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   PNF_Boolean b;
			   if (varTable[scope][i].value().getType() != TBOOLEAN)
             		    b.put(true);
			   else
			   {
			    bool b2;
			    String str = varTable[scope][i].value().to_boolean().get();
			    if (str.getString() == "true")
			     b2 = true;
			    else if (str.getString() == "false")
			     b2 = false;
			    else
			     b2 = true;

			    b.put(b2);
			   }

			   b.opnot();
			   $$.put(b);
			   varTable[scope][i].value(b);			  }
			 }

			 if (!declared)
			 {
			  String str = $2.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
			}
			| id_expression OPAND id_expression
			{
			 bool declared1 = false;
			 bool declared2 = false;
  		   	 PNF_Boolean b1;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared1 = true;
			   if (varTable[scope][i].value().getType() != TBOOLEAN)
             		    b1.put(true);
			   else
			   {
			    bool b2;
			    String str = varTable[scope][i].value().to_boolean().get();
			    if (str.getString() == "true")
			     b2 = true;
			    else if (str.getString() == "false")
			     b2 = false;
			    else
			     b2 = true;

			    b1.put(b2);
			   }
			  }
			 }

			 if (!declared1)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }

			 PNF_Boolean b3;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared2 = true;
			   if (varTable[scope][i].value().getType() != TBOOLEAN)
             		    b3.put(true);
			   else
			   {
			    bool b4;
			    String str = varTable[scope][i].value().to_boolean().get();
			    if (str.getString() == "true")
			     b4 = true;
			    else if (str.getString() == "false")
			     b4 = false;
			    else
			     b4 = true;
			    b3.put(b4);
			   }
			  }
			 }

			 if (!declared2)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }

			 bool b5;
			 String str = b3.get();
			 if (str.getString() == "true")
			  b5 = true;
			 else if (str.getString() == "false")
			  b5 = false;
			 else
			  b5 = true;

			 b1.opand(b5);
			 $$.put(b1);
			}
			| id_expression OPOR id_expression
			{
			 bool declared1 = false;
			 bool declared2 = false;
			 PNF_Boolean b1;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared1 = true;
			   if (varTable[scope][i].value().getType() != TBOOLEAN)
             		    b1.put(true);
			   else
			   {
			    String str = varTable[scope][i].value().to_boolean().get();
			    bool b2;
			    if (str.getString() == "true")
			     b2 = true;
			    else if (str.getString() == "false")
			     b2 = false;
			    else
			     b2 = true;

			    b1.put(b2);
			   }
			  }
			 }

			 if (!declared1)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }


   		         PNF_Boolean b3;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared2 = true;
			   if (varTable[scope][i].value().getType() != TBOOLEAN)
             		    b3.put(true);
			   else
			   {
			    String str = varTable[scope][i].value().to_boolean().get();
			    bool b4;
			    if (str.getString() == "true")
			     b4 = true;
			    else if (str.getString() == "false")
			     b4 = false;
			    else
			     b4 = true;

			    b3.put(b4);
			   }
			  }
			 }

			 if (!declared2)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }

			 bool b5;
			 String str = b3.get();
			 if (str.getString() == "true")
			  b5 = true;
			 else if (str.getString() == "false")
			  b5 = false;
			 else
			  b5 = true;

			 b1.opor(b5);
			 $$.put(b1);
			}
			| id_expression OPPLUS id_expression	
			{
			 switch ($1.getType())
			 {
			  case TNUMBER:
			  {
			   if ($3.getType() != TNUMBER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   double d = $3.to_number().get();
			   PNF_Number n($1.to_number());
			   n.add(d);
			   $$.put(n);
			  }
			  break;

		          case TCHARACTER:
			  {
			   if ($3.getType() != TCHARACTER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   char d = $3.to_character().get();
			   PNF_Character n($1.to_character());
			   n.add(d);
			   $$.put(n);
			  }
			  break;

			  case TSTRING:
			  {
			   if ($3.getType() != TSTRING)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }

			   String str = $3.to_string().get();
			   String str2 = "";
			   for (unsigned long i = 0; i < str.length(); ++i)
 			   {
			    if (str[i] == '\"')
			     continue;
			    str2 += str[i];
			   }

			   str = $1.to_string().get();
			   String str3 = "";
			   for (unsigned long i = 0; i < str.length(); ++i)
 			   {
			    if (str[i] == '\"')
			     continue;
			    str3 += str[i];
			   }

			   PNF_String s(str3);
			   s.add(str2);

			   str = s.get();
			   String str4 = "\"";
			   for (unsigned long i = 0; i < str.length(); ++i)
 			   {			    
			    str4 += str[i];
			   }
			   str4 += "\"";
			   s.put(str4);

			   $$.put(s);
			  }
			  break;

			  default:
			   PNF_Number n(0);
			   $$.put(n);
			   break;
			 }
			}
			| id_expression OPMINUS id_expression
			{
			 switch ($1.getType())
			 {
			  case TNUMBER:
			  {
			   if ($3.getType() != TNUMBER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   double d = $3.to_number().get();
			   PNF_Number n($1.to_number());
			   n.sub(d);
			   $$.put(n);
			  }
			  break;

		          case TCHARACTER:
			  {
			   if ($3.getType() != TCHARACTER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   char d = $3.to_character().get();
			   PNF_Character n($1.to_character());
			   n.sub(d);
			   $$.put(n);
			  }
			  break;			

			  default:
			   PNF_Number n(0);
			   $$.put(n);
			   break;
			 }
			}
			| id_expression OPTIMES id_expression
			{
			 switch ($1.getType())
			 {
			  case TNUMBER:
			  {
			   if ($3.getType() != TNUMBER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   double d = $3.to_number().get();
			   PNF_Number n($1.to_number());
			   n.mul(d);
			   $$.put(n);
			  }
			  break;

		          case TCHARACTER:
			  {
			   if ($3.getType() != TCHARACTER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   char d = $3.to_character().get();
			   PNF_Character n($1.to_character());
			   n.mul(d);
			   $$.put(n);
			  }
			  break;				

			  default:
			   PNF_Number n(0);
			   $$.put(n);
			   break;
			 }
			}
			| id_expression OPDIV id_expression
			{
			 switch ($1.getType())
			 {
			  case TNUMBER:
			  {
			   if ($3.getType() != TNUMBER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   double d = $3.to_number().get();
			   PNF_Number n($1.to_number());
			   n.div(d);
			   $$.put(n);
			  }
			  break;

		          case TCHARACTER:
			  {
			   if ($3.getType() != TCHARACTER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   char d = $3.to_character().get();
			   PNF_Character n($1.to_character());
			   n.div(d);
			   $$.put(n);
			  }
			  break;			

			  default:
			   PNF_Number n(0);
			   $$.put(n);
			   break;
			 }
			}
			| id_expression OPMODULUS id_expression
			{
			 switch ($1.getType())
			 {
			  case TNUMBER:
			  {
			   if ($3.getType() != TNUMBER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   double d = $3.to_number().get();
			   PNF_Number n($1.to_number());
			   n.mod(d);
			   $$.put(n);
			  }
			  break;

		          case TCHARACTER:
			  {
			   if ($3.getType() != TCHARACTER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   char d = $3.to_character().get();
			   PNF_Character n($1.to_character());
			   n.mod(d);
			   $$.put(n);
			  }
			  break;	

			  default:
			   PNF_Number n(0);
			   $$.put(n);
			   break;
			 }
			}
			| OPMINUS id_expression	%prec NEG	
			{
			 if ($2.getType() != TNUMBER)
			 {
			  PNF_Number n(0);
                          $$.put(n);
			 }
			 double d = $2.to_number().get();
			 d = -d;
			 PNF_Number n(d);
			 PNF_Variable v(n);
			 $$ = v;
			}
			| id_expression OPPOWER id_expression	
			{
			 switch ($1.getType())
			 {
			  case TNUMBER:
			  {
			   if ($3.getType() != TNUMBER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   double d = $3.to_number().get();
			   PNF_Number n($1.to_number());
			   n.pow(d);
			   $$.put(n);
			  }
			  break;

		          case TCHARACTER:
			  {
			   if ($3.getType() != TCHARACTER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   char d = $3.to_character().get();
			   PNF_Character n($1.to_character());
			   n.pow(d);
			   $$.put(n);
			  }
			  break;	

			  default:
			   PNF_Number n(0);
			   $$.put(n);
			   break;
			 }
			}
			| id_expression OPROOT id_expression
			{
			 switch ($1.getType())
			 {
			  case TNUMBER:
			  {
			   if ($3.getType() != TNUMBER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   double d = $1.to_number().get();
			   PNF_Number n($3.to_number());
			   n.root(d);
			   $$.put(n);
			  }
			  break;

		          case TCHARACTER:
			  {
			   if ($3.getType() != TCHARACTER)
			   {
			    PNF_Number n(0);
			    $$.put(n);
			   }
			   char d = $1.to_character().get();
			   PNF_Character n($3.to_character());
			   n.root(d);
			   $$.put(n);
			  }
			  break;	

			  default:
			   PNF_Number n(0);
			   $$.put(n);
			   break;
			 }
			}
			| OPINC id_expression
			{
			 switch ($2.getType())
			 {
			  case TNUMBER:
			  {
			   PNF_Number n($2.to_number().get());
			   n.inc(1);
			   $$.put(n);
			  }
			  break;

			  case TCHARACTER:
			  {
			   PNF_Character c($2.to_character().get());
			   c.inc(1);
			   $$.put(c);
			  }
	                  break;
			  
			  default:
			  {
			   PNF_Number n(0);
                           $$.put(n);
			  }
			  break;
			 }
			}
			| id_expression OPINC
			{
			 switch ($2.getType())
			 {
			  case TNUMBER:
			  {
			   PNF_Number n($2.to_number().get());
			   $$.put(n);
			   n.inc(1);
			  }
			  break;

			  case TCHARACTER:
			  {
			   PNF_Character c($2.to_character().get());
			   $$.put(c);
			   c.inc(1);
			  }
	                  break;
			  
			  default:
			  {
			   PNF_Number n(0);
                           $$.put(n);
			  }
			  break;
			 }
			}
			| OPDEC id_expression
			{
			 switch ($2.getType())
			 {
			  case TNUMBER:
			  {
			   PNF_Number n($2.to_number().get());
			   n.dec(1);
			   $$.put(n);
			  }
			  break;

			  case TCHARACTER:
			  {
			   PNF_Character c($2.to_character().get());
			   c.dec(1);
			   $$.put(c);
			  }
	                  break;
			  
			  default:
			  {
			   PNF_Number n(0);
                           $$.put(n);
			  }
			  break;
			 }
			}
			| id_expression OPDEC
			{
			 switch ($2.getType())
			 {
			  case TNUMBER:
			  {
			   PNF_Number n($2.to_number().get());
			   $$.put(n);
			   n.dec(1);
			  }
			  break;

			  case TCHARACTER:
			  {
			   PNF_Character c($2.to_character().get());
			   $$.put(c);
			   c.dec(1);
			  }
	                  break;
			  
			  default:
			  {
			   PNF_Number n(0);
                           $$.put(n);
			  }
			  break;
			 }
			}
			| LEFTP id_expression RIGHTP { $$ = $1; }
			;

relational_expression:	number_expression OPEQU number_expression
			{
			 double d1 = $1.to_number().get();
			 double d2 = $3.to_number().get();
			 bool b = d1 == d2;
			 PNF_Boolean b2(b);
			 $$.put(b2);

			 ASTNode relational_expression("relational_expression");
			 tree.add_node(relational_expression);
			}
			| number_expression OPNEQU number_expression
			{
			 double d1 = $1.to_number().get();
			 double d2 = $3.to_number().get();
			 bool b = d1 != d2;
			 PNF_Boolean b2(b);
			 $$.put(b2);

			 ASTNode relational_expression("relational_expression");
			 tree.add_node(relational_expression);
			}
			| number_expression OPLSS number_expression
			{
			 double d1 = $1.to_number().get();
			 double d2 = $3.to_number().get();
			 bool b = d1 < d2;
			 PNF_Boolean b2(b);
			 $$.put(b2);

			 ASTNode relational_expression("relational_expression");
			 tree.add_node(relational_expression);
			}
			| number_expression OPGTR number_expression
			{
			 double d1 = $1.to_number().get();
			 double d2 = $3.to_number().get();
			 bool b = d1 > d2;
			 PNF_Boolean b2(b);
			 $$.put(b2);

			 ASTNode relational_expression("relational_expression");
			 tree.add_node(relational_expression);
			}
			| number_expression OPLEQU number_expression
			{
			 double d1 = $1.to_number().get();
			 double d2 = $3.to_number().get();
			 bool b = d1 <= d2;
			 PNF_Boolean b2(b);
			 $$.put(b2);

			 ASTNode relational_expression("relational_expression");
			 tree.add_node(relational_expression);
			}
			| number_expression OPGEQU number_expression
			{
			 double d1 = $1.to_number().get();
			 double d2 = $3.to_number().get();
			 bool b = d1 >= d2;
			 PNF_Boolean b2(b);
			 $$.put(b2);

			 ASTNode relational_expression("relational_expression");
			 tree.add_node(relational_expression);
			}
			{
			 String str = $$.to_boolean().get();
			 if (str == "false")
			  exptruth = false;
			 else if (str == "true")
			  exptruth = true;
			 else
			  exptruth = true;
			}
			;

mixed_expression:	
			LEFTP mixed_expression RIGHTP { $$ = $2; }
			| ID OPAND boolean_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   PNF_Boolean b1;
			   if (varTable[scope][i].value().getType() != TBOOLEAN)
             		    b1.put(true);
			   else
			   {
			    bool b2;
			    String str = varTable[scope][i].value().to_boolean().get();
			    if (str.getString() == "true")
			     b2 = true;
			    else if (str.getString() == "false")
			     b2 = false;
			    else
			     b2 = true;

			    b1.put(b2);
			   }

			   bool b2;
			   String str = $3.to_boolean().get();
			   if (str.getString() == "true")
			    b2 = true;
			   else if (str.getString() == "false")
			    b2 = false;
			   else
			    b2 = true;

			   b1.opand(b2);

			   $$.put(b1);
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| boolean_expression OPAND ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   PNF_Boolean b1;
			   if (varTable[scope][i].value().getType() != TBOOLEAN)
             		    b1.put(true);
			   else
			   {
			    bool b2;
			    String str = varTable[scope][i].value().to_boolean().get();
			    if (str.getString() == "true")
			     b2 = true;
			    else if (str.getString() == "false")
			     b2 = false;
			    else
			     b2 = true;

			    b1.put(b2);
			   }

			   bool b2;
			   String str = $1.to_boolean().get();
			   if (str.getString() == "true")
			    b2 = true;
			   else if (str.getString() == "false")
			    b2 = false;
			   else
			    b2 = true;

			   b1.opand(b2);

			   $$.put(b1);
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPOR boolean_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   PNF_Boolean b1;
			   if (varTable[scope][i].value().getType() != TBOOLEAN)
             		    b1.put(true);
			   else
			   {
			    bool b2;
			    String str = varTable[scope][i].value().to_boolean().get();
			    if (str.getString() == "true")
                             b2 = true;
			    else if (str.getString() == "false")
			     b2 = false;
			    else
			     b2 = true;

			    b1.put(b2);
			   }

			   bool b2;
			   String str = $3.to_boolean().get();
			   if (str.getString() == "true")
			    b2 = true;
			   else if (str.getString() == "false")
			    b2 = false;
			   else
			    b2 = true;

			   b1.opor(b2);

			   $$.put(b1);
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| boolean_expression OPOR ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   PNF_Boolean b1;
			   if (varTable[scope][i].value().getType() != TBOOLEAN)
             		    b1.put(true);
			   else
			   {
			    bool b2;
			    String str = varTable[scope][i].value().to_boolean().get();
			    if (str.getString() == "true")
			     b2 = true;
			    else if (str.getString() == "false")
			     b2 = false;
			    else
			     b2 = true;

			    b1.put(b2);
			   }

			   bool b2;
			   String str = $1.to_boolean().get();
			   if (str.getString() == "true")
			    b2 = true;
			   else if (str.getString() == "false")
			    b2 = false;
			   else
			    b2 = true;

			   b1.opor(b2);

			   $$.put(b1);
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPPLUS number_expression
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     double d = $3.to_number().get();
			     PNF_Number n(varTable[scope][i].value().to_number());
			     n.add(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPMINUS number_expression
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     double d = $3.to_number().get();
			     PNF_Number n(varTable[scope][i].value().to_number());
			     n.sub(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPTIMES number_expression
						{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     double d = $3.to_number().get();
			     PNF_Number n(varTable[scope][i].value().to_number());
			     n.mul(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPDIV number_expression
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     double d = $3.to_number().get();
			     PNF_Number n(varTable[scope][i].value().to_number());
			     n.div(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPPOWER number_expression	
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     double d = $3.to_number().get();
			     PNF_Number n(varTable[scope][i].value().to_number());
			     n.pow(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPROOT number_expression
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     double d = varTable[scope][i].value().to_number().get();
			     PNF_Number n($3.to_number());
			     n.root(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPPLUS ID
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     double d = $1.to_number().get();
			     PNF_Number n(varTable[scope][i].value().to_number());
			     n.add(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPMINUS ID
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     double d = $1.to_number().get();
			     PNF_Number n(varTable[scope][i].value().to_number());
			     n.sub(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPTIMES ID
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     double d = $1.to_number().get();
			     PNF_Number n(varTable[scope][i].value().to_number());
			     n.mul(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPDIV ID
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     double d = $1.to_number().get();
			     PNF_Number n(varTable[scope][i].value().to_number());
			     n.div(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPPOWER ID
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     double d = $1.to_number().get();
			     PNF_Number n(varTable[scope][i].value().to_number());
			     n.pow(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPROOT ID
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     double d = varTable[scope][i].value().to_number().get();
			     PNF_Number n($1.to_number());
			     n.root(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPPLUS character_expression
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TCHARACTER:
			    {
			     if ($3.getType() != TCHARACTER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     char d = $3.to_character().get();
			     PNF_Character n(varTable[scope][i].value().to_character());
			     n.add(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPMINUS character_expression
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TCHARACTER:
			    {
			     if ($3.getType() != TCHARACTER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     char d = $3.to_character().get();
			     PNF_Character n(varTable[scope][i].value().to_character());
			     n.sub(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPTIMES character_expression
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TCHARACTER:
			    {
			     if ($3.getType() != TCHARACTER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     char d = $3.to_character().get();
			     PNF_Character n(varTable[scope][i].value().to_character());
			     n.mul(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPDIV character_expression
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TCHARACTER:
			    {
			     if ($3.getType() != TCHARACTER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     char d = $3.to_character().get();
			     PNF_Character n(varTable[scope][i].value().to_character());
			     n.div(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPPOWER character_expression	
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TCHARACTER:
			    {
			     if ($3.getType() != TCHARACTER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     char d = $3.to_character().get();
			     PNF_Character n(varTable[scope][i].value().to_character());
			     n.pow(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPROOT character_expression
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TCHARACTER:
			    {
			     if ($3.getType() != TCHARACTER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     char d = varTable[scope][i].value().to_character().get();
			     PNF_Character n($3.to_character());
			     n.root(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| character_expression OPPLUS ID
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TCHARACTER:
			    {
			     if ($1.getType() != TCHARACTER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     char d = $1.to_character().get();
			     PNF_Character n(varTable[scope][i].value().to_character());
			     n.add(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| character_expression OPMINUS ID
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TCHARACTER:
			    {
			     if ($1.getType() != TCHARACTER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     char d = $1.to_character().get();
			     PNF_Character n(varTable[scope][i].value().to_character());
			     n.sub(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| character_expression OPTIMES ID
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TCHARACTER:
			    {
			     if ($1.getType() != TCHARACTER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     char d = $1.to_character().get();
			     PNF_Character n(varTable[scope][i].value().to_character());
			     n.mul(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| character_expression OPDIV ID
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TCHARACTER:
			    {
			     if ($1.getType() != TCHARACTER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     char d = $1.to_character().get();
			     PNF_Character n(varTable[scope][i].value().to_character());
			     n.div(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| character_expression OPPOWER ID
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TCHARACTER:
			    {
			     if ($1.getType() != TCHARACTER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     char d = $1.to_character().get();
			     PNF_Character n(varTable[scope][i].value().to_character());
			     n.pow(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| character_expression OPROOT ID
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TCHARACTER:
			    {
			     if ($1.getType() != TCHARACTER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }
			     char d = varTable[scope][i].value().to_character().get();
			     PNF_Character n($1.to_character());
			     n.root(d);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPPLUS string_expression
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TSTRING:
			    {
			     if ($3.getType() != TSTRING)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     String d = $3.to_string().get();
			     String str = "";
			     for (unsigned is = 0; is < d.length(); ++is)
			     {
			      if (d[is] == '\"')
			       continue;
			      str += d[is];
			     }
			     String str2 = varTable[scope][i].value().to_string().get();
			     String str3 = "";
			     for (unsigned is = 0; is < str2.length(); ++is)
			     {
			      if (str2[is] == '\"')
			       continue;
			      str3 += str2[is];
			     }

			     PNF_String n(str3);
			     n.add(str);
	  		     String str4 = "\"";
			     str4 += n.get();
			     str4 += "\"";
			     PNF_String n2(str4);
			     $$.put(n2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| string_expression OPPLUS ID
			{
                         bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TSTRING:
			    {
			     if ($1.getType() != TSTRING)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     String d = $1.to_string().get();
			     String str = "";
			     for (unsigned is = 0; is < d.length(); ++is)
			     {
			      if (d[is] == '\"')
			       continue;
			      str += d[is];
			     }
			     String str2 = varTable[scope][i].value().to_string().get();
			     String str3 = "";
			     for (unsigned is = 0; is < str2.length(); ++is)
			     {
			      if (str2[is] == '\"')
			       continue;
			      str3 += str2[is];
			     }

			     PNF_String n(str3);
			     n.add(str);
	  		     String str4 = "\"";
			     str4 += n.get();
			     str4 += "\"";
			     PNF_String n2(str4);
			     $$.put(n2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPEQU ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     double d1 = $1.to_number().get();
			     double d2 = varTable[scope][i].value().to_number().get();
			     bool b = d1 == d2;
			     PNF_Boolean b2(b);
			     $$.put(b2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPNEQU ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     double d1 = $1.to_number().get();
			     double d2 = varTable[scope][i].value().to_number().get();
			     bool b = d1 != d2;
			     PNF_Boolean b2(b);
			     $$.put(b2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPLSS ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     double d1 = $1.to_number().get();
			     double d2 = varTable[scope][i].value().to_number().get();
			     bool b = d1 < d2;
			     PNF_Boolean b2(b);
			     $$.put(b2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPGTR ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     double d1 = $1.to_number().get();
			     double d2 = varTable[scope][i].value().to_number().get();
			     bool b = d1 > d2;
			     PNF_Boolean b2(b);
			     $$.put(b2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPLEQU ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     double d1 = $1.to_number().get();
			     double d2 = varTable[scope][i].value().to_number().get();
			     bool b = d1 <= d2;
			     PNF_Boolean b2(b);
			     $$.put(b2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPGEQU ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     double d1 = $1.to_number().get();
			     double d2 = varTable[scope][i].value().to_number().get();
			     bool b = d1 >= d2;
			     PNF_Boolean b2(b);
			     $$.put(b2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPEQU number_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     double d1 = $3.to_number().get();
			     double d2 = varTable[scope][i].value().to_number().get();
			     bool b = d1 == d2;
			     PNF_Boolean b2(b);
			     $$.put(b2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPNEQU number_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     double d1 = $3.to_number().get();
			     double d2 = varTable[scope][i].value().to_number().get();
			     bool b = d1 != d2;
			     PNF_Boolean b2(b);
			     $$.put(b2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPLSS number_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     double d1 = $3.to_number().get();
			     double d2 = varTable[scope][i].value().to_number().get();
			     bool b = d1 < d2;
			     PNF_Boolean b2(b);
			     $$.put(b2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPGTR number_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     double d1 = $3.to_number().get();
			     double d2 = varTable[scope][i].value().to_number().get();
			     bool b = d1 > d2;
			     PNF_Boolean b2(b);
			     $$.put(b2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPLEQU number_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     double d1 = $3.to_number().get();
			     double d2 = varTable[scope][i].value().to_number().get();
			     bool b = d1 <= d2;
			     PNF_Boolean b2(b);
			     $$.put(b2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPGEQU number_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     double d1 = $3.to_number().get();
			     double d2 = varTable[scope][i].value().to_number().get();
			     bool b = d1 >= d2;
			     PNF_Boolean b2(b);
			     $$.put(b2);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPAMP number_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     int d1 = (int)$3.to_number().get();
			     int d2 = (int)varTable[scope][i].value().to_number().get();
			     int d3 = d1 & d2;
			     PNF_Number n(d3);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPBTOR number_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     int d1 = (int)$3.to_number().get();
			     int d2 = (int)varTable[scope][i].value().to_number().get();
			     int d3 = d1 | d2;
			     PNF_Number n(d3);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPBTXOR number_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     int d1 = (int)$3.to_number().get();
			     int d2 = (int)varTable[scope][i].value().to_number().get();
			     int d3 = d1 ^ d2;
			     PNF_Number n(d3);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPAMP ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     int d1 = (int)$1.to_number().get();
			     int d2 = (int)varTable[scope][i].value().to_number().get();
			     int d3 = d1 & d2;
			     PNF_Number n(d3);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPBTOR ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     int d1 = (int)$1.to_number().get();
			     int d2 = (int)varTable[scope][i].value().to_number().get();
			     int d3 = d1 | d2;
			     PNF_Number n(d3);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPBTXOR ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     int d1 = (int)$1.to_number().get();
			     int d2 = (int)varTable[scope][i].value().to_number().get();
			     int d3 = d1 ^ d2;
			     PNF_Number n(d3);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| OPBTNOT ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $2.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     int d1 = (int)varTable[scope][i].value().to_number().get();
			     int d2 = ~d1;
			     PNF_Number n(d1);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $2.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPBTSL number_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     int d1 = (int)$3.to_number().get();
			     int d2 = (int)varTable[scope][i].value().to_number().get();
			     int d3 = d1 << d2;
			     PNF_Number n(d3);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| ID OPBTSR number_expression
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $1.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($3.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     int d1 = (int)$3.to_number().get();
			     int d2 = (int)varTable[scope][i].value().to_number().get();
			     int d3 = d1 >> d2;
			     PNF_Number n(d3);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPBTSL ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     int d1 = (int)$1.to_number().get();
			     int d2 = (int)varTable[scope][i].value().to_number().get();
			     int d3 = d1 << d2;
			     PNF_Number n(d3);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			| number_expression OPBTSR ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			 {
  			  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   	
			   switch (varTable[scope][i].value().getType())
			   {
  			    case TNUMBER:
			    {
			     if ($1.getType() != TNUMBER)
			     {
			      PNF_Number n(0);
			      $$.put(n);
			     }


			     int d1 = (int)$1.to_number().get();
			     int d2 = (int)varTable[scope][i].value().to_number().get();
			     int d3 = d1 >> d2;
			     PNF_Number n(d3);
			     $$.put(n);
			    }
			    break;

    		            default:
			     PNF_Number n(0);
			     $$.put(n);
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }
	 		 ASTNode mixed_expression("mixed_expression"); 
		         tree.add_node(mixed_expression);
			}
			;

declaration:		variable_declaration
			{
			 ASTNode declaration("declaration"); 
		         tree.add_node(declaration);
			}
			| label_declaration
			{
			 ASTNode declaration("declaration"); 
		         tree.add_node(declaration);
			}
			| enum_declaration
			{
			 ASTNode declaration("declaration");
			 tree.add_node(declaration);
			}
			| range_declaration
			{
			 ASTNode declaration("declaration");
			 tree.add_node(declaration);
			}
			;

variable_declaration:	VAR ID
			{
			 ASTNode variable_declaration("variable_declaration"); 

			 bool declared = false;
	     		 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
		  	 {
	 		  if (strcmp(varTable[scope][i].name().getString().c_str(), $2.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   PNF_Number n(0);
			   PNF_Variable p(n);
			   varTable[scope][i].value(p);
			   $$.put(varTable[scope][i].value().to_number());
			  }
			 }

			 if (!declared)
			 {
			  varTable[scope].insert();
			  varTable[scope][varTable[scope].length() - 1].name($2.to_string().get());
			  PNF_Number n(0);
			  PNF_Variable p(n);
			  varTable[scope][varTable[scope].length() - 1].value(p);

			  switch (p.getType())
		    	  {
			   case TVOID:
   			    variable_declaration.conprint("ALOAD TVOID 0V\n");
			    break;

			   case TBOOLEAN:
   			    variable_declaration.conprint("ALOAD TBOOLEAN %s\n", p.to_boolean().get().getString().c_str());
			    break;

			   case TNUMBER:
   			    variable_declaration.conprint("ALOAD TNUMBER %g\n", p.to_number().get());
			    break;

			   case TCHARACTER:
   			    variable_declaration.conprint("ALOAD TCHARACTER \'%s\'\n", p.to_string().get().getString().c_str());
			    break;

			   case TSTRING:
   			    variable_declaration.conprint("ALOAD TSTRING %s\n", p.to_string().get().getString().c_str());
			    break;
			  }
			  variable_declaration.conprint("VSTORE TVOID 0V\n");
			  ++varcount;
			  $$.put(varTable[scope][varTable[scope].length() - 1].value().to_number());

			  if (varTable[scope].length() - 2 <= 0)
		  	   varTable[scope][varTable[scope].length() - 1].address(scope + 0);
			  else
			   varTable[scope][varTable[scope].length() - 1].address(scope + (varTable[scope][varTable[scope].length() - 2].address() + 1));
			 }
		         tree.add_node(variable_declaration);
			}
			| VAR ID OPEQUAL expression
			{
			 ASTNode variable_declaration("variable_declaration"); 

			 bool declared = false;
	     		 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
		  	 {
	 		  if (strcmp(varTable[scope][i].name().getString().c_str(), $2.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   varTable[scope][i].value($4);
			
			   switch ($4.getType())
			   {
			    case TVOID:
			     $$.put(varTable[scope][i].value().to_void());
			     break;
			
			    case TBOOLEAN:
			     $$.put(varTable[scope][i].value().to_boolean());
			     break;

			    case TNUMBER:
			     $$.put(varTable[scope][i].value().to_number());
			     break;

			    case TCHARACTER:
			     $$.put(varTable[scope][i].value().to_character());
			     break;

			    case TSTRING:
			     $$.put(varTable[scope][i].value().to_string());
			     break;
			   }
			  }
			 }

			 if (!declared)
			 {
			  varTable[scope].insert();

			  varTable[scope][varTable[scope].length() - 1].name($2.to_string().get());
			  varTable[scope][varTable[scope].length() - 1].value($4);

			  $$ = $4;

			  switch ($$.getType())
		    	  {
			   case TVOID:
   			    variable_declaration.conprint("ALOAD TVOID 0V\n");
			    break;

			   case TBOOLEAN:
   			    variable_declaration.conprint("ALOAD TBOOLEAN %s\n", $$.to_boolean().get().getString().c_str());
			    break;

			   case TNUMBER:
   			    variable_declaration.conprint("ALOAD TNUMBER %g\n", $$.to_number().get());
			    break;

			   case TCHARACTER:
   			    variable_declaration.conprint("ALOAD TCHARACTER \'%c\'\n", $$.to_character().get());
			    break;

			   case TSTRING:
   			    variable_declaration.conprint("ALOAD TSTRING %s\n", $$.to_string().get().getString().c_str());
			    break;
			  }
			  variable_declaration.conprint("VSTORE TVOID 0V\n");
			  ++varcount;

			  unsigned long paddress = 0;
			  if (varTable[scope].length() - 2 <= 0)
		  	   paddress = scope + 0;
			  else
			   paddress = scope + (varTable[scope][varTable[scope].length() - 2].address() + 1);			  
			
			  varTable[scope][varTable[scope].length() - 1].address(paddress);
			 }
		         tree.add_node(variable_declaration);
			}
			| FVAR ID
			{
			 ASTNode variable_declaration("variable_declaration"); 

			 bool declared = false;
	     		 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
		  	 {
	 		  if (strcmp(varTable[scope][i].name().getString().c_str(), $2.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   PNF_Number n(0);
			   PNF_Variable p(n);
			   varTable[scope][i].value(p);
			   $$.put(varTable[scope][i].value().to_number());
			  }
			 }

			 if (!declared)
			 {
			  varTable[scope].insert();
			  varTable[scope][varTable[scope].length() - 1].name($2.to_string().get());
			  PNF_Number n(0);
			  PNF_Variable p(n);
			  varTable[scope][varTable[scope].length() - 1].value(p);

			  ++varcount;
			  $$.put(varTable[scope][varTable[scope].length() - 1].value().to_number());

			  if (varTable[scope].length() - 2 <= 0)
		  	   varTable[scope][varTable[scope].length() - 1].address(scope + 0);
			  else
			   varTable[scope][varTable[scope].length() - 1].address(scope + (varTable[scope][varTable[scope].length() - 2].address() + 1));
			 }
		         tree.add_node(variable_declaration);
			}
			| enumv_declaration
			{
			 ASTNode variable_declaration("variable_declaration");
			 tree.add_node(variable_declaration);
			}
			| rangev_declaration
			{
			 ASTNode variable_declaration("variable_declaration");
			 tree.add_node(variable_declaration);
			}
			| array_declaration
			{
			 ASTNode variable_declaration("variable_declaration");
			 tree.add_node(variable_declaration);
			}
			;

enumv_declaration:	ENUMV STRINGV STRINGV OPEQUAL STRINGV
			{
			 ASTNode enumv_declaration("enumv_declaration");

			 enumv_declaration.conprint("ENUMS TSTRING %s\n", $2.to_string().get().getString().c_str());
			 enumv_declaration.conprint("ENUM TSTRING %s\n", $5.to_string().get().getString().c_str());
			 enumv_declaration.conprint("SENUM TSTRING %s\n", $3.to_string().get().getString().c_str());

			 tree.add_node(enumv_declaration);
			}
			;

rangev_declaration:	RANGEV RTYPE2 STRINGV STRINGV OPEQUAL STRINGV
			{
			 ASTNode rangev_declaration("rangev_declaration");

			 if ($2.to_string().get() == "rtype1")
			 {
			  rangev_declaration.conprint("RSTART1 TSTRING %s\n", $3.to_string().get().getString().c_str());
			  rangev_declaration.conprint("RANGE1 TNUMBER %s\n", strip_quotes($6.to_string().get()).getString().c_str());
			  rangev_declaration.conprint("REND1 TSTRING %s\n", $4.to_string().get().getString().c_str());
			 }
			 else
			  yyerror("Invalid Range Type.");

			 tree.add_node(rangev_declaration);
			}
			| RANGEV RTYPE2 STRINGV STRINGV
			{
			 ASTNode rangev_declaration("rangev_declaration");

			 if ($2.to_string().get() == "rtype2")
			 {
			  rangev_declaration.conprint("RSTART2 TSTRING %s\n", $3.to_string().get().getString().c_str());
			  rangev_declaration.conprint("RANGE2 TSTRING %s\n", $4.to_string().get().getString().c_str());
			 }
			 else
			  yyerror("Invalid Range Type.");

			 tree.add_node(rangev_declaration);
			}
			;

array_declaration:	ARRAY STRINGV OPLSQ number_expression OPRSQ
			{
			 ASTNode array_declaration("array_declaration");

			 array_declaration.conprint("ASTART TSTRING %s\n", $2.to_string().get().getString().c_str());
			 array_declaration.conprint("AEND TNUMBER %g\n", $4.to_number().get());

			 tree.add_node(array_declaration);
			}
			;

enum_declaration:	ENUM ID OPEQUAL LEFTB 
			{
			 ASTNode enum_declarationp1("enum_declarationp1");

			 enum_declarationp1.conprint("ESTART TSTRING \"%s\"\n", $2.to_string().get().getString().c_str());

			 tree.add_node(enum_declarationp1);
			}
			enum_strings
			{
			 ASTNode enum_declarationp2("enum_declarationp2");
			 tree.add_node(enum_declarationp2);
			}
			RIGHTB
			{
			 ASTNode enum_declarationp3("enum_declarationp3");

			 enum_declarationp3.conprint("EEND TVOID 0V\n");

			 tree.add_node(enum_declarationp3);
			}
			;

enum_strings:		STRINGV
			{
			 ASTNode enum_strings("enum_strings");

			 enum_strings.conprint("ENAME TSTRING %s\n", $1.to_string().get().getString().c_str());

			 tree.add_node(enum_strings);
			}
			| enum_strings COMMA STRINGV
			;

range_declaration:	RANGE RTYPE2 STRINGV OPEQUAL STRINGV OPDOT OPDOT STRINGV
			{
			 ASTNode range_declaration("range_declaration");

			 if ($2.to_string().get() == "rtype1")
			 {
			  range_declaration.conprint("RDSTART1 TSTRING %s\n", $3.to_string().get().getString().c_str());
			  range_declaration.conprint("RFROM1 TNUMBER %s\n", strip_quotes($5.to_string().get()).getString().c_str());
			  range_declaration.conprint("RTO1 TNUMBER %s\n", strip_quotes($8.to_string().get()).getString().c_str());
			  range_declaration.conprint("RDEND1 TVOID 0V\n");
			 }
			 else if ($2.to_string().get() == "rtype2")
			 {
			  range_declaration.conprint("RDSTART2 TSTRING %s\n", $3.to_string().get().getString().c_str());
			  range_declaration.conprint("RFROM2 TNUMBER %s\n", strip_quotes($5.to_string().get()).getString().c_str());
			  range_declaration.conprint("RTO2 TNUMBER %s\n", strip_quotes($8.to_string().get()).getString().c_str());
			  range_declaration.conprint("RDEND2 TVOID 0V\n");
			 }
			 else
			  yyerror("Invalid Range Type.");

			 tree.add_node(range_declaration);
			}
			;

label_declaration:	SUB ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < labelTable.length(); ++i)
			 {
			  if ($2.to_string().get().getString() == labelTable[i].name().getString())
			  {
			   declared = true;
			   String str = labelTable[i].name();
			   str += " declared already.";
			   yyerror(str.getString().c_str());
			  }
			 }

			 if (!declared)
			 {
			  labelTable.insert();
			  labelTable[labelTable.length() - 1].name($2.to_string().get());
			  labelTable[labelTable.length() - 1].address(labelTable.length() - 2);
			 }

			 ASTNode label_declaration("label_declaration");
		         tree.add_node(label_declaration);
			}
			| EVENT ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < labelTable.length(); ++i)
			 {
			  if ($2.to_string().get().getString() == eventLabelTable[i].name().getString())
			  {
			   declared = true;
			   String str = eventLabelTable[i].name();
			   str += " declared already.";
			   yyerror(str.getString().c_str());
			  }
			 }

			 if (!declared)
			 {
			  eventLabelTable.insert();
			  eventLabelTable[eventLabelTable.length() - 1].name($2.to_string().get());
			  eventLabelTable[eventLabelTable.length() - 1].address(eventLabelTable.length() - 2);
			 }
			 ASTNode label_declaration("label_declaration");
		         tree.add_node(label_declaration);
			}
			| LABEL ID
			{
			 bool declared = false;
			 for (unsigned long i = 0; i < labelTable.length(); ++i)
			 {
			  if ($2.to_string().get().getString() == labelTable[i].name().getString())
			  {
			   declared = true;
			   String str = labelTable[i].name();
			   str += " declared already.";
			   yyerror(str.getString().c_str());
			  }
			 }

			 if (!declared)
			 {
			  labelTable.insert();
			  labelTable[labelTable.length() - 1].name($2.to_string().get());
			  labelTable[labelTable.length() - 1].address(labelTable.length() - 2);
			 }

			 ASTNode label_declaration("label_declaration");
		         tree.add_node(label_declaration);
			}
			;

command:		print_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| read_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| end_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| asm_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| load_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| goto_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| operator_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| st_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| stack_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| typeof_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| rm_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| crash_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| version_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| halt_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| modt_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| subroutine_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| register_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| store_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| break_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| address_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| add2v_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| continue_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| check_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| comment_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| file_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| meml_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| pnfasm_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| array_length_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			| dup_command
			{
			 ASTNode command("command");
		         tree.add_node(command);
			}
			;

print_command:		
			PRINT
			{
			 ASTNode print_command("print_command");
			 print_command.conprint("PRINT TVOID 0V\n");
			 tree.add_node(print_command);
			}
			| PRINT expression
			{
			 ASTNode print_command("print_command");
			 switch (exptype)
			 {
			  case TVOID:
			   yyerror("Cannot print void expression.");
			   break;

			  case TBOOLEAN:
			   print_command.conprint("PRINT TBOOLEAN %s\n", $2.to_string().get().getString().c_str());
			   break;

			  case TNUMBER:
			   print_command.conprint("PRINT TNUMBER %g\n", $2.to_number().get());
			   break;

			  case TCHARACTER:
			  {
			   String str = $2.to_string().get();
			   
			   String str2;
			   for (unsigned long i = 0, j = 0; i < str.length(); ++i)
			   {
			    if (str[i] == '\'')
			     continue;
			    else
			    {
			     str2[j] = str[i];
			     ++j;
			    }
			   }

			   print_command.conprint("PRINT TCHARACTER \'%s\'\n", str2.getString().c_str());
			  }
			  break;

			  case TSTRING:
			   print_command.conprint("PRINT TSTRING %s\n", $2.to_string().get().getString().c_str());
			   break;

			  default:
			   yyerror("Invalid exptype.");
			 }
			 tree.add_node(print_command);
			}
			| PRINT CTYPE
			{
			 ASTNode print_command("print_command");

			 if ($2.to_string().get() == "ver")
			  print_command.conprint("VPRINT TVOID 0V\n");
			 else
 			  yyerror("Invalid check type.");

			 tree.add_node(print_command);
			}
			| PRINTLN
			{
			 ASTNode print_command("print_command");
			 print_command.conprint("PRINTLN TVOID 0V\n");
			 tree.add_node(print_command);
			}
			| PRINTLN expression
			{
			 ASTNode print_command("print_command");
			 switch (exptype)
			 {
			  case TVOID:
			   yyerror("Cannot println void expression.");
			   break;

			  case TBOOLEAN:
			   print_command.conprint("PRINTLN TBOOLEAN %s\n", $2.to_string().get().getString().c_str());
			   break;

			  case TNUMBER:
			   print_command.conprint("PRINTLN TNUMBER %g\n", $2.to_number().get());
			   break;

			  case TCHARACTER:
			  {
			   String str = $2.to_string().get();
			   
			   String str2;
			   for (unsigned long i = 0, j = 0; i < str.length(); ++i)
			   {
			    if (str[i] == '\'')
			     continue;
			    else
			    {
			     str2[j] = str[i];
			     ++j;
			    }
			   }

			   print_command.conprint("PRINTLN TCHARACTER \'%s\'\n", str2.getString().c_str());
			  }
			  break;

			  case TSTRING:
                           print_command.conprint("PRINTLN TSTRING %s\n", $2.to_string().get().getString().c_str());
			   break;

			  default:
			   yyerror("Invalid exptype.");
			 }
			 tree.add_node(print_command);
			}
			| PRINTLN CTYPE
			{
			 ASTNode print_command("print_command");

			 if ($2.to_string().get() == "ver")
			  print_command.conprint("VPRINTLN TVOID 0V\n");
			 else
 			  yyerror("Invalid check type.");

			 tree.add_node(print_command);
			}
			| EPRINT
			{
			 ASTNode print_command("print_command");
			 print_command.conprint("EPRINT TVOID 0V\n");
			 tree.add_node(print_command);
			}
			| EPRINT expression
			{
			 ASTNode print_command("print_command");
			 switch (exptype)
			 {
			  case TVOID:
			   yyerror("Cannot print void expression.");
			   break;

			  case TBOOLEAN:
			   print_command.conprint("EPRINT TBOOLEAN %s\n", $2.to_string().get().getString().c_str());
			   break;

			  case TNUMBER:
			   print_command.conprint("EPRINT TNUMBER %g\n", $2.to_number().get());
			   break;

			  case TCHARACTER:
			  {
			   String str = $2.to_string().get();
			   
			   String str2;
			   for (unsigned long i = 0, j = 0; i < str.length(); ++i)
			   {
			    if (str[i] == '\'')
			     continue;
			    else
			    {
			     str2[j] = str[i];
			     ++j;
			    }
			   }

			   print_command.conprint("EPRINT TCHARACTER \'%s\'\n", str2.getString().c_str());
			  }
			  break;

			  case TSTRING:
			   print_command.conprint("EPRINT TSTRING %s\n", $2.to_string().get().getString().c_str());
			   break;

			  default:
			   yyerror("Invalid exptype.");
			 }
			 tree.add_node(print_command);
			}
			| EPRINTLN
			{
			 ASTNode print_command("print_command");
			 print_command.conprint("EPRINTLN TVOID 0V\n");
			 tree.add_node(print_command);
			}
			| EPRINTLN expression
			{
			 ASTNode print_command("print_command");
			 switch (exptype)
			 {
			  case TVOID:
			   yyerror("Cannot println void expression.");
			   break;

			  case TBOOLEAN:
			   print_command.conprint("EPRINTLN TBOOLEAN %s\n", $2.to_string().get().getString().c_str());
			   break;

			  case TNUMBER:
			   print_command.conprint("EPRINTLN TNUMBER %g\n", $2.to_number().get());
			   break;

			  case TCHARACTER:
			  {
			   String str = $2.to_string().get();
			   
			   String str2;
			   for (unsigned long i = 0, j = 0; i < str.length(); ++i)
			   {
			    if (str[i] == '\'')
			     continue;
			    else
			    {
			     str2[j] = str[i];
			     ++j;
			    }
			   }

			   print_command.conprint("EPRINTLN TCHARACTER \'%s\'\n", str2.getString().c_str());
			  }
			  break;

			  case TSTRING:
			   print_command.conprint("EPRINTLN TSTRING %s\n", $2.to_string().get().getString().c_str());
			   break;

			  default:
			   yyerror("Invalid exptype.");
			 }
			 tree.add_node(print_command);
			}
			| FPRINT
			{
			 ASTNode print_command("print_command");
			 print_command.conprint("FPRINT TVOID 0V\n");
			}
			| FPRINT expression
			{
			 ASTNode print_command("print_command");
			 switch (exptype)
			 {
			  case TVOID:
			   yyerror("Cannot print void expression.");
			   break;

			  case TBOOLEAN:
			   print_command.conprint("FPRINT TBOOLEAN %s\n", $2.to_string().get().getString().c_str());
			   break;

			  case TNUMBER:
			   print_command.conprint("FPRINT TNUMBER %g\n", $2.to_number().get());
			   break;

			  case TCHARACTER:
			  {
			   String str = $2.to_string().get();
			   
			   String str2;
			   for (unsigned long i = 0, j = 0; i < str.length(); ++i)
			   {
			    if (str[i] == '\'')
			     continue;
			    else
			    {
			     str2[j] = str[i];
			     ++j;
			    }
			   }

			   print_command.conprint("FPRINT TCHARACTER \'%s\'\n", str2.getString().c_str());
			  }
			  break;

			  case TSTRING:
			   print_command.conprint("FPRINT TSTRING %s\n", $2.to_string().get().getString().c_str());
			   break;

			  default:
			   yyerror("Invalid exptype.");
			 }
			 tree.add_node(print_command);
			}
			| FPRINTLN
			{
			 ASTNode print_command("print_command");
			 print_command.conprint("FPRINTLN TVOID 0V\n");
			 tree.add_node(print_command);
			}
			| FPRINTLN expression
			{
			 ASTNode print_command("print_command");
			 switch (exptype)
			 {
			  case TVOID:
			   yyerror("Cannot println void expression.");
			   break;

			  case TBOOLEAN:
			   print_command.conprint("FPRINTLN TBOOLEAN %s\n", $2.to_string().get().getString().c_str());
			   break;

			  case TNUMBER:
			   print_command.conprint("FPRINTLN TNUMBER %g\n", $2.to_number().get());
			   break;

			  case TCHARACTER:
			  {
			   String str = $2.to_string().get();
			   
			   String str2;
			   for (unsigned long i = 0, j = 0; i < str.length(); ++i)
			   {
			    if (str[i] == '\'')
			     continue;
			    else
			    {
			     str2[j] = str[i];
			     ++j;
			    }
			   }

			   print_command.conprint("FPRINTLN TCHARACTER \'%s\'\n", str2.getString().c_str());
			  }
			  break;

			  case TSTRING:
                           print_command.conprint("FPRINTLN TSTRING %s\n", $2.to_string().get().getString().c_str());
			   break;

			  default:
			   yyerror("Invalid exptype.");
			 }
			 tree.add_node(print_command);
			}
			| PRINT ARRAY STRINGV
			{
			 ASTNode print_command("print_command");
			
			 print_command.conprint("APREP TSTRING %s\n", $3.to_string().get().getString().c_str());
			 print_command.conprint("APRINT TVOID 0V\n");

			 tree.add_node(print_command);
			}
			;

read_command:
			READ TYPE ID
			{
			 ASTNode read_command("read_command");

			 bool declared = false;
			 unsigned long address = 0;
	     		 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
		  	 {
	 		  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
    		           address = varTable[scope][i].address();
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " is not declared.";
			  yyerror(str.getString().c_str());
			 }


			 PNF_Variable v;
			 if ($2.to_string().get().getString() == "void")
			 {
			  yyerror("Cannot read a void.");
			 }
			 else if ($2.to_string().get().getString() == "boolean")
			 {
			  read_command.conprint("READ TBOOLEAN 0V\n");
			  ++varcount;
			 }
			 else if ($2.to_string().get().getString() == "number")
			 {
			  read_command.conprint("READ TNUMBER 0V\n");
			  ++varcount;
			 }
			 else if ($2.to_string().get().getString() == "character")
			 {
			  read_command.conprint("READ TCHARACTER 0V\n");
			  ++varcount;
			 }
			 else if ($2.to_string().get().getString() == "string")
			 {
			  read_command.conprint("READ TSTRING 0V\n");
			  ++varcount;
			 }
			 else
			  yyerror("Invalid type specifier.");


			 read_command.conprint("ATOC TVOID 0V\n");
			 read_command.conprint("VADD TVOID %u\n", address);
			 read_command.conprint("SWITCH TVOID 0V\n");
			 read_command.conprint("STOREA TVOID 0V\n");

			 tree.add_node(read_command);
			}
			| FREAD TYPE ID
			{
			 ASTNode read_command("read_command");

			 bool declared = false;
			 unsigned long address = 0;
	     		 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
		  	 {
	 		  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
    		           address = varTable[scope][i].address();
			  }
			 }

			 if (!declared)
			 {
			  String str = $3.to_string().get();
			  str += " is not declared.";
			  yyerror(str.getString().c_str());
			 }


			 PNF_Variable v;
			 if ($2.to_string().get().getString() == "void")
			 {
			  yyerror("Cannot read a void.");
			 }
			 else if ($2.to_string().get().getString() == "boolean")
			 {
			  read_command.conprint("FREAD TBOOLEAN 0V\n");
			  ++varcount;
			 }
			 else if ($2.to_string().get().getString() == "number")
			 {
			  read_command.conprint("FREAD TNUMBER 0V\n");
			  ++varcount;
			 }
			 else if ($2.to_string().get().getString() == "character")
			 {
			  read_command.conprint("FREAD TCHARACTER 0V\n");
			  ++varcount;
			 }
			 else if ($2.to_string().get().getString() == "string")
			 {
			  read_command.conprint("FREAD TSTRING 0V\n");
			  ++varcount;
			 }
			 else
			  yyerror("Invalid type specifier.");


			 read_command.conprint("ATOC TVOID 0V\n");
			 read_command.conprint("VADD TVOID %u\n", address);
			 read_command.conprint("SWITCH TVOID 0V\n");
			 read_command.conprint("STOREA TVOID 0V\n");


			 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
		  	 {
	 		  if (strcmp(varTable[scope][i].name().getString().c_str(), $3.to_string().get().getString().c_str()) == 0)
			  {
			   PNF_Number n(0);
			   v.put(n);
			   varTable[scope][i].value(v);
			   varTable[scope][i].address(varcount - 1);
			  }
			 }
			 tree.add_node(read_command);
			}
			;

end_command:
			END number_expression
			{
			 ASTNode end_command("end_command");
			 end_command.conprint("QUIT TVOID %g\n", $2.to_number().get());
			 tree.add_node(end_command);
			}
			;

asm_command:		ASM STRINGV STRINGV string_expression
			{
			 ASTNode asm_command("asm_command");
			 asm_command.conprint("%s %s %s\n", strip_quotes($2.to_string().get()).getString().c_str(), 
					      strip_quotes($3.to_string().get()).getString().c_str(), strip_quotes($4.to_string().get()).getString().c_str());
			 tree.add_node(asm_command);
			}
			;

load_command:		LOAD RTYPE LTYPE number_expression
			{
			 ASTNode load_command("load_command");
			 if ($3.to_string().get().getString() == "memory")
			 {
			  if ($2.to_string().get().getString() == "%accumulator")
			  {
			   switch ($4.getType())
			   {
			    case TBOOLEAN:
    			     load_command.conprint("LOAD TBOOLEAN %g\n", $4.to_number().get());
			     break;

			    case TNUMBER:
    	 		     load_command.conprint("LOAD TNUMBER %g\n", $4.to_number().get());
			     break;

			    case TCHARACTER:
    			     load_command.conprint("LOAD TCHARACTER %g\n", $4.to_number().get());
			     break;

			    case TSTRING:
    			     load_command.conprint("LOAD TSTRING %g\n", $4.to_number().get());
			     break;

			    default:
			     yyerror("Invalid load expression.");
			     break;
			   }
			  }
			  else if ($2.to_string().get().getString() == "%calc")
			  {
			   switch ($4.getType())
			   {
			    case TBOOLEAN:
    			     load_command.conprint("LOADC TBOOLEAN %g\n", $4.to_number().get());
			     break;

			    case TNUMBER:
    	 		     load_command.conprint("LOADC TNUMBER %g\n", $4.to_number().get());
			     break;

			    case TCHARACTER:
    			     load_command.conprint("LOADC TCHARACTER %g\n", $4.to_number().get());
			     break;

			    case TSTRING:
    			     load_command.conprint("LOADC TSTRING %g\n", $4.to_number().get());
			     break;

			    default:
			     yyerror("Invalid load expression.");
			     break;
			   }
			  }
			  else
			   yyerror("Invalid register type.");
			 }
			 else if ($3.to_string().get().getString() == "variable")
			 {
			  if ($2.to_string().get().getString() == "%accumulator")
			  {
			   switch ($4.getType())
			   {
			    case TBOOLEAN:
    			     load_command.conprint("VLOAD TBOOLEAN %g\n", $4.to_number().get());
			     break;

			    case TNUMBER:
    			     load_command.conprint("VLOAD TNUMBER %g\n", $4.to_number().get());
			     break;

			    case TCHARACTER:
    			     load_command.conprint("VLOAD TCHARACTER %g\n", $4.to_number().get());
			     break;

			    case TSTRING:
    			     load_command.conprint("VLOAD TSTRING %g\n", $4.to_number().get());
			     break;

			    default:
			     yyerror("Invalid load expression.");
			     break;
			   }
			  }
			  else if ($2.to_string().get().getString() == "%calc")
			  {
			   switch ($4.getType())
			   {
			    case TBOOLEAN:
    			     load_command.conprint("VLOADC TBOOLEAN %g\n", $4.to_number().get());
			     break;

			    case TNUMBER:
    			     load_command.conprint("VLOADC TNUMBER %g\n", $4.to_number().get());
			     break;

			    case TCHARACTER:
    			     load_command.conprint("VLOADC TCHARACTER %g\n", $4.to_number().get());
			     break;

			    case TSTRING:
    			     load_command.conprint("VLOADC TSTRING %g\n", $4.to_number().get());
			     break;

			    default:
			     yyerror("Invalid load expression.");
			     break;
			   }
			  }
			 }
			 else if ($3.to_string().get().getString() == "args")
			 {
			  if ($2.to_string().get().getString() == "%accumulator")
			   load_command.conprint("ARLOAD TVOID %g\n", $4.to_number().get());
			  else
			   yyerror("Invalid register type.");
			 }
			 else if ($3.to_string().get().getString() == "aload")
			 {
			  if ($2.to_string().get().getString() == "%accumulator")
 			   load_command.conprint("ALOAD TNUMBER %g\n", $4.to_number().get());
			  else
                           yyerror("Invalid register type.");
			 }
			 else
			  yyerror("Invalid load type.");

			 tree.add_node(load_command);
			}
			| LOAD RTYPE LTYPE TYPE
			{
			 ASTNode load_command("load_command");
			 if ($3.to_string().get().getString() == "tend")
			 {
			  if ($2.to_string().get().getString() == "%accumulator")
			  {
 			   PNF_Type_Enum t;
			   String str = $4.to_string().get();
			   if (str.getString() == "void")
			    t = TVOID;
			   else if (str.getString() == "boolean")
			    t = TBOOLEAN;
			   else if (str.getString() == "number")
			    t = TNUMBER;
 	 		   else if (str.getString() == "character")
			    t = TCHARACTER;
			   else if (str.getString() == "string")
			    t = TSTRING;
			   else
			    yyerror("Invalid type specified.");

			   switch (t)
			   {
			    case TBOOLEAN:
    			     load_command.conprint("ELOAD TBOOLEAN 0V\n");
	 		     break;

			    case TNUMBER:
    			     load_command.conprint("ELOAD TNUMBER 0V\n");
			     break;

			    case TCHARACTER:
    			     load_command.conprint("ELOAD TCHARACTER 0V\n");
			     break;

			    case TSTRING:
    			     load_command.conprint("ELOAD TSTRING 0V\n");
			     break;

			    default:
			     yyerror("Invalid load expression.");
			     break;
			   }
		          }
			  else if ($2.to_string().get().getString() == "%calc")
			  {
 			   PNF_Type_Enum t;
			   String str = $4.to_string().get();
			   if (str.getString() == "void")
			    t = TVOID;
			   else if (str.getString() == "boolean")
			    t = TBOOLEAN;
			   else if (str.getString() == "number")
			    t = TNUMBER;
 	 		   else if (str.getString() == "character")
			    t = TCHARACTER;
			   else if (str.getString() == "string")
			    t = TSTRING;
			   else
			    yyerror("Invalid type specified.");

			   switch (t)
			   {
			    case TBOOLEAN:
    			     load_command.conprint("ELOADC TBOOLEAN 0V\n");
	 		     break;

			    case TNUMBER:
    			     load_command.conprint("ELOADC TNUMBER 0V\n");
			     break;

			    case TCHARACTER:
    			     load_command.conprint("ELOADC TCHARACTER 0V\n");
			     break;

			    case TSTRING:
    			     load_command.conprint("ELOADC TSTRING 0V\n");
			     break;

			    default:
			     yyerror("Invalid load expression.");
			     break;
			   }
			  }
			  else
			   yyerror("Invalid load type.");
			 }
			 else
			  yyerror("Invalid register type.");

			 tree.add_node(load_command);
			}
			| LOAD LTYPE
			{
			 ASTNode load_command("load_command");
			 if ($2.to_string().get().getString() == "typeof")
			 {
			   load_command.conprint("TLOAD TVOID 0V\n");
			 }
			 else if ($2.to_string().get().getString() == "iname")
			 {
			  load_command.conprint("INLOAD TVOID 0V\n");
			 }
			 else if ($2.to_string().get().getString() == "icount")
			 {
			  load_command.conprint("ICLOAD TVOID 0V\n");
			 }
			 else if ($2.to_string().get().getString() == "aload")
			 {
			  load_command.conprint("ALOAD TVOID 0V\n");
			 }
			 else if ($2.to_string().get().getString() == "argn")
			 {
			  load_command.conprint("ARNLOAD TVOID 0V\n");
			 }
			 else
			  yyerror("Invalid load type.");

			 tree.add_node(load_command);
			}
			| LOAD LTYPE boolean_expression
			{
			 ASTNode load_command("load_command");
			 if ($2.to_string().get().getString() == "aload")
			 {
			  load_command.conprint("ALOAD TBOOLEAN %s\n", $3.to_string().get().getString().c_str());
			 }
			 else
			  yyerror("Invalid load type.");

			 tree.add_node(load_command);
			}
			| LOAD LTYPE number_expression
			{
			 ASTNode load_command("load_command");
			 if ($2.to_string().get().getString() == "aload")
			 {
			  load_command.conprint("ALOAD TNUMBER %g\n", $3.to_number().get());
			 }
			 else
			  yyerror("Invalid load type.");

			 tree.add_node(load_command);
			}
			| LOAD LTYPE character_expression
			{
			 ASTNode load_command("load_command");
			 if ($2.to_string().get().getString() == "aload")
			 {
			  load_command.conprint("ALOAD TCHARACTER %c\n", $3.to_character().get());
			 }
			 else
			  yyerror("Invalid load type.");

			 tree.add_node(load_command);
			}
			| LOAD LTYPE string_expression
			{
			 ASTNode load_command("load_command");
			 if ($2.to_string().get().getString() == "aload")
			 {
			  load_command.conprint("ALOAD TSTRING %s\n", $3.to_string().get().getString().c_str());
			 }
			 else
			  yyerror("Invalid load type.");

			 tree.add_node(load_command);
			}
			| LOAD RTYPE LTYPE ID
			{
			 ASTNode load_command("load_command");

			 PNF_Variable p;
			 unsigned long paddress = 0;
                         bool declared = false;
	     		 for (unsigned long i = 0; i < varTable[scope].length(); ++i)
		  	 {
	 		  if (strcmp(varTable[scope][i].name().getString().c_str(), $4.to_string().get().getString().c_str()) == 0)
			  {
			   declared = true;
			   p.put(varTable[scope][i].value());
			   paddress = varTable[scope][i].address();			   
			   break;
			  }
			 }

			 if (!declared)
			 {
			  String str = $4.to_string().get();
			  str += " was not declared.";
			  yyerror(str.getString().c_str());
			 }

			 if ($3.to_string().get().getString() == "memory")
			 {
			  if ($2.to_string().get().getString() == "%accumulator")
			  {
			   switch (p.getType())
			   {
			    case TBOOLEAN:
    			     load_command.conprint("LOAD TBOOLEAN %g\n", p.to_number().get());
			     break;

			    case TNUMBER:
    	 		     load_command.conprint("LOAD TNUMBER %g\n", p.to_number().get());
			     break;

			    case TCHARACTER:
    			     load_command.conprint("LOAD TCHARACTER %g\n", p.to_number().get());
			     break;

			    case TSTRING:
    			     load_command.conprint("LOAD TSTRING %g\n", p.to_number().get());
			     break;

			    default:
			     yyerror("Invalid load expression.");
			     break;
			   }
			  }
			  else if ($2.to_string().get().getString() == "%calc")
			  {
			   switch (p.getType())
			   {
			    case TBOOLEAN:
    			     load_command.conprint("LOADC TBOOLEAN %g\n", p.to_number().get());
			     break;

			    case TNUMBER:
    	 		     load_command.conprint("LOADC TNUMBER %g\n", p.to_number().get());
			     break;

			    case TCHARACTER:
    			     load_command.conprint("LOADC TCHARACTER %g\n", p.to_number().get());
			     break;

			    case TSTRING:
    			     load_command.conprint("LOADC TSTRING %g\n", p.to_number().get());
			     break;

			    default:
			     yyerror("Invalid load expression.");
			     break;
			   }
			  }
			  else
			   yyerror("Invalid register type.");
			 }
			 else if ($3.to_string().get().getString() == "variable")
			 {
			  if ($2.to_string().get().getString() == "%accumulator")
			  {
			   switch (p.getType())
			   {
			    case TBOOLEAN:
    			     load_command.conprint("VLOAD TBOOLEAN %u\n", paddress);
			     break;

			    case TNUMBER:			     
    			     load_command.conprint("VLOAD TNUMBER %u\n", paddress);
			     break;

			    case TCHARACTER:
    			     load_command.conprint("VLOAD TCHARACTER %u\n", paddress);
			     break;

			    case TSTRING:
    			     load_command.conprint("VLOAD TSTRING %u\n", paddress);
			     break;

			    default:
			     yyerror("Invalid load expression.");
			     break;
			   }
			  }
			  else if ($2.to_string().get().getString() == "%calc")
			  {
			   switch (p.getType())
			   {
			    case TBOOLEAN:
    			     load_command.conprint("VLOADC TBOOLEAN %u\n", paddress);
			     break;

			    case TNUMBER:
    			     load_command.conprint("VLOADC TNUMBER %u\n", paddress);
			     break;

			    case TCHARACTER:
    			     load_command.conprint("VLOADC TCHARACTER %u\n", paddress);
			     break;

			    case TSTRING:
    			     load_command.conprint("VLOADC TSTRING %u\n", paddress);
			     break;

			    default:
			     yyerror("Invalid load expression.");
			     break;
			   }
			  }
			 }
			 else if ($3.to_string().get().getString() == "args")
			 {
			  if ($2.to_string().get().getString() == "%accumulator")
			   load_command.conprint("ARLOAD TVOID %g\n", p.to_number().get());
			  else
			   yyerror("Invalid register type.");
			 }
			 else if ($3.to_string().get().getString() == "aload")
			 {
			  if ($2.to_string().get().getString() == "%accumulator")
			  {
			   switch (p.getType())
			   {
			    case TBOOLEAN:
			     load_command.conprint("ALOAD TBOOLEAN %s\n", p.to_string().get().getString().c_str());
			     break;

			    case TNUMBER:
			     load_command.conprint("ALOAD TNUMBER %g\n", p.to_number().get());
			     break;

			    case TCHARACTER:
			     load_command.conprint("ALOAD TCHARACTER %c\n", p.to_character().get());
			     break;

			    case TSTRING:
			     load_command.conprint("ALOAD TSTRING %s\n", p.to_string().get().getString().c_str());
			     break;

			    default:
			     yyerror("Invalid ID type.");
			     break;
			   }
			  }
			  else
                           yyerror("Invalid register type.");
			 }
			 else
			  yyerror("Invalid load type.");

			 tree.add_node(load_command);
			}
			| LOAD STYPE number_expression
			{
			 ASTNode load_command("load_command");

			 if ($2.to_string().get().getString() == "heve")
			  load_command.conprint("HEGET TVOID %g", $3.to_number().get());
			 else if ($2.to_string().get().getString() == "sheve")
			  load_command.conprint("SHEGET TVOID %g", $3.to_number().get());
			 else if ($2.to_string().get().getString() == "eve")
			  load_command.conprint("EGET TVOID %g", $3.to_number().get());
			 else if ($2.to_string().get().getString() == "exe")
			  load_command.conprint("EXGET TVOID %g", $3.to_number().get());
			 else if ($2.to_string().get().getString() == "int")
			  load_command.conprint("IGET TVOID %g", $3.to_number().get());
		  	 else
			  yyerror("Invalid subroutine type.");

			 tree.add_node(load_command);
			}
			| LOAD VTYPE2 STRINGV
			{
			 ASTNode load_command("load_command");

			 if ($2.to_string().get() == "venum")
			 {
			  load_command.conprint("EPREP TSTRING %s\n", $3.to_string().get().getString().c_str());
			  load_command.conprint("LOADE TVOID 0V\n");
			 }
			 else
			  yyerror("Invalid VTYPE2.");

			 tree.add_node(load_command);
			}
			| LOAD RANGE RTYPE2 STRINGV
			{
			 ASTNode load_command("load_command");

			 if ($3.to_string().get() == "rtype1")
			 {
			  load_command.conprint("RLOAD1 TSTRING %s\n", $4.to_string().get().getString().c_str());
			 }
			 else
			  yyerror("Invalid Range Type.");

			 tree.add_node(load_command);
			}
			| LOAD RANGE RTYPE2 STRINGV OPLSQ number_expression OPRSQ
			{
			 ASTNode load_command("load_command");

			 if ($3.to_string().get() == "rtype2")
			 {
			  load_command.conprint("RPREP2 TSTRING %s\n", $4.to_string().get().getString().c_str());
			  load_command.conprint("RLOAD2 TNUMBER %g\n", $6.to_number().get());
			 }
			 else
			  yyerror("Invalid Range Type.");

			 tree.add_node(load_command);
			}
			| LOAD ARRAY STRINGV OPLSQ number_expression OPRSQ
			{
			 ASTNode load_command("load_command");

			 load_command.conprint("APREP TSTRING %s\n", $3.to_string().get().getString().c_str());
			 load_command.conprint("AIPREP TNUMBER %g\n", $5.to_number().get());
			 load_command.conprint("LOADIA TVOID 0V\n");

			 tree.add_node(load_command);
			}
			| LOAD ARRAY STRINGV OPLSQ OPRSQ
			{
			 ASTNode load_command("load_command");

			 load_command.conprint("APREP TSTRING %s\n", $3.to_string().get().getString().c_str());
			 load_command.conprint("AIPREP TVOID 0V\n");
			 load_command.conprint("LOADIA TVOID 0V\n");

			 tree.add_node(load_command);
			}
			;

goto_command:		GOTO GTYPE number_expression
			{
			 ASTNode goto_command("goto_command");
			 if ($2.to_string().get().getString() == "normal")
			 {
			  goto_command.conprint("GOTO TVOID %g\n", $3.to_number().get());
			 }
			 else if ($2.to_string().get().getString() == "condition")
			  goto_command.conprint("CGOTO TVOID %g\n", $3.to_number().get());
			 else if ($2.to_string().get().getString() == "zero")
			  goto_command.conprint("ZGOTO TVOID %g\n", $3.to_number().get());
			 else if ($2.to_string().get().getString() == "positive")
			  goto_command.conprint("PGOTO TVOID %g\n", $3.to_number().get());
			 else if ($2.to_string().get().getString() == "negative")
			  goto_command.conprint("NGOTO TVOID %g\n", $3.to_number().get());
			 else
			  yyerror("Invalid goto type.");

			 tree.add_node(goto_command);
			}
			| GOTO GTYPE ID
			{
			 ASTNode goto_command("goto_command");
			 if ($2.to_string().get().getString() == "normal")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < labelTable.length(); ++i)
			  {
			   if (labelTable[i].name().getString() == $3.to_string().get().getString())
			   {
			    declared = true;
			    goto_command.conprint("GOTOL TVOID %u\n", labelTable[i].address());
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else if ($2.to_string().get().getString() == "condition")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < labelTable.length(); ++i)
			  {
			   if (labelTable[i].name().getString() == $3.to_string().get().getString())
			   {
			    declared = true;
			    goto_command.conprint("CGOTOL TVOID %u\n", labelTable[i].address());
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else if ($2.to_string().get().getString() == "zero")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < labelTable.length(); ++i)
			  {
			   if (labelTable[i].name().getString() == $3.to_string().get().getString())
			   {
			    declared = true;
			    goto_command.conprint("ZGOTOL TVOID %u\n", labelTable[i].address());
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else if ($2.to_string().get().getString() == "positive")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < labelTable.length(); ++i)
			  {
			   if (labelTable[i].name().getString() == $3.to_string().get().getString())
			   {
			    declared = true;
			    goto_command.conprint("PGOTOL TVOID %u\n", labelTable[i].address());
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else if ($2.to_string().get().getString() == "negative")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < labelTable.length(); ++i)
			  {
			   if (labelTable[i].name().getString() == $3.to_string().get().getString())
			   {
			    declared = true;
			    goto_command.conprint("NGOTOL TVOID %u\n", labelTable[i].address());
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else
			  yyerror("Invalid goto type.");

			 tree.add_node(goto_command);
			}
			;

operator_command:	OPPLUS
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("ADD TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPPLUS number_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("ADD TNUMBER %g\n", $2.to_number().get());
			 tree.add_node(operator_command);
			}
			| OPPLUS character_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("ADD TCHARACTER %c\n", $2.to_character().get());
			 tree.add_node(operator_command);
			}
			| OPPLUS string_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("ADD TSTRING %s\n", $2.to_string().get().getString().c_str());
			 tree.add_node(operator_command);
			}
			| OPMINUS
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("SUB TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPSUB number_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("SUB TNUMBER %g\n", $2.to_number().get());
			 tree.add_node(operator_command);
			}
			| OPTIMES
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("MUL TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPTIMES number_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("MUL TNUMBER %g\n", $2.to_number().get());
			 tree.add_node(operator_command);
			}
			| OPDIV
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("DIV TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPDIV number_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("DIV TNUMBER %g\n", $2.to_number().get());
			 tree.add_node(operator_command);
			}
			| OPMODULUS
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("MOD TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPMODULUS number_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("MOD TNUMBER %g\n", $2.to_number().get());
			 tree.add_node(operator_command);
			}
			| OPPOWER
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("POW TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPPOWER number_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("POW TNUMBER %g\n", $2.to_number().get());
			 tree.add_node(operator_command);
			}
			| OPROOT
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("ROOT TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPROOT number_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("ROOT TNUMBER %g\n", $2.to_number().get());
			 tree.add_node(operator_command);
			}
			| OPINC
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("INC TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPDEC
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("DEC TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPAND
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("AND TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPOR
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("OR TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPNOT
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("NOT TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPEQU
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("EQU TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPNEQU
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("NEQU TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPLSS
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("LSS TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPGTR
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("GTR TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPLEQU
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("LEQU TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPGEQU
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("GEQU TVOID 0V\n");
			 tree.add_node(operator_command);
			}
			| OPEQU boolean_expression
			{
			 ASTNode operator_command("operator_command");

			 String str = $2.to_boolean().get();

			 operator_command.conprint("EQU TBOOLEAN %s", str.getString().c_str());

			 tree.add_node(operator_command);
			}
			| OPNEQU boolean_expression
			{
			 ASTNode operator_command("operator_command");

			 String str = $2.to_boolean().get();

			 operator_command.conprint("NEQU TBOOLEAN %s", str.getString().c_str());

			 tree.add_node(operator_command);
			}
			| OPEQU number_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("EQU TNUMBER %g", $2.to_number().get());
			 tree.add_node(operator_command);
			}
			| OPNEQU number_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("NEQU TNUMBER %g", $2.to_number().get());
			 tree.add_node(operator_command);
			}
			| OPLSS number_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("LSS TNUMBER %g", $2.to_number().get());
			 tree.add_node(operator_command);
			}
			| OPGTR number_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("GTR TNUMBER %g", $2.to_number().get());
			 tree.add_node(operator_command);
			}
			| OPLEQU number_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("LEQU TNUMBER %g", $2.to_number().get());
			 tree.add_node(operator_command);
			}
			| OPGEQU number_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("GEQU TNUMBER %g", $2.to_number().get());
			 tree.add_node(operator_command);
			}
			| OPEQU character_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("EQU TCHARACTER %c", $2.to_character().get());
			 tree.add_node(operator_command);
			}
			| OPNEQU character_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("NEQU TCHARACTER %c", $2.to_character().get());
			 tree.add_node(operator_command);
			}
			| OPLSS character_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("LSS TCHARACTER %c", $2.to_character().get());
			 tree.add_node(operator_command);
			}
			| OPGTR character_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("GTR TCHARACTER %c", $2.to_character().get());
			 tree.add_node(operator_command);
			}
			| OPLEQU character_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("LEQU TCHARACTER %c", $2.to_character().get());
			 tree.add_node(operator_command);
			}
			| OPGEQU character_expression
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("GEQU TCHARACTER %c", $2.to_character().get());
			 tree.add_node(operator_command);
			}
			| OPAMP
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("BTAND TVOID 0V");
			 tree.add_node(operator_command);
			}
			| OPBTOR
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("BTOR TVOID 0V");
			 tree.add_node(operator_command);
			}
			| OPBTXOR
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("BTXOR TVOID 0V");
			 tree.add_node(operator_command);
			}
			| OPBTNOT
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("BTNOT TVOID 0V");
			 tree.add_node(operator_command);
			}
			| OPBTSL
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("BTSL TVOID 0V");
			 tree.add_node(operator_command);
			}
			| OPBTSR
			{
			 ASTNode operator_command("operator_command");
			 operator_command.conprint("BTSR TVOID 0V");
			 tree.add_node(operator_command);
			}
			| top_command
			;


top_command:		stmt OPQUES
			{
			 ASTNode top_commandp1("top_commandp1");

			 intop = true;
			 ++topcounter;

			 top_commandp1.conprint("CGOTOL TSTRING \"top_iftrue_%u\"\n", topcounter);
			 top_commandp1.conprint("GOTOL TSTRING \"top_iffalse_%u\"\n", topcounter);

			 tree.add_node(top_commandp1);
			}
			{
			 ASTNode top_commandp2("top_commandp2");

			 top_commandp2.conprint("LBL TSTRING \"top_iftrue_%u\"\n", topcounter);

			 tree.add_node(top_commandp2);
			}
			stmt
			{
			 ASTNode top_commandp3("top_commandp3");

			 top_commandp3.conprint("GOTOL TSTRING \"top_end_%u\"\n", topcounter);

			 tree.add_node(top_commandp3);
			}
 			OPCOLON
			{
			 ASTNode top_commandp4("top_commandp4");

			 top_commandp4.conprint("LBL TSTRING \"top_iffalse_%u\"\n", topcounter);

			 tree.add_node(top_commandp4);
			}
			stmt
			{
			 ASTNode top_commandp5("top_commandp5");

			 top_commandp5.conprint("GOTOL TSTRING \"top_end_%u\"\n", topcounter);
			 top_commandp5.conprint("LBL TSTRING \"top_end_%u\"\n", topcounter);

			 tree.add_node(top_commandp5);
			}
			;

st_command:		ST
			{
			 ASTNode st_command("st_command");
			 st_command.conprint("ST TVOID 0V\n");
			 tree.add_node(st_command);
			}
			;

stack_command:		PUSH
			{
			 ASTNode stack_command("stack_command");
			 stack_command.conprint("PUSH TVOID 0V\n");
			 tree.add_node(stack_command);
			}
			| POP
			{
			 ASTNode stack_command("stack_command");
			 stack_command.conprint("POP TVOID 0V\n");
			 tree.add_node(stack_command);
			}
			;

typeof_command:		TYPEOF RTYPE
			{
			 ASTNode typeof_command("typeof_command");
			 if ($2.to_string().get().getString() == "%accumulator")
  			  typeof_command.conprint("TYPEOF TVOID 0V\n");
			 else if ($2.to_string().get().getString() == "%calc")
  			  typeof_command.conprint("CTYPEOF TVOID 0V\n");
                         else
			  yyerror("Invalid register type.");
			 tree.add_node(typeof_command);
			}
			;

rm_command:		ATOC
			{
			 ASTNode rm_command("rm_command");
			 rm_command.conprint("ATOC TVOID 0V\n");
			 tree.add_node(rm_command);
			}
			| SWITCH
			{
			 ASTNode rm_command("rm_command");
			 rm_command.conprint("SWITCH TVOID 0V\n");
			 tree.add_node(rm_command);
			}
			;

crash_command:		CRASH string_expression
			{
			 ASTNode crash_command("crash_command");
			 crash_command.conprint("CRASH TSTRING %s", $2.to_string().get().getString().c_str());
			 tree.add_node(crash_command);
			}
			;

version_command:	VERSION VTYPE
			{
			 ASTNode version_command("version_command");

			 if ($2.to_string().get().getString() == "pnf")
  			  version_command.conprint("VERSION TVOID 0V\n");
			 else if ($2.to_string().get() == "pnfasm")
			  version_command.conprint("version TVOID 0V\n");
			 else if ($2.to_string().get().getString() == "normal")
  			  ; // Not used yet. This is the first version.
                         else
			  yyerror("Invalid version type.");

			 tree.add_node(version_command);
			}
			;

halt_command:		HALT
			{
			 ASTNode halt_command("halt_command");
			 halt_command.conprint("HALT TVOID 0V\n");
			 tree.add_node(halt_command);
			}
			;

modt_command:		MODT RTYPE
			{
			 ASTNode modt_command("modt_command");

			 if ($2.to_string().get().getString() == "%accumulator")
  			  modt_command.conprint("MODT TVOID 0V\n");
			 else if ($2.to_string().get().getString() == "%calc")
  			  modt_command.conprint("MODCT TVOID 0V\n");
                         else
			  yyerror("Invalid register type.");

			 tree.add_node(modt_command);
			}
			;

subroutine_command:	RETURN
			{
 			 ASTNode subroutine_command("subroutine_command");
			 subroutine_command.conprint("RET TVOID 0V\n");
			 tree.add_node(subroutine_command);
			}
			| GOSUB number_expression
			{
 			 ASTNode subroutine_command("subroutine_command");
			 subroutine_command.conprint("CALL TVOID %g\n", $2.to_number().get());
			 tree.add_node(subroutine_command);
			}
			| GOSUB STYPE ID
			{
 			 ASTNode subroutine_command("subroutine_command");

			 if ($2.to_string().get().getString() == "sub")
			 {
 			  bool declared = false;
			  for (unsigned long i = 0; i < labelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == labelTable[i].name().getString())
			   {
			    declared = true;
			    double d = labelTable[i].address();
			    subroutine_command.conprint("CALLL TVOID %g\n", d);
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else if ($2.to_string().get().getString() == "heve")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared = true;
			    double d = CELabel::hevents();
			    subroutine_command.conprint("HEVENT TVOID %g\n", d);
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else if ($2.to_string().get().getString() == "sheve")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared = true;
			    double d = CELabel::shevents();
			    subroutine_command.conprint("SHEVENT TVOID %g\n", d);
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else if ($2.to_string().get().getString() == "eve")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared = true;
			    double d = CELabel::events();
			    subroutine_command.conprint("EVENT TVOID %g\n", d);
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else if ($2.to_string().get().getString() == "exe")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared = true;
			    double d = CELabel::exceptions();
			    subroutine_command.conprint("EXCEPTION TVOID %g\n", d);
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else if ($2.to_string().get().getString() == "int")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared = true;
			    double d = CELabel::ints();
			    subroutine_command.conprint("INT TVOID %g\n", d);
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else
			  yyerror("Invalid subroutine type.");

			 tree.add_node(subroutine_command);
			}
			;

register_command:	UNREGISTER STYPE
			{
 			 ASTNode register_command("register_command");

			 if ($2.to_string().get().getString() == "heve")
			 {
			  register_command.conprint("HEREM TVOID 0V\n");
 			  CELabel::dechevents();
			 }
			 else if ($2.to_string().get().getString() == "sheve")
			 {
			  register_command.conprint("SHEREM TVOID 0V\n");
 			  CELabel::decshevents();
			 }
			 else if ($2.to_string().get().getString() == "eve")
			 {
			  register_command.conprint("EREM TVOID 0V\n");
 			  CELabel::decevents();
                         }
			 else if ($2.to_string().get().getString() == "exe")
			 {
			  register_command.conprint("EXREM TVOID 0V\n");
 			  CELabel::decexceptions();
			 }
			 else if ($2.to_string().get().getString() == "int")
			 {
			  register_command.conprint("IREM TVOID 0V\n");
 			  CELabel::decints();
                         }
			 else
			  yyerror("Invalid subroutine type.");

			 tree.add_node(register_command);
			}
			| REGISTER STYPE ID
			{
 			 ASTNode register_command("register_command");

			 if ($2.to_string().get().getString() == "heve")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared = true;
			    double d = eventLabelTable[i].address();
			    register_command.conprint("HEADD TVOID %g\n", d);
			    if (CELabel::hevents() != 0)
 			     CELabel::inchevents();
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else if ($2.to_string().get().getString() == "sheve")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared = true;
			    double d = eventLabelTable[i].address();
			    register_command.conprint("SHEADD TVOID %g\n", d);
			    if (CELabel::shevents() != 0)
			     CELabel::incshevents();
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else if ($2.to_string().get().getString() == "eve")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared = true;
			    double d = eventLabelTable[i].address();
			    register_command.conprint("EADD TVOID %g\n", d);
			    if (CELabel::events() != 0)
 			     CELabel::incevents();
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else if ($2.to_string().get().getString() == "exe")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared = true;
			    double d = eventLabelTable[i].address();
			    register_command.conprint("EXADD TVOID %g\n", d);
			    if (CELabel::exceptions() != 0)
			     CELabel::incexceptions();
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else if ($2.to_string().get().getString() == "int")
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared = true;
			    double d = eventLabelTable[i].address();
			    register_command.conprint("IADD TVOID %g\n", d);
			    if (CELabel::ints() != 0)
			     CELabel::incints();
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }
			 else
			  yyerror("Invalid subroutine type.");

			 tree.add_node(register_command);
			}
			| REREGISTER STYPE ID ID
			{
 			 ASTNode register_command("register_command");

			 if ($2.to_string().get().getString() == "heve")
			 {
			  bool declared1 = false;
			  bool declared2 = false;
			  double d1;
			  double d2;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared1 = true;
			    d1 = eventLabelTable[i].address();
			   }
			  }

			  if (!declared1)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }


			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($4.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared2 = true;
			    d2 = eventLabelTable[i].address();
			   }
			  }

			  if (!declared2)
			  {
			   String str = $4.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }


			  register_command.conprint("EVLOAD TVOID %g\n", d1);
			  register_command.conprint("HEED TVOID %g\n", d2);
			 }
			 else if ($2.to_string().get().getString() == "sheve")
			 {
			  bool declared1 = false;
			  bool declared2 = false;
			  double d1;
			  double d2;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared1 = true;
			    d1 = eventLabelTable[i].address();
			   }
			  }

			  if (!declared1)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }


			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($4.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared2 = true;
			    d2 = eventLabelTable[i].address();
			   }
			  }

			  if (!declared2)
			  {
			   String str = $4.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }


			  register_command.conprint("EVLOAD TVOID %g\n", d1);
			  register_command.conprint("SHEED TVOID %g\n", d2);
			 }
			 else if ($2.to_string().get().getString() == "eve")
			 {
			  bool declared1 = false;
			  bool declared2 = false;
			  double d1;
			  double d2;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared1 = true;
			    d1 = eventLabelTable[i].address();
			   }
			  }

			  if (!declared1)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }


			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($4.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared2 = true;
			    d2 = eventLabelTable[i].address();
			   }
			  }

			  if (!declared2)
			  {
			   String str = $4.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }


			  register_command.conprint("EVLOAD TVOID %g\n", d1);
			  register_command.conprint("EED TVOID %g\n", d2);
			 }
			 else if ($2.to_string().get().getString() == "exe")
			 {
			  bool declared1 = false;
			  bool declared2 = false;
			  double d1;
			  double d2;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared1 = true;
			    d1 = eventLabelTable[i].address();
			   }
			  }

			  if (!declared1)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }


			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($4.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared2 = true;
			    d2 = eventLabelTable[i].address();
			   }
			  }

			  if (!declared2)
			  {
			   String str = $4.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }


			  register_command.conprint("EVLOAD TVOID %g\n", d1);
			  register_command.conprint("EXED TVOID %g\n", d2);
			 }
			 else if ($2.to_string().get().getString() == "int")
			 {
			  bool declared1 = false;
			  bool declared2 = false;
			  double d1;
			  double d2;
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared1 = true;
			    d1 = eventLabelTable[i].address();
			   }
			  }

			  if (!declared1)
			  {
			   String str = $3.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }


			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($4.to_string().get().getString() == eventLabelTable[i].name().getString())
			   {
			    declared2 = true;
			    d2 = eventLabelTable[i].address();
			   }
			  }

			  if (!declared2)
			  {
			   String str = $4.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }


			  register_command.conprint("EVLOAD TVOID %g\n", d1);
			  register_command.conprint("IED TVOID %g\n", d2);
			 }
			 else
			  yyerror("Invalid subroutine type.");

			 tree.add_node(register_command);
			}
			| REGISTER BLANK STYPE number_expression
			{
			 ASTNode register_command("register_command");

			 if ($3.to_string().get() == "heve")
			  register_command.conprint("HEADDB TVOID %g\n", $4.to_number().get());
			 else if ($3.to_string().get() == "sheve")
			  register_command.conprint("SHEADDB TVOID %g\n", $4.to_number().get());
			 else if ($3.to_string().get() == "eve")
			  register_command.conprint("EADDB TVOID %g\n", $4.to_number().get());
			 else if ($3.to_string().get() == "exe")
			  register_command.conprint("EXADDB TVOID %g\n", $4.to_number().get());
			 else if ($3.to_string().get() == "int")
			  register_command.conprint("IADDB TVOID %g\n", $4.to_number().get());
			 else
			  yyerror("Invalid STYPE.");

			 tree.add_node(register_command);
			}
			;

store_command:		STORE RTYPE LTYPE number_expression
			{
 			 ASTNode store_command("store_command");

			 if ($2.to_string().get().getString() == "%accumulator")
			 {
			  if ($3.to_string().get().getString() == "memory")
			   store_command.conprint("STORE TVOID %g", $4.to_number().get());
			  else if ($3.to_string().get().getString() == "variable")
			  {
			   store_command.conprint("VSTORE TVOID %g", $4.to_number().get());
			  }
			  else
			   yyerror("Invalid store type.");
			 }
			 else if ($2.to_string().get().getString() == "%calc")
			 {
			  if ($3.to_string().get().getString() == "memory")
			   store_command.conprint("STOREC TVOID %g", $4.to_number().get());
			  else if ($3.to_string().get().getString() == "variable")
			  {
			   store_command.conprint("VSTOREC TVOID %g", $4.to_number().get());
			  }
			  else
			   yyerror("Invalid store type.");
			 }
			 else
			  yyerror("Invalid register type.");

			 tree.add_node(store_command);
			}
			| STORE RTYPE LTYPE
			{
 			 ASTNode store_command("store_command");

			 if ($2.to_string().get().getString() == "%accumulator")
			 {
			  if ($3.to_string().get().getString() == "variable")
			  {
			   store_command.conprint("VSTORE TVOID 0V");
			   ++varcount;
			  }
			  else if ($3.to_string().get().getString() == "tend")
			   store_command.conprint("ESTORE TVOID 0V");
			  else
			   yyerror("Invalid store type.");
			 }
			 else if ($2.to_string().get().getString() == "%calc")
			 {
			  if ($3.to_string().get().getString() == "variable")
			  {
			   store_command.conprint("VSTOREC TVOID 0V");
		 	   ++varcount;
			  }
			  else if ($3.to_string().get().getString() == "tend")
			   store_command.conprint("ESTOREC TVOID 0V");
			  else
			   yyerror("Invalid store type.");
			 }
			 else
			  yyerror("Invalid register type.");

			 tree.add_node(store_command);
			}
			| STORE STOREA
			{
 			 ASTNode store_command("store_command");

			 store_command.conprint("STOREA TVOID 0V\n");

			 tree.add_node(store_command);
			}
			| STORE VTYPE2 STRINGV
			{
 			 ASTNode store_command("store_command");

			 if ($2.to_string().get() == "venum")
			 {
			  store_command.conprint("EPREP TSTRING %s\n", $3.to_string().get().getString().c_str());
			  store_command.conprint("STOREE TVOID 0V\n");
			 }
			 else
			  yyerror("Invalid VTYPE2.");

			 tree.add_node(store_command);
			}
			| STORE RANGE RTYPE2 STRINGV
			{
 			 ASTNode store_command("store_command");

			 if ($3.to_string().get() == "rtype1")
			 {
			  store_command.conprint("RSTORE1 TSTRING %s\n", $4.to_string().get().getString().c_str());
			 }
			 else
			  yyerror("Invalid Range Type.");

			 tree.add_node(store_command);
			}
			| STORE ARRAY STRINGV OPLSQ number_expression OPRSQ
			{
			 ASTNode store_command("store_command");

			 store_command.conprint("APREP TSTRING %s\n", $3.to_string().get().getString().c_str());
			 store_command.conprint("AIPREP TNUMBER %g\n", $5.to_number().get());
			 store_command.conprint("STOREIA TVOID 0V\n");

			 tree.add_node(store_command);
			}
			| STORE ARRAY STRINGV OPLSQ OPRSQ
			{
			 ASTNode store_command("store_command");

			 store_command.conprint("APREP TSTRING %s\n", $3.to_string().get().getString().c_str());
			 store_command.conprint("AIPREP TVOID 0V\n");
			 store_command.conprint("STOREIA TVOID 0V\n");

			 tree.add_node(store_command);
			}
			;

break_command:		BREAK
			{
			 ASTNode break_command("break_command");

			 if (inswitch)
			  break_command.conprint("GOTOL TSTRING \"after_switch_%u\"\n", switchcounter);
			 else if (inwhile)
			  break_command.conprint("GOTOL TSTRING \"while_end_%u\"\n", whilecounter);
			 else if (indowhile)
			  break_command.conprint("GOTOL TSTRING \"dowhile_end_%u\"\n", dowhilecounter);
			 else if (infor)
			  break_command.conprint("GOTOL TSTRING \"for_end_%u\"\n", forcounter);
			 else if (indofor)
			  break_command.conprint("GOTOL TSTRING \"dofor_end_%u\"\n", doforcounter);
			 else if (breakinforever)
			  break_command.conprint("GOTOL TSTRING \"forever_end_%u\"\n", forevercounter);

  			 tree.add_node(break_command);
			}
			| BREAK ID
			{
			 ASTNode break_command("break_command");

			 if (inswitch || inloop2)
			 {
			  bool declared = false;
			  for (unsigned long i = 0; i < labelTable.length(); ++i)
			  {
			   if (labelTable[i].name().getString() == $2.to_string().get().getString())
			   {
			    declared = true;
			    break_command.conprint("GOTOL TVOID %u\n", labelTable[i].address());
			   }
			  }

			  if (!declared)
			  {
			   String str = $2.to_string().get();
			   str += " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			 }

  			 tree.add_node(break_command);
			}
			;

address_command:	ADDRESSOF ATYPE ID
			{
			 ASTNode address_command("address_command");

			 unsigned long address = 0;
			 bool declared = false;
			 if ($2.to_string().get() == "avariable")
			 {
			  for (unsigned long i = 0; i < varTable[scope].length(); ++i)
			  {
			   if ($3.to_string().get() == varTable[scope][i].name())
			   {
			    declared = true;
			    address = varTable[scope][i].address();
			    break;
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get() + " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			  else
			  {
			   if (varTable.length() == 1)
                            --address;

			   address_command.conprint("VADD TVOID %u\n", address);
			  }
			 }
			 else if ($2.to_string().get() == "alabel")
			 {
			  for (unsigned long i = 0; i < labelTable.length(); ++i)
			  {
			   if ($3.to_string().get() == labelTable[i].name())
			   {
		            declared = true;
			    address = i - 1;
			    break;
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get() + " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			  address_command.conprint("LADD TVOID %u\n", address);
			 }
			 else if ($2.to_string().get() == "aevent")
			 {
			  for (unsigned long i = 0; i < eventLabelTable.length(); ++i)
			  {
			   if ($3.to_string().get() == eventLabelTable[i].name())
			   {
		            declared = true;
			    address = i - 1;
			    break;
			   }
			  }

			  if (!declared)
			  {
			   String str = $3.to_string().get() + " was not declared.";
			   yyerror(str.getString().c_str());
			  }
			  address_command.conprint("EADD TVOID %u\n", address);
			 }
			 else
			 {
			  yyerror("Invalid address type.");
			 }

			 tree.add_node(address_command);
			}
			;

add2v_command:		ADD2V
			{
			 ASTNode add2v_command("add2v_command");

			 add2v_command.conprint("ADD2V TVOID 0V\n");

		         tree.add_node(add2v_command);
			}
			;

continue_command:	CONTINUE
			{
			 ASTNode continue_command("continue_command");

			 if (inwhile)
			  continue_command.conprint("GOTOL TSTRING \"while_test_%u\"\n", whilecounter);
			 else if (indowhile)
			  continue_command.conprint("GOTOL TSTRING \"dowhile_body_%u\"\n", dowhilecounter);
			 else if (infor)
			  continue_command.conprint("GOTOL TSTRING \"for_increment_statement_%u\"\n", forcounter);
			 else if (indofor)
			  continue_command.conprint("GOTOL TSTRING \"dofor_increment_statement_%u\"\n", doforcounter);
			 else if (breakinforever)
			  continue_command.conprint("GOTOL TSTRING \"forever_%u\"\n", forevercounter);

		         tree.add_node(continue_command);
			}
			;

check_command:		CHECK CTYPE TYPE number_expression
			{
			 ASTNode check_command("check_command");

			 if ($2.to_string().get() == "current_ver")
			 {
			  if ($3.to_string().get() == "void")
			   check_command.conprint("VCHECK TVOID %g\n", $4.to_number().get());
			  else if ($3.to_string().get() == "number")
			   check_command.conprint("VCHECK TNUMBER %g\n", $4.to_number().get());
			  else
			   yyerror("Invalid type.");
			 }
			 else if ($2.to_string().get() == "ver")
			 {
			  if ($3.to_string().get() == "void")
			   check_command.conprint("VSUPP TVOID %g\n", $4.to_number().get());
			  else if ($3.to_string().get() == "number")
			   check_command.conprint("VSUPP TNUMBER %g\n", $4.to_number().get());
			  else
			   yyerror("Invalid type.");
			 }
			 else
			  yyerror("Invalid check type.");

		         tree.add_node(check_command);
			}
			| CHECK CTYPE TYPE boolean_expression
			{
			 ASTNode check_command("check_command");

			 if ($2.to_string().get() == "current_ver")
			 {
			  if ($3.to_string().get() == "boolean")
			   check_command.conprint("VCHECK TBOOLEAN %s\n", $4.to_boolean().get().getString().c_str());
			  else
			   yyerror("Invalid type.");
			 }
			 if ($2.to_string().get() == "ver")
			 {
			  if ($3.to_string().get() == "boolean")
			   check_command.conprint("VSUPP TBOOLEAN %s\n", $4.to_boolean().get().getString().c_str());
			  else
			   yyerror("Invalid type.");
			 }
			 else
			  yyerror("Invalid check type.");

		         tree.add_node(check_command);
			}
			| CHECK CTYPE TYPE character_expression
			{
			 ASTNode check_command("check_command");

			 if ($2.to_string().get() == "current_ver")
			 {
			  if ($3.to_string().get() == "character")
			   check_command.conprint("VCHECK TCHARACTER %c\n", $4.to_character().get());
			  else
			   yyerror("Invalid type.");
			 }
			 if ($2.to_string().get() == "ver")
			 {
			  if ($3.to_string().get() == "character")
			   check_command.conprint("VSUPP TCHARACTER %c\n", $4.to_character().get());
			  else
			   yyerror("Invalid type.");
			 }
			 else
			  yyerror("Invalid check type.");

		         tree.add_node(check_command);
			}
			| CHECK CTYPE TYPE string_expression
			{
			 ASTNode check_command("check_command");

			 if ($2.to_string().get() == "current_ver")
			 {
			  if ($3.to_string().get() == "string")
			   check_command.conprint("VCHECK TSTRING %s\n", $4.to_string().get().getString().c_str());
			  else
			   yyerror("Invalid type.");
			 }
			 if ($2.to_string().get() == "ver")
			 {
			  if ($3.to_string().get() == "string")
			   check_command.conprint("VSUPP TSTRING %s\n", $4.to_string().get().getString().c_str());
			  else
			   yyerror("Invalid type.");
			 }
			 else
			  yyerror("Invalid check type.");

		         tree.add_node(check_command);
			}
			| CHECK CTYPE number_expression
			{
			 ASTNode check_command("check_command");

			 if ($2.to_string().get() == "instruction")
			 {
   		          check_command.conprint("ISUPP TNUMBER %g\n", $3.to_number().get());
			 }
			 if ($2.to_string().get() == "type")
			 {
			  check_command.conprint("TSUPP TNUMBER %g\n", $3.to_number().get());
			 }
			 else
			  yyerror("Invalid check type.");

		         tree.add_node(check_command);
			}
			;

comment_command:	HCMNT CMTYPE string_expression
			{
			 ASTNode comment_command("comment_command");

			 if ($2.to_string().get() == "l2")
			 {
			  String str = strip_quotes($3.to_string().get());
			  comment_command.conprint(";\\ %s\n", str.getString().c_str());
			 }
			 else if ($2.to_string().get() == "l1")
			 {
			  comment_command.conprint("COMMENT TSTRING %s\n", $3.to_string().get().getString().c_str());
			 }
			 else
			 {
			  yyerror("Invalid comment type.");
                         }

		         tree.add_node(comment_command);
			}
			;

file_command:		FMODE BFMODEC FMODEC
			{
			 ASTNode file_command("file_command");

			 if ($2.to_string().get() == "input")
			 {
			  if ($3.to_string().get() == "in")
			   file_command.conprint("FIMODE TSTRING \"in\"\n");
			  else if ($3.to_string().get() == "binary")
			   file_command.conprint("FIMODE TSTRING \"binary\"\n");
			  else
			   yyerror("Invalid file mode command.");
			 }
			 else if ($2.to_string().get() == "output")
			 {
			  if ($3.to_string().get() == "out")
			   file_command.conprint("FOMODE TSTRING \"out\"\n");
			  else if ($3.to_string().get() == "binary")
			   file_command.conprint("FOMODE TSTRING \"binary\"\n");
			  else if ($3.to_string().get() == "ate")
			   file_command.conprint("FOMODE TSTRING \"ate\"\n");
			  else if ($3.to_string().get() == "app")
			   file_command.conprint("FOMODE TSTRING \"app\"\n");
			  else if ($3.to_string().get() == "trunc")
			   file_command.conprint("FOMODE TSTRING \"trunc\"\n");
			  else
			   yyerror("Invalid file mode command.");
			 }
			 else
			  yyerror("Invalid basic file mode command.");

			 tree.add_node(file_command);
			}
			| FOPEN BFMODEC string_expression
			{
			 ASTNode file_command("file_command");

			 if ($2.to_string().get() == "input")
			 {
			  file_command.conprint("FIOPEN TSTRING %s\n", $3.to_string().get().getString().c_str());
			 }
			 else if ($2.to_string().get() == "output")
			 {
  			  file_command.conprint("FOOPEN TSTRING %s\n", $3.to_string().get().getString().c_str());
			 }
			 else
			  yyerror("Invalid basic file mode command.");

			 tree.add_node(file_command);
			}
			| FCLOSE BFMODEC
			{
			 ASTNode file_command("file_command");

			 if ($2.to_string().get() == "input")
			 {
			  file_command.conprint("FICLOSE TVOID 0V\n");
			 }
			 else if ($2.to_string().get() == "output")
			 {
  			  file_command.conprint("FOCLOSE TVOID 0V\n");
			 }
			 else
			  yyerror("Invalid basic file mode command.");

			 tree.add_node(file_command);
			}
			| FEOF
			{
			 ASTNode file_command("file_command");

			 file_command.conprint("FIEOF TVOID 0V\n");

			 tree.add_node(file_command);
			}			
			;

meml_command:		MEML
			{
			 ASTNode meml_command("meml_command");

			 meml_command.conprint("MEML TVOID 0V\n");

			 tree.add_node(meml_command);
			}
			;

pnfasm_command:		PNFASM STRINGV STRINGV STRINGV
			{
			 ASTNode pnfasm_command("pnfasm_command");

			 pnfasm_command.conprint("pnf %s %s %s\n", strip_quotes($2.to_string().get()).getString().c_str(), 
						 strip_quotes($3.to_string().get()).getString().c_str(), strip_quotes($4.to_string().get()).getString().c_str());

			 tree.add_node(pnfasm_command);
			}
			;

array_length_command:	ARRAY STRINGV OPDOT LENGTH
			{
			 ASTNode array_length_command("array_length_command");
			
			 array_length_command.conprint("APREP TSTRING %s\n", $2.to_string().get().getString().c_str());
			 array_length_command.conprint("ALENGTH TVOID 0V\n");

			 tree.add_node(array_length_command);
			}

dup_command:		DUP RTYPE
			{
			 ASTNode dup_command("dup_command");

			 if ($2.to_string().get() == "%accumulator")
			 {
			  dup_command.conprint("DUP TVOID 0V\n");
			 }
			 else if ($2.to_string().get() == "%calc")
			 {
			  dup_command.conprint("CDUP TVOID 0V\n");
			 }
			 else
			  yyerror((char *)"Invalid register.");

			 tree.add_node(dup_command);
			}

pp_directive:		PBIN
			{
			 ASTNode pp_directive("pp_directive");
			 pp_directive.conprint("#BIN#\n");
			 tree.add_node(pp_directive);
			}
			| PPBIN
			{
			 ASTNode pp_directive("pp_directive");
			 pp_directive.conprint("#PBIN#\n");
			 tree.add_node(pp_directive);
			}
			| PLIB
			{
			 ASTNode pp_directive("pp_directive");
			 pp_directive.conprint("#LIB#\n");
			 tree.add_node(pp_directive);
			}
			;

pp_statement:		PINCLUDE STRINGV 
			{ 
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("#include %s", $2.to_string().get().getString().c_str());
			 tree.add_node(pp_statement);
			}
			| PINCLUDE "<" STRINGV ">" 
			{ 
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("#include <%s>", $2.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PIMPORT STRINGV 
			{ 
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("#import %s\n", $2.to_string().get().getString().c_str());
			 tree.add_node(pp_statement);
			}
			| PIMPORT "<" STRINGV ">" 
			{ 
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("#import <%s>\n", $2.to_string().get().getString().c_str());
			 tree.add_node(pp_statement);
			}
			| PDEFINE STRINGV STRINGV 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("#define %s %s\n", $2.to_string().get().getString().c_str(), 
						    $3.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PMACRO STRINGV 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("#macro %s\n", $2.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PENDM 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("#endm\n");
			 tree.add_node(pp_statement);
		 	}
			| PUNDEF STRINGV 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("#undef %s\n", $2.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PIFDEF STRINGV 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("#ifdef %s\n", $2.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PIFNDEF STRINGV 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("#infdef %s\n", $2.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PELSE 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("#else\n"); 
			 tree.add_node(pp_statement);
			}
			| PENDIF 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("#endif\n"); 
			 tree.add_node(pp_statement);
			}
			| PPDATE 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("_DATE()\n"); 
			 tree.add_node(pp_statement);
			}
			| PPTIME 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("_TIME()\n"); 
			 tree.add_node(pp_statement);
			}
			| PPLINE 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("_LINE()\n"); 
			 tree.add_node(pp_statement);
			}
			| PPFILE 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("_FILE()\n"); 
			 tree.add_node(pp_statement);
			}
			| PPCDATE 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("_CDATE()\n"); 
			 tree.add_node(pp_statement);
			}
			| PPCTIME 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("_CTIME()\n"); 
			 tree.add_node(pp_statement);
			}			
			| PPINCLUDE STRINGV 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%include %s\n", $2.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PPINCLUDE "<" STRINGV ">" 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%include <%s>\n", $2.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PPIMPORT STRINGV 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%import %s\n", $2.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PPIMPORT "<" STRINGV ">" 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%import <%s>\n", $2.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PPDEFINE STRINGV STRINGV 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%define %s %s\n", $2.to_string().get().getString().c_str(), 
						     $3.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PPMACRO STRINGV 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%macro %s\n", $2.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PPENDM 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%endm\n"); 
			 tree.add_node(pp_statement);
			}
			| PPUNDEF STRINGV 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%undef %s\n", $2.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PPIFDEF STRINGV 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%ifdef %s\n", $2.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PPIFNDEF STRINGV 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%infdef %s\n", $2.to_string().get().getString().c_str()); 
			 tree.add_node(pp_statement);
			}
			| PPELSE 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%else\n"); 
			 tree.add_node(pp_statement);
			}
			| PPENDIF 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%endif\n"); 
			 tree.add_node(pp_statement);
			}
			| PPPDATE 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%_DATE()\n"); 
			 tree.add_node(pp_statement);
			}
			| PPPTIME 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%_TIME()\n"); 
			 tree.add_node(pp_statement);
			}
			| PPPLINE 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%_LINE()\n"); 
			 tree.add_node(pp_statement);
			}
			| PPPFILE 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%_FILE()\n"); 
			 tree.add_node(pp_statement);
			}
			| PPPCDATE 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%_CDATE()\n");
			 tree.add_node(pp_statement);
			}
			| PPPCTIME 
			{
			 ASTNode pp_statement("pp_statement");
			 pp_statement.conprint("%%_CTIME()\n"); 
			 tree.add_node(pp_statement);
			}

%%
/* Additional C/C++ Code */