#line 2 "pnfha.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 169
#define YY_END_OF_BUFFER 170
static yyconst short int yy_acclist[751] =
    {   0,
      126,  126,  170,  168,  169,  166,  168,  169,  166,  169,
       23,  168,  169,  168,  169,   36,  126,  168,  169,   15,
      168,  169,   21,  168,  169,  168,  169,    8,  168,  169,
        9,  168,  169,   13,  168,  169,   11,  168,  169,    7,
      168,  169,   12,   25,  168,  169,   33,  168,  169,   14,
      168,  169,    3,  126,  168,  169,    3,  126,  168,  169,
       24,  168,  169,    6,  168,  169,   28,  168,  169,   10,
      168,  169,   29,  168,  169,   32,  168,  169,  126,  168,
      169,   34,  168,  169,   35,  168,  169,   16,  168,  169,
      126,  168,  169,  126,  168,  169,  126,  168,  169,  126,

      168,  169,  126,  168,  169,  126,  168,  169,  126,  168,
      169,  126,  168,  169,  126,  168,  169,  126,  168,  169,
      126,  168,  169,  126,  168,  169,  126,  168,  169,  126,
      168,  169,  126,  168,  169,  126,  168,  169,  126,  168,
      169,  126,  168,  169,  126,  168,  169,  126,  168,  169,
      126,  168,  169,  164,  168,  169,  168,  169,  165,  168,
      169,  166,   27,   17,    5,  126,   20,   18,   19,  167,
        3,    3,  126,    1,  126,   30,   26,   31,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,   65,
      126,  118,  126,  116,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,   46,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,   22,    4,  167,
        3,  126,  126,  126,  126,  118,  126,  126,  126,   43,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  101,  126,  126,   42,  126,  126,  126,  113,  126,

      113,  126,  126,  126,  126,  126,  126,   79,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  118,  126,  112,  126,   48,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  109,  126,
      126,  126,  113,  126,  126,  126,  126,  126,  126,  126,
       37,  126,  126,  115,  126,  126,  126,  126,  146,  126,
      126,  126,  126,  126,  126,   50,  126,  126,  126,  126,
      126,  126,   67,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,   66,  126,

      126,   93,  126,  126,  126,  126,  126,   88,  126,  126,
      126,  126,  126,  126,  126,  105,  126,  126,  126,   80,
      126,  126,   45,  126,   55,  126,  126,  126,  126,  126,
      126,  126,   44,  126,   92,  126,  126,   56,  126,  126,
      112,  126,  126,  126,  126,  126,  126,   47,  126,  126,
      125,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  102,  126,    2,  126,  126,  115,  126,  126,
      126,  126,  126,  108,  126,  126,  110,  126,  163,  146,
      127,  129,  111,  138,  134,   75,  126,  126,  126,  126,
       97,  126,  126,  126,   98,  126,  126,   71,  126,   68,

      126,  126,  126,   83,  126,  126,  126,  126,   53,  126,
      126,  126,  126,   78,  126,  126,  126,  103,  126,   94,
      126,  126,   60,  126,  126,   85,  126,   86,  126,  126,
      126,  126,   91,  126,  126,  126,  126,  126,   58,  126,
      126,  117,  126,  126,   72,  126,  126,  126,  126,  126,
      126,  126,  126,  126,   38,  126,   95,  126,  126,  126,
      126,  126,  126,   64,  126,  126,  126,  126,  126,  126,
      126,  126,  119,  126,  126,   73,  126,  163,  155,  151,
      128,  139,  136,  133,  135,  126,  114,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  104,  126,

      126,   40,  126,   87,  126,  126,  126,  126,   89,  126,
      126,  126,  126,  126,  100,  126,  126,  112,  126,  126,
      126,   96,  126,  126,  126,   57,  126,  120,  126,   76,
      126,  126,   51,  126,  126,   49,  126,  126,  126,  126,
      156,  153,  150,  152,  132,  137,  126,  126,  126,  126,
       84,  126,  126,  126,   52,  126,  126,   69,  126,   77,
      126,  126,   81,  126,  126,  126,  126,  122,  126,  126,
      126,  126,   99,  126,  126,   39,  126,  126,  126,  126,
      126,  126,   54,  126,  149,  154,  140,  143,  142,  141,
      131,  126,  126,   70,  126,  126,  126,   82,  126,  126,

      106,  126,   41,  126,  126,   90,  126,  123,  126,  121,
      126,  126,   62,  126,  126,  126,  126,  157,  160,  159,
      158,  148,  144,  145,  130,   74,  126,  126,  107,  126,
      126,  126,  126,  126,  126,  161,  162,  147,  126,  124,
      126,  126,   63,  126,   59,  126,   61,  126,  115,  126
    } ;

static yyconst short int yy_accept[717] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   14,   16,   20,
       23,   26,   28,   31,   34,   37,   40,   43,   47,   50,
       53,   57,   61,   64,   67,   70,   73,   76,   79,   82,
       85,   88,   91,   94,   97,  100,  103,  106,  109,  112,
      115,  118,  121,  124,  127,  130,  133,  136,  139,  142,
      145,  148,  151,  154,  157,  159,  162,  163,  164,  165,
      165,  166,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  168,  168,  169,  170,
      171,  172,  174,  176,  177,  178,  179,  180,  181,  182,
      183,  184,  185,  186,  187,  188,  189,  190,  191,  192,

      193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
      203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
      213,  214,  215,  216,  217,  218,  219,  220,  222,  224,
      226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
      236,  237,  238,  239,  240,  241,  242,  243,  244,  246,
      247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
      257,  258,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  260,
      261,  262,  263,  264,  265,  266,  268,  269,  270,  272,

      273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
      283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
      294,  295,  297,  298,  299,  301,  303,  304,  305,  306,
      307,  308,  310,  311,  312,  313,  314,  315,  316,  317,
      318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
      328,  329,  330,  331,  332,  334,  336,  338,  339,  340,
      341,  342,  343,  344,  345,  346,  347,  348,  349,  351,
      352,  353,  355,  356,  357,  358,  359,  360,  361,  363,
      364,  366,  367,  368,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      371,  372,  373,  374,  375,  376,  378,  379,  380,  381,
      382,  383,  385,  386,  387,  388,  389,  390,  391,  392,
      393,  394,  395,  396,  397,  398,  399,  401,  402,  404,
      405,  406,  407,  408,  410,  411,  412,  413,  414,  415,
      416,  418,  419,  420,  422,  423,  425,  427,  428,  429,
      430,  431,  432,  433,  435,  437,  438,  440,  441,  443,
      444,  445,  446,  447,  448,  450,  451,  453,  454,  455,
      456,  457,  458,  459,  460,  461,  462,  463,  465,  467,

      468,  470,  471,  472,  473,  474,  476,  477,  479,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  481,  482,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  484,  484,  485,  485,
      486,  486,  486,  486,  486,  486,  486,  488,  489,  490,
      491,  493,  494,  495,  497,  498,  500,  502,  503,  504,
      506,  507,  508,  509,  511,  512,  513,  514,  516,  517,
      518,  520,  522,  523,  525,  526,  528,  530,  531,  532,
      533,  535,  536,  537,  538,  539,  541,  542,  544,  545,
      547,  548,  549,  550,  551,  552,  553,  554,  555,  557,

      559,  560,  561,  562,  563,  564,  566,  567,  568,  569,
      570,  571,  572,  573,  575,  576,  578,  579,  579,  579,
      579,  579,  579,  579,  579,  580,  580,  581,  581,  581,
      581,  581,  581,  581,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  583,  584,  584,  584,  584,  585,  586,
      587,  589,  590,  591,  592,  593,  594,  595,  596,  597,
      598,  599,  601,  602,  604,  606,  607,  608,  609,  611,
      612,  613,  614,  615,  617,  618,  620,  621,  622,  624,
      625,  626,  628,  630,  632,  633,  635,  636,  638,  639,
      640,  641,  641,  641,  641,  641,  641,  641,  641,  642,

      643,  643,  643,  643,  644,  645,  645,  645,  645,  645,
      645,  645,  645,  646,  647,  647,  647,  648,  649,  650,
      651,  653,  654,  655,  657,  658,  660,  662,  663,  665,
      666,  667,  668,  670,  671,  672,  673,  675,  676,  678,
      679,  680,  681,  682,  683,  685,  685,  685,  685,  685,
      685,  685,  686,  687,  687,  687,  687,  687,  688,  689,
      690,  691,  691,  692,  692,  693,  694,  696,  697,  698,
      700,  701,  703,  705,  706,  708,  710,  712,  713,  715,
      716,  717,  718,  718,  718,  719,  720,  721,  722,  723,
      723,  724,  725,  725,  726,  728,  729,  731,  732,  733,

      734,  735,  736,  737,  738,  739,  739,  740,  742,  743,
      745,  747,  749,  749,  751,  751
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,   28,    1,   29,   30,   31,   32,   33,   34,
       35,   35,   36,   35,   35,   37,   38,   39,   35,   40,
       35,   35,   35,   41,   35,   42,   35,   35,   35,   35,
       43,    1,   44,   45,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   35,   56,   57,   58,   59,
       60,   61,   35,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[74] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1,    1
    } ;

static yyconst short int yy_base[722] =
    {   0,
        0,    0,  798,  799,   72,   75,   54,  791,    0,   92,
      787,    0,  799,  799,  799,  781,  799,  778,  799,  775,
       64,   70,  799,  799,  766,  765,  764,  799,    0,  799,
      799,  799,   46,   56,   86,   54,   95,  111,  729,   47,
       68,  144,   44,  115,  723,   66,  123,  114,  131,  728,
      137,  732,  734,  799,  712,  799,  199,  799,  799,  777,
      799,    0,  173,  777,  745,  744,  749,  174,  729,  730,
      725,   64,  140,  728,  715,  799,  763,  799,  799,    0,
      213,  220,    0,  799,  799,  799,  722,  705,   41,  709,
       62,  711,   93,  721,  708,  719,  705,  713,  700,  715,

      710,   83,  151,  713,  692,  696,  705,  155,  695,  692,
      162,  692,  702,  701,  694,  693,  689,  688,  155,  174,
       94,  688,  699,  162,  688,  678,  683,    0,  182,    0,
      694,  682,  693,  681,  688,  684,  674,  677,  670,  681,
      133,  677,  668,  671,  197,  660,  681,  676,  191,  678,
      670,  665,  672,  657,  660,  658,  657,  190,  663,  662,
      654,  799,  710,  223,  663,  161,  204,  666,  653,  707,
      671,  679,  672,  226,  678,  670,  669,  668,  654,  645,
      649,  637,  649,  215,  637,  648,  647,  645,  799,    0,
      249,  227,  643,  645,  645,    0,  127,  644,    0,  641,

      627,  641,  628,  629,  638,  633,  620,  630,  619,  631,
      621,  216,  615,  622,  614,  628,  614,  622,  618,    0,
      620,  615,  611,  613,  608,    0,  603,  605,  612,  613,
      611,  610,  598,  604,  166,  603,  608,  594,  590,  594,
      589,  601,  586,  592,  584,  584,  596,  593,  595,  215,
      580,  596,  584,  593,  579,  592,    0,  583,  578,  582,
      582,  584,  578,  581,  566,  569,  572,  562,    0,  565,
      571,  563,  560,  573,  563,  108,  570,  569,  564,  553,
      554,  566,  558,  554,  609,  241,  583,  575,  574,  573,
      556,  544,  556,  226,  544,  555,  554,  552,    0,  593,

      592,  560,  569,  561,  555,  558,  555,  555,  527,  542,
      535,  538,  223,  537,  537,  526,  528,  522,  532,  516,
      530,  521,  528,  528,  508,    0,  521,  513,  518,  522,
      516,    0,  520,  523,  522,  512,  516,  511,  510,  510,
      499,  511,  496,  498,  504,  503,    0,  505,  490,  496,
      490,  502,  489,    0,  500,  491,  483,  501,  488,  496,
        0,  486,  234,    0,  496,    0,    0,  484,  491,  477,
      478,  482,  474,    0,    0,  475,    0,  472,  488,  483,
      468,  469,  467,  466,    0,  478,    0,  465,  474,  464,
      474,  459,  472,  471,  462,  460,  470,    0,    0,  469,

      231,  464,  469,  457,  459,    0,  462,    0,    0,  483,
      475,  469,  472,  469,  469,  451,  454,  232,  453,  453,
      442,  444,  438,  448,    0,  799,  799,  490,  456,  458,
      462,  461,  460,  459,  433,  799,  431,  799,  437,  799,
      436,  436,  424,  420,  424,  431,    0,  419,  417,  423,
        0,  432,  409,    0,  430,    0,    0,  411,  426,    0,
      415,  409,  413,    0,  422,  411,  412,    0,  416,  410,
        0,    0,  402,    0,  414,    0,    0,  413,  405,  398,
        0,  397,  413,  408,  403,    0,  393,    0,  391,    0,
      401,  385,  398,  395,  389,  386,  391,  393,  390,  380,

      381,  389,  384,  272,  391,  394,  387,  374,  384,  377,
      384,  380,  386,    0,  373,    0,    0,  391,  393,  397,
      396,  395,  394,  367,  799,  373,  799,  372,  372,  360,
      356,  360,  367,  799,  385,  384,  405,  404,  403,  402,
      347,  360,  799,  799,  358,  345,  358,  799,  799,  344,
        0,  358,  346,  347,  339,  338,  346,  335,  345,  334,
      333,    0,  345,  338,    0,  332,  342,  335,    0,  334,
      338,  329,  339,    0,  321,  320,  319,  325,    0,  332,
      319,    0,    0,    0,  317,    0,  328,    0,  316,  321,
      318,  343,  342,  363,  362,  361,  360,  319,  799,  799,

      317,  304,  317,  799,  799,  355,  354,  352,  351,  350,
      349,  303,  799,  799,  355,  307,  297,  299,  291,  303,
        0,  293,  301,    0,  305,  284,    0,  290,    0,  284,
      288,  289,    0,  286,  280,  292,    0,  291,    0,  279,
      276,  284,  274,  286,    0,  325,  324,  322,  321,  320,
      319,  799,  799,  326,  278,  316,  315,  799,  799,  799,
      799,  279,  799,  321,  272,  272,    0,  260,  262,    0,
      254,  298,    0,  267,    0,    0,    0,  262,    0,  265,
      256,  263,  300,  297,  799,  799,  799,  799,  799,  302,
      799,  799,  239,  799,    0,  249,    0,  235,  236,  233,

      243,  226,  799,  799,  799,  226,  217,    0,   78,    0,
        0,    0,   31,    0,  799,  298,   79,  301,  304,  307,
      310
    } ;

static yyconst short int yy_def[722] =
    {   0,
      715,    1,  715,  715,  715,  715,  715,  716,  717,  715,
      715,  718,  715,  715,  715,  715,  715,  715,  715,  715,
      717,  717,  715,  715,  715,  715,  715,  715,  717,  715,
      715,  715,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  715,  715,  715,  715,  715,  715,  716,
      715,  717,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  719,
      715,  717,  717,  715,  715,  715,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,

      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  719,
      715,  717,  717,  717,  717,  717,  717,  717,  717,  717,

      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  720,  715,

      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,

      717,  717,  717,  717,  717,  717,  717,  717,  721,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  720,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,

      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  721,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  715,  715,  715,  715,  715,  715,  715,  715,  715,

      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  717,  717,  717,  717,  717,  717,

      717,  717,  715,  715,  715,  715,  717,  717,  717,  717,
      717,  717,  715,  717,    0,  715,  715,  715,  715,  715,
      715
    } ;

static yyconst short int yy_nxt[873] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   23,   24,   25,   26,   27,   28,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   30,   31,   32,   29,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   29,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   29,   29,   53,
       54,   55,   56,   57,   57,   57,   57,   57,   57,   58,
       81,   62,   82,   82,   82,   82,   81,  194,   82,   82,
       82,   82,  436,  125,  134,   87,   88,  126,   59,   63,

      195,   64,   89,  135,  107,   83,   90,   91,   92,   93,
       95,   94,   96,  108,  197,   97,  127,   98,  109,  128,
      182,   65,  183,  198,  140,  141,  129,  142,   66,  209,
      143,   67,   99,  210,  100,  101,  714,   68,   69,  102,
       70,   71,   72,  196,  235,  103,   73,  104,  105,   74,
      106,  110,  200,  111,  236,  112,   75,  115,  399,  116,
      113,  117,  114,  130,  130,  136,  400,  148,  118,  144,
      119,  120,  121,  145,  137,  122,  123,  149,  150,  138,
      151,  152,  163,  157,  153,  269,  146,  158,  147,  269,
      131,  184,  154,  257,  132,  258,  159,  185,  186,  155,

       57,   57,   57,  133,  174,  175,  217,  176,  211,  212,
      177,  222,  360,  218,  178,  231,  232,  292,  164,  293,
      233,  219,  165,  166,  239,  240,  223,  167,  244,  361,
      168,  191,  191,  191,  191,  234,   81,  169,   82,   82,
       82,   82,  245,  262,  246,  226,  269,  320,  280,  263,
      270,  281,  271,  286,  287,  294,  288,  303,  264,  289,
      265,  295,  296,  290,  314,  338,  304,  191,  191,  191,
      191,  375,  410,  315,  376,  419,  510,  439,  714,  339,
      440,  411,  483,  484,  420,  713,  526,  712,  321,  527,
      511,  583,  583,  711,  710,  709,  708,  485,   60,  707,

       60,   77,  706,   77,  190,  705,  190,  425,  704,  425,
      517,  703,  517,  702,  701,  700,  699,  698,  697,  696,
      408,  406,  551,  695,  694,  693,  692,  691,  690,  689,
      688,  687,  686,  685,  684,  683,  269,  682,  681,  680,
      679,  408,  408,  678,  677,  676,  675,  674,  673,  672,
      671,  670,  669,  668,  667,  666,  665,  664,  663,  662,
      661,  660,  659,  658,  657,  656,  655,  654,  653,  652,
      651,  650,  649,  648,  647,  646,  645,  644,  643,  269,
      642,  641,  640,  639,  638,  637,  636,  635,  634,  633,
      632,  631,  630,  629,  628,  627,  626,  625,  624,  623,

      622,  621,  620,  619,  406,  618,  617,  616,  615,  614,
      613,  612,  611,  610,  609,  608,  607,  606,  605,  604,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  588,  587,  586,  585,  406,
      584,  269,  582,  581,  580,  579,  578,  577,  576,  488,
      406,  408,  575,  269,  574,  573,  269,  572,  571,  570,
      569,  568,  567,  566,  565,  564,  563,  562,  561,  560,
      559,  558,  557,  556,  555,  554,  553,  196,  552,  551,
      551,  550,  549,  548,  547,  546,  545,  544,  543,  542,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  532,

      531,  530,  529,  528,  525,  524,  523,  522,  521,  520,
      519,  518,  516,  515,  514,  513,  512,  196,  509,  508,
      507,  506,  226,  505,  504,  503,  502,  501,  500,  499,
      498,  497,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  269,  487,  486,  482,  481,  480,  479,  478,  477,
      476,  475,  399,  474,  473,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  454,  453,  452,  451,  269,  450,  449,
      448,  447,  446,  445,  444,  443,  442,  441,  438,  437,
      436,  435,  434,  433,  432,  431,  430,  429,  428,  427,

      426,  424,  423,  422,  421,  418,  417,  416,  415,  414,
      413,  412,  409,  408,  407,  406,  405,  404,  403,  402,
      401,  398,  269,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  374,  373,  372,  371,  370,  369,
      368,  226,  367,  366,  365,  364,  363,  362,  359,  358,
      357,  356,  355,  354,  353,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  342,  341,  340,  337,  336,
      335,  334,  333,  332,  331,  330,  329,  328,  327,  326,
      325,  324,  323,  322,  319,  318,  317,  316,  313,  312,

      311,  310,  309,  308,  307,  306,  305,  302,  301,  300,
      299,  298,  297,  291,  285,  284,  283,  282,  279,  278,
      277,  276,  275,  274,  273,  272,  268,  267,  266,  261,
      260,  259,  256,  255,  254,  253,  252,  251,  250,  249,
      248,  247,  243,  242,  241,  238,  237,  230,  229,  228,
      227,  226,  225,  224,  221,  220,  216,  215,  214,  213,
      208,  207,  206,  205,  204,  203,  202,  201,  199,  196,
      193,  192,  189,  188,  187,  181,  180,  179,  173,  172,
      171,  170,   61,  162,  161,  160,  156,  139,  124,   86,
       85,   84,   80,   79,   78,   76,   61,  715,    3,  715,

      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715
    } ;

static yyconst short int yy_chk[873] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    5,    5,    6,    6,    6,    7,
       21,  717,   21,   21,   21,   21,   22,   89,   22,   22,
       22,   22,  713,   40,   43,   33,   33,   40,    7,   10,

       89,   10,   33,   43,   36,   21,   33,   33,   33,   33,
       34,   33,   34,   36,   91,   34,   41,   34,   36,   41,
       72,   10,   72,   91,   46,   46,   41,   46,   10,  102,
       46,   10,   35,  102,   35,   35,  709,   10,   10,   35,
       10,   10,   10,   93,  121,   35,   10,   35,   35,   10,
       35,   37,   93,   37,  121,   37,   10,   38,  276,   38,
       37,   38,   37,   42,   42,   44,  276,   48,   38,   47,
       38,   38,   38,   47,   44,   38,   38,   48,   48,   44,
       48,   49,   63,   51,   49,  197,   47,   51,   47,  197,
       42,   73,   49,  141,   42,  141,   51,   73,   73,   49,

       57,   57,   57,   42,   68,   68,  108,   68,  103,  103,
       68,  111,  235,  108,   68,  119,  119,  166,   63,  166,
      120,  108,   63,   63,  124,  124,  111,   63,  129,  235,
       63,   81,   81,   81,   81,  120,   82,   63,   82,   82,
       82,   82,  129,  145,  129,  129,  149,  192,  158,  145,
      149,  158,  149,  164,  164,  167,  164,  174,  145,  164,
      145,  167,  167,  164,  184,  212,  174,  191,  191,  191,
      191,  250,  286,  184,  250,  294,  401,  313,  707,  212,
      313,  286,  363,  363,  294,  706,  418,  702,  192,  418,
      401,  504,  504,  701,  700,  699,  698,  363,  716,  696,

      716,  718,  693,  718,  719,  690,  719,  720,  684,  720,
      721,  683,  721,  682,  681,  680,  678,  674,  672,  671,
      669,  668,  666,  665,  664,  662,  657,  656,  655,  654,
      651,  650,  649,  648,  647,  646,  644,  643,  642,  641,
      640,  638,  636,  635,  634,  632,  631,  630,  628,  626,
      625,  623,  622,  620,  619,  618,  617,  616,  615,  612,
      611,  610,  609,  608,  607,  606,  603,  602,  601,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  587,
      585,  581,  580,  578,  577,  576,  575,  573,  572,  571,
      570,  568,  567,  566,  564,  563,  561,  560,  559,  558,

      557,  556,  555,  554,  553,  552,  550,  547,  546,  545,
      542,  541,  540,  539,  538,  537,  536,  535,  533,  532,
      531,  530,  529,  528,  526,  524,  523,  522,  521,  520,
      519,  518,  515,  513,  512,  511,  510,  509,  508,  507,
      506,  505,  503,  502,  501,  500,  499,  498,  497,  496,
      495,  494,  493,  492,  491,  489,  487,  485,  484,  483,
      482,  480,  479,  478,  475,  473,  470,  469,  467,  466,
      465,  463,  462,  461,  459,  458,  455,  453,  452,  450,
      449,  448,  446,  445,  444,  443,  442,  441,  439,  437,
      435,  434,  433,  432,  431,  430,  429,  428,  424,  423,

      422,  421,  420,  419,  417,  416,  415,  414,  413,  412,
      411,  410,  407,  405,  404,  403,  402,  400,  397,  396,
      395,  394,  393,  392,  391,  390,  389,  388,  386,  384,
      383,  382,  381,  380,  379,  378,  376,  373,  372,  371,
      370,  369,  368,  365,  362,  360,  359,  358,  357,  356,
      355,  353,  352,  351,  350,  349,  348,  346,  345,  344,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  331,  330,  329,  328,  327,  325,  324,  323,  322,
      321,  320,  319,  318,  317,  316,  315,  314,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,

      300,  298,  297,  296,  295,  293,  292,  291,  290,  289,
      288,  287,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  275,  274,  273,  272,  271,  270,  268,  267,  266,
      265,  264,  263,  262,  261,  260,  259,  258,  256,  255,
      254,  253,  252,  251,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  234,  233,
      232,  231,  230,  229,  228,  227,  225,  224,  223,  222,
      221,  219,  218,  217,  216,  215,  214,  213,  211,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      198,  195,  194,  193,  188,  187,  186,  185,  183,  182,

      181,  180,  179,  178,  177,  176,  175,  173,  172,  171,
      170,  169,  168,  165,  163,  161,  160,  159,  157,  156,
      155,  154,  153,  152,  151,  150,  148,  147,  146,  144,
      143,  142,  140,  139,  138,  137,  136,  135,  134,  133,
      132,  131,  127,  126,  125,  123,  122,  118,  117,  116,
      115,  114,  113,  112,  110,  109,  107,  106,  105,  104,
      101,  100,   99,   98,   97,   96,   95,   94,   92,   90,
       88,   87,   77,   75,   74,   71,   70,   69,   67,   66,
       65,   64,   60,   55,   53,   52,   50,   45,   39,   27,
       26,   25,   20,   18,   16,   11,    8,    3,  715,  715,

      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "pnfha.lpp"
#define INITIAL 0
#line 5 "pnfha.lpp"
/* Prologue */
/*
Copyright (C) 2019 Dennis Earl Smiley

This file is part of pnfha.

    pnfha is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pnfha is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pnfha.  If not, see <https://www.gnu.org/licenses/>. 
*/
/*
CHANGELOG
=========

5/3/19 Origional a-a-a - 1. The first version.
			 2. Added new LTYPE for function return values...
			 3. Debugged...
			 4. Added default values to functions.
			 5. Debugged...
*/
#include <stdarg.h>

#include "pnfha.tab.cpp"


void generate_code();
void generate_pcode(bool names);
void generate_switch_code();
String strip_quotes(String str);
void generate_comment_code();


PNF_Variable lval;
/* Flex Definitions */
/* Flex Patterns Below %% */
#line 935 "pnfha.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 404 "pnfha.lpp"


#line 1089 "pnfha.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 716 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 799 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 406 "pnfha.lpp"
lval.put("1"); yylval = lval; return VOIDV;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 408 "pnfha.lpp"
{
			 String b;
			 if (strcmp(yytext, "true") == 0)
		          b = "true";
			 else if (strcmp(yytext, "false") == 0)
			  b = "false";
			 else
 			  b = "true";

			 bool b2 = b == "true" ? true : false;
			 PNF_Boolean b3(b2);

			 lval.put(b3);
			 yylval = lval.to_boolean();
			 return BOOLEANV;
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 425 "pnfha.lpp"
{
			 double d = atof(yytext);
			 PNF_Number n(d);
			 lval.put(n);
			 yylval = lval.to_number();
			 return NUMBERV;
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 433 "pnfha.lpp"
{
			 char ch = yytext[1];
			 PNF_Character c(ch);
			 lval.put(c);
			 yylval = lval.to_character();
			 return CHARACTERV;
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 441 "pnfha.lpp"
{
			 String str = yytext;
			 PNF_String s(str);
			 lval.put(s);
			 yylval = lval.to_string();
			 return STRINGV;
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 449 "pnfha.lpp"
lval.put("1"); yylval = lval; return SEND;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 451 "pnfha.lpp"
lval.put("1"); yylval = lval; return COMMA;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 453 "pnfha.lpp"
lval.put("0"); yylval = lval; return LEFTP;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 455 "pnfha.lpp"
lval.put("0"); yylval = lval; return RIGHTP;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 457 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPEQUAL;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 459 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPPLUS;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 461 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPMINUS;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 463 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPTIMES;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 465 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPDIV;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 467 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPMODULUS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 469 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPPOWER;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 471 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPROOT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 473 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPINC;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 475 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPDEC;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 477 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPAND;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 479 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPAMP;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 481 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPOR;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 483 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPNOT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 485 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPCOLON;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 487 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPSUB;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 489 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPEQU;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 491 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPNEQU;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 493 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPLSS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 495 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPGTR;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 497 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPLEQU;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 499 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPGEQU;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 501 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPQUES;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 503 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPDOT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 505 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPLSQ;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 507 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPRSQ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 509 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPSTR;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 511 "pnfha.lpp"
lval.put("0"); yylval = lval; return VAR;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 513 "pnfha.lpp"
lval.put("0"); yylval = lval; return PRINT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 515 "pnfha.lpp"
lval.put("0"); yylval = lval; return PRINTLN;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 517 "pnfha.lpp"
lval.put("0"); yylval = lval; return EPRINT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 519 "pnfha.lpp"
lval.put("0"); yylval = lval; return EPRINTLN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 521 "pnfha.lpp"
lval.put("0"); yylval = lval; return END;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 523 "pnfha.lpp"
lval.put("0"); yylval = lval; return ASM;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 525 "pnfha.lpp"
lval.put("0"); yylval = lval; return LOAD;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 527 "pnfha.lpp"
lval.put("0"); yylval = lval; return GOTO;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 529 "pnfha.lpp"
lval.put("0"); yylval = lval; return ST;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 531 "pnfha.lpp"
lval.put("0"); yylval = lval; return PUSH;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 533 "pnfha.lpp"
lval.put("0"); yylval = lval; return POP;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 535 "pnfha.lpp"
lval.put("0"); yylval = lval; return TYPEOF;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 537 "pnfha.lpp"
lval.put("0"); yylval = lval; return ATOC;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 539 "pnfha.lpp"
lval.put("0"); yylval = lval; return SWITCH;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 541 "pnfha.lpp"
lval.put("0"); yylval = lval; return CSWITCH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 543 "pnfha.lpp"
lval.put("0"); yylval = lval; return CRASH;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 545 "pnfha.lpp"
lval.put("0"); yylval = lval; return VERSION;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 547 "pnfha.lpp"
lval.put("0"); yylval = lval; return HALT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 549 "pnfha.lpp"
lval.put("0"); yylval = lval; return MODT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 551 "pnfha.lpp"
lval.put("0"); yylval = lval; return RETURN;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 553 "pnfha.lpp"
lval.put("0"); yylval = lval; return GOSUB;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 555 "pnfha.lpp"
lval.put("0"); yylval = lval; return SUB;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 557 "pnfha.lpp"
lval.put("0"); yylval = lval; return EVENT;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 559 "pnfha.lpp"
lval.put("0"); yylval = lval; return UNREGISTER;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 561 "pnfha.lpp"
lval.put("0"); yylval = lval; return REGISTER;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 563 "pnfha.lpp"
lval.put("0"); yylval = lval; return REREGISTER;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 565 "pnfha.lpp"
lval.put("0"); yylval = lval; return STORE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 567 "pnfha.lpp"
lval.put("0"); yylval = lval; return IF;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 569 "pnfha.lpp"
{
			 lval.put("0");
			 yylval = lval;
			 return ELSE;
			}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 575 "pnfha.lpp"
lval.put("0"); yylval = lval; return CASE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 577 "pnfha.lpp"
lval.put("0"); yylval = lval; return CCASE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 579 "pnfha.lpp"
lval.put("0"); yylval = lval; return DEFAULT;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 581 "pnfha.lpp"
lval.put("0"); yylval = lval; return CDEFAULT;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 583 "pnfha.lpp"
lval.put("0"); yylval = lval; return BREAK;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 585 "pnfha.lpp"
lval.put("0"); yylval = lval; return LABEL;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 587 "pnfha.lpp"
lval.put("0"); yylval = lval; return WHILE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 589 "pnfha.lpp"
lval.put("0"); yylval = lval; return ADDRESSOF;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 591 "pnfha.lpp"
lval.put("0"); yylval = lval; return ADD2V;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 593 "pnfha.lpp"
lval.put("0"); yylval = lval; return STOREA;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 595 "pnfha.lpp"
lval.put("0"); yylval = lval; loopexpr = true; return DOWHILE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 597 "pnfha.lpp"
lval.put("0"); yylval = lval; loopexpr = true; return DOFOR;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 599 "pnfha.lpp"
lval.put("0"); yylval = lval; return FOR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 601 "pnfha.lpp"
lval.put("0"); yylval = lval; return FVAR;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 603 "pnfha.lpp"
lval.put("0"); yylval = lval; inforever = true; return FOREVER;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 605 "pnfha.lpp"
lval.put("0"); yylval = lval; return CONTINUE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 607 "pnfha.lpp"
lval.put("0"); yylval = lval; return CHECK;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 609 "pnfha.lpp"
lval.put("0"); yylval = lval; return HCMNT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 611 "pnfha.lpp"
lval.put("0"); yylval = lval; return FMODE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 613 "pnfha.lpp"
lval.put("0"); yylval = lval; return FOPEN;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 615 "pnfha.lpp"
lval.put("0"); yylval = lval; return FCLOSE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 617 "pnfha.lpp"
lval.put("0"); yylval = lval; return FEOF;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 619 "pnfha.lpp"
lval.put("0"); yylval = lval; return FPRINT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 621 "pnfha.lpp"
lval.put("0"); yylval = lval; return FPRINTLN;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 623 "pnfha.lpp"
lval.put("0"); yylval = lval; return FREAD;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 625 "pnfha.lpp"
lval.put("0"); yylval = lval; return MEML;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 627 "pnfha.lpp"
lval.put("0"); yylval = lval; return ENUM;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 629 "pnfha.lpp"
lval.put("0"); yylval = lval; return ENUMV;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 631 "pnfha.lpp"
lval.put("0"); yylval = lval; return RANGE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 633 "pnfha.lpp"
lval.put("0"); yylval = lval; return RANGEV;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 635 "pnfha.lpp"
lval.put("0"); yylval = lval; return ARRAY;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 637 "pnfha.lpp"
lval.put("0"); yylval = lval; return BLANK;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 639 "pnfha.lpp"
lval.put("0"); yylval = lval; return PNFASM;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 641 "pnfha.lpp"
lval.put("0"); yylval = lval; return LENGTH;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 643 "pnfha.lpp"
lval.put("0"); yylval = lval; return DUP;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 645 "pnfha.lpp"
lval.put("0"); yylval = lval; return THEN;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 647 "pnfha.lpp"
lval.put("0"); yylval = lval; return ENDIF;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 649 "pnfha.lpp"
lval.put("0"); yylval = lval; return DONEIF;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 651 "pnfha.lpp"
lval.put("0"); yylval = lval; return FRET;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 653 "pnfha.lpp"
lval.put("0"); yylval = lval; return DEFAULTV;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 655 "pnfha.lpp"
lval.put("0"); yylval = lval; return DEFAULTV2;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 657 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return TYPE;
			}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 664 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return LTYPE;
			}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 671 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return GTYPE;
			}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 678 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return RTYPE;
			}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 685 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return VTYPE;
			}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 692 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return STYPE;
			}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 699 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return ATYPE;
			}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 706 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return CTYPE;
			}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 713 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return CMTYPE;
			}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 720 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return BFMODEC;
			}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 727 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FMODEC;
			}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 734 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return VTYPE2;
			}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 741 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return RTYPE2;
			}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 748 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FUNCTION;
			}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 755 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FUNCDEF;
			}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 762 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FUNCCALL;
			}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 769 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FPARAMETER;
			}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 777 "pnfha.lpp"
lval.put("0"); yylval = lval; return READ;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 779 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return ID;
			}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 786 "pnfha.lpp"
return PBIN;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 788 "pnfha.lpp"
return PPBIN;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 790 "pnfha.lpp"
return PLIB;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 792 "pnfha.lpp"
return PINCLUDE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 794 "pnfha.lpp"
return PIMPORT;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 796 "pnfha.lpp"
return PDEFINE;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 798 "pnfha.lpp"
return PMACRO;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 800 "pnfha.lpp"
return PENDM;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 802 "pnfha.lpp"
return PUNDEF;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 804 "pnfha.lpp"
return PIFDEF;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 806 "pnfha.lpp"
return PIFNDEF;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 808 "pnfha.lpp"
return PELSE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 810 "pnfha.lpp"
return PENDIF;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 812 "pnfha.lpp"
return PPDATE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 814 "pnfha.lpp"
return PPTIME;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 816 "pnfha.lpp"
return PPLINE;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 818 "pnfha.lpp"
return PPFILE;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 820 "pnfha.lpp"
return PPCDATE;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 822 "pnfha.lpp"
return PPCTIME;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 824 "pnfha.lpp"
{ 
		 ASTNode pp_statement("pp_statement");
		 pp_statement.conprint("' %s\n", yytext); 
		 tree.add_node(pp_statement); 
		}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 830 "pnfha.lpp"
return PPINCLUDE;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 832 "pnfha.lpp"
return PPIMPORT;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 834 "pnfha.lpp"
return PPDEFINE;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 836 "pnfha.lpp"
return PPMACRO;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 838 "pnfha.lpp"
return PPENDM;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 840 "pnfha.lpp"
return PPUNDEF;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 842 "pnfha.lpp"
return PPIFDEF;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 844 "pnfha.lpp"
return PPIFNDEF;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 846 "pnfha.lpp"
return PPELSE;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 848 "pnfha.lpp"
return PPENDIF;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 850 "pnfha.lpp"
return PPPDATE;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 852 "pnfha.lpp"
return PPPTIME;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 854 "pnfha.lpp"
return PPPLINE;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 856 "pnfha.lpp"
return PPPFILE;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 858 "pnfha.lpp"
return PPPCDATE;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 860 "pnfha.lpp"
return PPPCTIME;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 862 "pnfha.lpp"
{ 
		 ASTNode pp_statement("pp_statement");
		 pp_statement.conprint("'! %s\n", yytext); 
		 tree.add_node(pp_statement);
		}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 868 "pnfha.lpp"
{
			 inblock = true;
			 blockinstmt = true;
			 if ((!loopexpr || midloop != 0) && !inloop && !infor && !inforever && !intop && !inif)
			 {
			  ++scope;
			  varTable.insert();
			  varTable[scope].insert();
			  ++midloop;
			 }

			 lval.put("0");
			 yylval = lval;
			 return LEFTB;
			}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 884 "pnfha.lpp"
{
			 if ((!loopexpr || midloop != 0) && !inloop && !infor && !inforever && !intop && !inif)
			 {
			  --scope;
			  varTable.remove();
			  --midloop;
			 }
			 else
			 {
			  if (infor)
			  {
			   --inforfor;
			   if (inforfor == 0)
			    infor = false;
			  }

			  if (loopexpr)
			   inloop = true;
			  else
			   inloop = false;

			  loopexpr = false;
			  inforever = false;

			  if (intop)
			  {
			   --intopfor;
			   if (intopfor == 0)
			    intop = false;
			  }
			 }

			 lval.put("0");
			 yylval = lval;
			 inblock = false;
			
			 return RIGHTB;
			}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 923 "pnfha.lpp"
/* Eat up Whitespace */
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 925 "pnfha.lpp"
/* Eat up comment */
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 927 "pnfha.lpp"
{
			 String str = "Scan error: ";
			 str += yytext;
			 yyerror(str.getString().c_str());

			 lval.put("0");
			 yylval = lval;
			}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 936 "pnfha.lpp"
ECHO;
	YY_BREAK
#line 2218 "pnfha.cpp"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 716 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 716 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 715);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 936 "pnfha.lpp"

/* Additional Code */
int main(int argc, char ** argv)
{
 try
 {
  yydebug = 0;


  varTable[scope].insert();


  if (argc == 3)
  {
   String extension = get_extension(argv[1]);
   if (extension == ".pppha")
    preprocess(argv[1]);

   FILE * input = fopen((strip_extension(argv[1]) + ".pha").getString().c_str(), "r");
   if (!input)
   {
    yyerror("can't open file");
    return -1;
   }
   yyin = input;
   output = fopen(argv[2], "w");
   if (!output)
   {
    yyerror("can't open file for write");
    return -1;
   }
   fprintf(output, "VERSION TVOID 1\n\n\n");

  
   int ret = yyparse();
   //generate_pcode(false);
   //generate_switch_code();
   //generate_comment_code();
   generate_code();


   fprintf(output, "\n\nEND TVOID 0V");
   fclose(output);
   return ret;
  }
  else
   yyerror("can't find input file or output file.");
 }
 catch (Exception e)
 {
  e.display();
 }
}

void yyerror(char const * c)
{
 cout << "* ERROR: " << yylineno << ": " << c << endl;
}

String get_extension(String fileName)
{
 unsigned long index = fileName.getString().find(".");
 if (index == string::npos)
  yyerror((char *)"File has No Extension.");

 String extension = fileName.getString().substr(index);


 return extension;
}

String strip_extension(String fileName)
{
 unsigned long index = fileName.getString().find(".");
 if (index == string::npos)
  yyerror((char *)"File has No Extension.");

 String stripped = fileName.getString().substr(0, index);


 return stripped;
}

void preprocess(String arg)
{ 
 _spawnl(_P_WAIT, "pnfpp.exe", "pnfpp.exe", (strip_extension(arg) + (char *)".pppha").getString().c_str(), 
 		 (strip_extension(arg) + (char *)".pha").getString().c_str(), NULL);
}

int conprint(const char * format, ...)
{
 va_list arg;
 int done = 0;

 va_start(arg, format);

 out.insert();
 done = vsnprintf(outbuffer, 256, format, arg);
 String str = "";
 if (outbuffer != NULL)
  str += outbuffer;
 out[outcount] = str;
 ++outcount;

 va_end(arg);


 return done;
}

void generate_code()
{
 unsigned long len = out.length();
 for (unsigned long i = 0; i < out.length(); ++i)
 {
  if (out[i].getString() == "")
   out.remove(i);
 }

 for (unsigned long i = 0; i < out.length(); ++i)
 {
  fprintf(output, "%s", out[i].getString().c_str());
 }
}

void movelineno(unsigned long index, unsigned long line)
{
 unsigned long i;
 for (i = 0; i < out.length(); ++i)
 {
  if (i < statementlineno.length())
   if (statementlineno[i] == line)
    break;
 }
 cout << i << endl;
 //out.move(index, i);
}

void sort(Array<unsigned long> & array)
{
 bool changed = false;
 do
 {
  changed = false;
  for (unsigned long i = 0; (i + 1) < array.length(); ++i)
  {
   if (array[i + 1] < array[i])
   {
    swap(array[i], array[i + 1]);
    changed = true;
   }
  }
 } while (changed == true);
}

void sort_lines(Array<String> & array)
{
 bool changed = false;
 do
 {
  changed = false;
  for (unsigned long i = 0; (i + 1) < array.length(); ++i)
  {
   String str;
   str = array[i];
   unsigned long k = str.getString().find(':');
   if (k == string::npos)
   {
    continue;
   }
   str = array[i].getString().substr(k + 2);
   unsigned long l = atoi(str.getString().c_str());

   str = array[i + 1];
   k = str.getString().find(':');
   if (k == string::npos)
   {
    continue;
   }
   str = array[i + 1].getString().substr(k + 2);
   unsigned long l2 = atoi(str.getString().c_str());

   if (l2 < l)
   {
    String temp1 = array[i], temp2 = array[i + 1];
    array[i] = temp2;
    array[i + 1] = temp1;

    changed = true;
   }
  }
 } while (changed == true);
}

void generate_pcode(bool names)
{
 unsigned long len = tree.nodenumber();

 for (unsigned long i = 0; i < len; ++i)
 {
  ASTNode node(tree.getNode(i));
  String nodename = node.getName();
  nodename += ":\n\n";
  if (names)
   conprint("%s", nodename.getString().c_str());

  for (unsigned long j = 0; j < node.getValue().length(); ++j)
   conprint("%s", node.getValue()[j].getString().c_str());
 }
}

void generate_switch_code()
{
 /*
  1. Determine if there is a switch or not. Do other steps only if there is a switch.
  2. Find highest switch_case.
  3. Replace the skip_switch_case that is higher than that with GOTOL TSTRING default_switch_(switchcount).
 */
 // Step 1
 if (switchfound)
 {
  // Step 2
  String num;
  String num2;
  String underscore = "_";
  String str;
  unsigned long j = 0;
  for (unsigned long i = 0; i < out.length(); ++i)
  {
   num.from_long(i);
   String line = out[i].getString();
   for (unsigned long k = 1; k <= switchcounter; ++k)
   {
    num2.from_long(k);
    str = (String)"LBL TSTRING \"switch_case_" + num2 + underscore + num + (String)"\"\n";
   
    for (unsigned long l = 0; l < out.length(); ++l)
    {
     if (out[l] == str)
      ++j;
    }
   }
  }

  // Step 3
  for (unsigned long i = 0; i < out.length(); ++i)
  {
   String line = out[i];
   num.from_long(j + 1);

   for (unsigned long k = 1; k <= switchcounter; ++k)
   {
    num2.from_long(k);
    str = (String)"GOTOL TSTRING \"skip_switch_case_" + num2 + underscore + num + (String)"\"\n";
   
    for (unsigned long l = 0; l < out.length(); ++l)
    {
     if (out[l] == str)
      j = l;
    }
   }
  }

  String num3;
  num3.from_long(switchcounter);
  Array<String> out2;
  for (unsigned long i = 0, k = 0; i < out.length(); ++i)
  {
   if (i != j)
   {
    out2[k] = out[i];
    ++k;
    out2.insert();
   }
   else
   {
    out2[k] = "GOTOL TSTRING \"default_switch_";
    out2[k] += num3;
    out2[k] += "\"\n";
    ++k;
    out2.insert();
   }
  }
  out = out2;
 }
}

String strip_quotes(String str)
{
 String str2 = "";

 for (unsigned long i = 0; i < str.length(); ++i)
 {
  if (i == 0)
   continue;
  else if (i == str.length() - 1)
   continue;
  else
   str2 += str[i];
 }

 return str2;
}

void generate_comment_code()
{
 for (unsigned long i = 0; i < out.length(); ++i)
 {
  if (out[i][0] == ';' && out[i][1] == '\\')
  {
   String str = "";
   for (unsigned long j = 0; j < out[i].length(); ++j)
   {
    if (j == 1)
     continue;
    else
     str += out[i][j];
   }
   out[i] = str;
  }
 }
}