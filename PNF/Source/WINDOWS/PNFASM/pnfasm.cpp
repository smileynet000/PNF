#line 2 "pnfasm.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 262
#define YY_END_OF_BUFFER 263
static yyconst short int yy_acclist[337] =
    {   0,
      263,  261,  262,  260,  261,  262,  260,  262,  261,  262,
      261,  262,  261,  262,  261,  262,  256,  261,  262,  256,
      261,  262,  259,  261,  262,  261,  262,  261,  262,  261,
      262,  261,  262,  261,  262,  261,  262,  261,  262,  261,
      262,  261,  262,  261,  262,  261,  262,  261,  262,  261,
      262,  261,  262,  261,  262,  261,  262,  261,  262,  261,
      262,  261,  262,  261,  262,  261,  262,  261,  262,  261,
      262,  261,  262,  260,  258,  256,  256,  254,  259,  191,
       62,   74,  257,   22,  256,   46,   61,   54,   49,  189,
       97,  195,   84,   55,   57,  105,   53,  111,   81,   58,

       50,   48,   63,   76,   51,   79,   47,   80,    2,   22,
      182,  119,  126,  129,  130,   77,  190,   95,  174,   98,
       85,  176,   96,  101,  214,   59,   64,   27,   89,  103,
      106,  104,  122,   60,   31,  147,   44,   56,  219,   75,
       26,   30,  223,   52,  152,  166,  121,   24,  255,    3,
        5,   14,   10,  124,  115,  183,  210,  125,  128,   78,
       65,   25,  161,  123,   35,  173,  192,  175,  178,  109,
       99,  102,  100,  215,  148,  227,  142,   69,   87,   90,
       88,  163,  197,  135,   33,  179,   45,   68,  212,   67,
       28,  156,  177,   93,  211,   32,  200,  114,  136,  249,

       39,  132,   66,    4,   15,   12,    9,   11,  184,  188,
      118,  181,  127,   70,   37,   82,  172,   36,   86,  162,
      218,  138,  140,  231,  139,  141,  143,  159,  107,  117,
      193,  116,  185,  206,  213,   73,  220,   72,  155,  169,
      153,  167,  151,  165,  157,  171,  170,   91,   94,   92,
       43,   34,  180,  201,  203,  120,  112,  131,   41,  133,
       40,   71,    8,   13,  187,  149,  137,  113,   38,  145,
      244,  245,  240,  238,  229,  236,  234,  146,  196,  221,
      222,   29,  224,  228,  154,  168,  158,  160,  108,  186,
      207,  199,  205,  198,  251,  253,   23,   42,    1,   16,

       19,   18,   17,    7,   83,  216,  247,  237,  241,  233,
      230,  243,  144,  150,  164,  225,  226,  202,  250,  134,
       20,   21,    6,  194,  110,  217,  232,  246,  239,  242,
      235,  208,  204,  248,  209,  252
    } ;

static yyconst short int yy_accept[896] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   11,   13,   15,
       17,   20,   23,   26,   28,   30,   32,   34,   36,   38,
       40,   42,   44,   46,   48,   50,   52,   54,   56,   58,
       60,   62,   64,   66,   68,   70,   72,   74,   75,   75,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   77,   78,   79,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   84,   85,
       86,   87,   87,   87,   87,   87,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,

       88,   88,   88,   89,   90,   91,   91,   92,   92,   92,
       93,   93,   93,   93,   93,   94,   94,   94,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   97,   97,   97,   97,   98,   98,   99,
       99,   99,   99,  100,  100,  100,  101,  101,  102,  103,
      103,  103,  103,  104,  104,  104,  104,  104,  105,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  111,  111,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  113,  113,  113,
      113,  113,  114,  115,  116,  117,  118,  118,  118,  118,
      118,  119,  120,  121,  121,  122,  122,  122,  122,  123,
      123,  123,  124,  124,  124,  124,  124,  124,  124,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  126,  127,  128,  129,  129,  130,  130,
      130,  130,  131,  131,  131,  131,  131,  132,  132,  133,
      133,  134,  135,  136,  137,  137,  138,  138,  139,  139,
      139,  139,  139,  140,  140,  141,  142,  142,  142,  142,
      143,  143,  143,  143,  143,  144,  145,  145,  145,  145,
      146,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  148,  148,  148,  148,
      149,  149,  149,  149,  149,  149,  150,  150,  151,  152,

      152,  152,  152,  152,  152,  152,  152,  152,  153,  153,
      154,  154,  154,  154,  154,  154,  154,  155,  155,  155,
      156,  157,  157,  157,  157,  157,  158,  159,  159,  160,
      161,  162,  162,  163,  163,  164,  165,  166,  167,  168,
      169,  170,  170,  170,  170,  171,  171,  172,  172,  173,
      174,  175,  175,  175,  175,  175,  176,  176,  176,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  178,  179,  180,  181,  182,  182,  183,
      183,  183,  183,  184,  184,  185,  186,  187,  187,  187,

      188,  188,  189,  189,  190,  191,  192,  192,  192,  192,
      193,  193,  193,  193,  193,  193,  193,  194,  194,  195,
      195,  195,  195,  196,  197,  197,  197,  197,  197,  197,
      197,  198,  198,  198,  198,  199,  199,  199,  200,  201,
      201,  201,  201,  202,  202,  202,  203,  204,  204,  205,
      205,  205,  205,  205,  205,  205,  205,  206,  207,  207,
      207,  207,  208,  209,  210,  210,  211,  212,  212,  213,
      214,  215,  215,  215,  216,  216,  217,  218,  219,  220,
      221,  221,  221,  222,  222,  222,  223,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  226,
      227,  228,  229,  230,  231,  231,  232,  233,  234,  235,
      235,  236,  237,  238,  239,  239,  240,  241,  242,  243,
      243,  243,  244,  245,  246,  247,  248,  248,  248,  249,
      250,  251,  251,  252,  253,  254,  254,  254,  254,  254,
      255,  255,  256,  256,  257,  257,  257,  257,  257,  258,
      259,  259,  260,  261,  262,  263,  263,  263,  263,  263,
      263,  263,  263,  264,  265,  265,  265,  266,  267,  268,
      269,  269,  269,  270,  270,  270,  270,  271,  271,  271,
      271,  272,  272,  273,  274,  274,  274,  275,  275,  276,

      276,  277,  277,  277,  278,  278,  278,  279,  279,  280,
      280,  281,  282,  283,  283,  284,  285,  286,  287,  288,
      289,  290,  291,  292,  292,  293,  294,  294,  294,  295,
      295,  295,  296,  297,  298,  298,  299,  300,  300,  300,
      301,  302,  303,  304,  305,  305,  305,  306,  306,  307,
      307,  307,  307,  308,  308,  309,  309,  309,  310,  311,
      311,  312,  313,  314,  314,  315,  316,  317,  318,  318,
      319,  319,  320,  320,  321,  322,  323,  324,  325,  326,
      327,  328,  328,  329,  330,  331,  332,  333,  333,  334,
      334,  335,  336,  337,  337

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    1,    9,   10,
       11,    1,    1,    1,    1,   12,    1,   13,   14,   15,
       16,   17,   17,   17,   17,   17,   17,    1,   18,    1,
        1,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,   44,    1,   45,    1,   46,   47,

       48,   49,    1,    1,   50,    1,    1,   51,   52,   53,
       54,   55,    1,   56,   57,   58,   59,   60,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[61] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[899] =
    {   0,
        0,    0,  954,  955,   59,   62,  947,   47,   25,  947,
       73,   79,    0,   78,  914,   97,   79,  116,  133,  101,
       51,  148,  108,   98,  155,  915,  157,  911,  177,  179,
      200,  205,  923,  902,  893,  889,  896,   79,  937,  955,
      915,  914,  920,  211,  891,   46,  109,  893,  884,  927,
       94,  230,  237,  955,    0,  913,  903,  900,  114,  910,
      896,   79,  893,  897,  162,  899,  889,  894,  895,  905,
      881,  901,  882,  887,  897,  155,  895,  893,  171,  104,
      881,  877,  891,  876,  130,  236,   85,  891,  235,  204,
      242,  876,  887,  875,  871,  872,  877,  241,  883,  875,

      881,   48,  879,  241,  878,  862,  877,  869,  863,  877,
      859,  864,  871,  863,  854,  856,  857,  851,  955,  238,
      855,  848,  130,  858,  848,  856,  851,  245,  258,  846,
      848,  841,  846,  842,  839,  843,  843,  850,  835,  839,
      850,  263,  837,  842,  835,  828,   41,  833,  831,  247,
      837,  827,  829,  833,  824,  250,  826,  806,  807,  796,
      798,  822,  832,  824,  185,  831,  822,  821,  820,  797,
      788,  797,  244,  788,  796,  795,  793,  955,    0,  285,
      824,  816,  802,  805,  816,  955,  188,  802,  804,  813,
      258,  800,  789,  797,  793,  274,  798,  793,  788,  794,

      787,  789,  955,  955,  955,  799,  955,  798,  782,  955,
      796,  788,  797,  785,  787,  783,  269,  955,  782,  274,
      780,  778,  787,  785,  785,  783,  782,  775,  784,  185,
      773,  769,  768,  766,  768,  283,  768,  764,  762,  767,
      285,  755,  760,  955,  754,  768,  767,  765,  764,  763,
      763,  752,  955,  760,  282,  745,  955,  749,  955,  750,
      746,  756,  955,  739,  754,  955,  746,  289,  955,  747,
      735,  735,  955,  752,  749,  732,  738,  955,  955,  736,
      740,  728,  739,  732,  725,  739,  738,  721,  726,  738,
      726,  718,  731,  296,  303,  715,  302,  720,  716,  955,

      297,  310,  727,  718,  711,  715,  727,  726,  714,  708,
      709,  714,  717,  717,  955,  715,  701,  717,  713,  707,
      701,  699,  694,  673,  955,  681,  671,  720,  719,  694,
      705,  696,  685,  692,  689,  689,  668,  669,  284,  668,
      668,  660,  662,  656,  663,    0,  671,  955,  686,  683,
      685,  673,  674,  685,  671,  667,  955,  668,  678,  667,
      661,  955,  955,  955,  668,  955,  664,  672,  668,  670,
      672,  955,  955,  669,  955,  668,  666,  664,  651,  653,
      654,  955,  649,  648,  645,  662,  658,  646,  955,  641,
      647,  647,  640,  645,  654,  640,  647,  648,  646,  645,

      644,  311,  317,  317,  643,  633,  320,  632,  641,  639,
      630,  638,  955,  955,  630,  955,  636,  955,  620,  626,
      624,  634,  634,  627,  615,  628,  955,  630,  955,  615,
      955,  955,  333,  955,  610,  955,  607,  955,  613,  614,
      617,  610,  955,  604,  955,  955,  617,  617,  619,  955,
      623,  601,  605,  612,  955,  955,  600,  597,  596,  955,
      955,  600,  607,  606,  604,  603,  602,  605,  600,  597,
      598,  584,  596,  587,  593,  594,  594,  585,  578,  590,
      591,  583,  576,  586,  575,  955,  585,  578,  582,  955,
      572,  567,  568,  568,  551,  955,  548,  955,  955,  590,

      559,  565,  571,  570,  569,  568,  537,  955,  540,  955,
      539,  539,  530,  526,  530,  534,  955,  549,  544,  955,
      955,  543,  557,  559,  540,  955,  955,  541,  955,  955,
      546,  543,  955,  541,  955,  955,  551,  955,  548,  955,
      955,  533,  532,  545,  955,  545,  546,  528,  955,  955,
      955,  545,  534,  527,  525,  955,  537,  528,  955,  529,
      310,  526,  537,  532,  531,  534,  533,  528,  519,  530,
      508,  520,  523,  526,  525,  520,  510,  510,  504,  516,
      507,  500,  955,  955,  516,  955,  955,  498,  955,  512,
      506,  509,  955,  509,  955,  955,  955,  511,  326,  955,

      506,  499,  503,  955,  497,  496,  309,  350,  489,  955,
      492,  352,  356,  507,  484,  497,  955,  497,  955,  481,
      487,  485,  955,  353,  488,  495,  490,  487,  489,  491,
      955,  483,  485,  488,  955,  483,  474,  955,  955,  480,
      475,  470,  480,  463,  476,  955,  469,  443,  955,  473,
      472,  484,  483,  482,  481,  442,  955,  955,  440,  430,
      440,  955,  955,  955,  460,  955,  955,  463,  955,  955,
      955,  447,  459,  955,  453,  452,  955,  459,  955,  955,
      452,  448,  955,  458,  453,  955,  955,  452,  455,  450,
      450,  436,  433,  445,  438,  432,  429,  440,  442,  955,

      432,  438,  431,  425,  422,  423,  436,  433,  955,  955,
       91,  955,  955,  955,   94,  955,  955,  955,  955,  129,
      955,  955,  362,  955,  144,  955,  955,  955,  955,  160,
      334,  955,  955,  955,  955,  955,  367,  213,  210,  955,
      955,  298,  955,  955,  955,  328,  342,  330,  340,  955,
      356,  955,  346,  370,  367,  366,  353,  365,  955,  955,
      360,  955,  363,  372,  955,  341,  385,  386,  386,  387,
      388,  389,  955,  955,  397,  354,  955,  955,  955,  955,
      367,  373,  955,  373,  370,  377,  955,  371,  374,  373,
      955,  392,  955,  955,  389,  394,  955,  377,  955,  378,

      955,  393,  398,  955,  395,  384,  955,  389,  955,  400,
      955,  955,  955,  408,  409,  955,  955,  955,  955,  955,
      955,  955,  955,  407,  955,  955,  396,  399,  955,  398,
      393,  955,  955,  955,  400,  955,  955,  421,  422,  955,
      955,  955,  955,  955,  430,  412,  955,  405,  955,  401,
      415,  420,  955,  410,  955,  411,  416,  955,  955,  413,
      955,  955,  955,  416,  955,  955,  955,  955,  424,  955,
      409,  955,  424,  955,  955,  955,  955,  955,  955,  955,
      955,  418,  955,  955,  955,  955,  955,  421,  955,  415,
      955,  955,  955,  955,  450,  452,  453,  454

    } ;

static yyconst short int yy_def[899] =
    {   0,
      894,    1,  894,  894,  894,  894,  895,  894,  894,  896,
      894,  894,  897,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  895,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  897,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  898,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  898,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,    0,  894,  894,  894,  894

    } ;

static yyconst short int yy_nxt[1016] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    9,   10,    4,
        4,    4,   11,   12,   12,   12,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,    4,   23,   24,
       25,   26,   27,   28,   29,   30,   31,    4,   32,    4,
        4,    4,   33,    4,    4,    4,    4,    4,   34,    4,
        4,    4,    4,    4,   35,    4,    4,   36,    4,   37,
       38,   38,   38,   38,   38,   38,   41,  254,   44,   97,
      255,   45,   46,   98,   47,   42,   48,  310,  311,   43,
       38,   38,   38,   49,   52,   53,   53,   53,   53,   53,
       52,   53,   53,   53,   53,   53,  171,  179,  172,   56,

       57,   72,  178,  228,   58,   73,   59,  188,   60,  189,
       61,   54,   62,   63,   64,   66,   74,  229,   67,  808,
      112,   68,  214,   94,  809,  215,  107,  108,   69,  113,
      109,   70,   95,   71,   75,  114,  184,   96,   76,  110,
       77,  216,   78,  111,   79,  185,   80,  810,   81,   82,
       83,   84,  221,   87,   85,   88,   86,  173,  222,   89,
      174,  175,  278,   90,   91,   92,   99,   93,  100,  279,
      101,  102,  103,  115,  813,  120,  207,  116,  104,  117,
      192,  121,  105,  106,  193,  208,  118,  122,  123,  211,
      212,  124,  194,  195,  125,  127,  814,  196,  128,  129,

      130,  137,  213,  394,  138,  131,  331,  132,  133,  134,
      352,  139,  135,  136,  353,  140,  141,  395,  142,  143,
      144,  332,  235,  150,  236,  151,  819,  152,  145,  820,
      146,  165,  166,  153,  167,  147,  154,  155,  148,  168,
      156,  149,  180,  180,  180,  180,  180,  169,   52,   53,
       53,   53,   53,   53,  223,  231,  224,  232,  225,  246,
      226,  257,  237,  247,  233,  248,  234,  284,  314,  258,
      227,  238,  274,  239,  275,  249,  286,  259,  357,  250,
      285,  315,  301,  302,  303,  304,  321,  322,  287,  305,
      340,  380,  383,  358,  288,  381,  341,  180,  180,  180,

      180,  180,  363,  412,  401,  384,  402,  403,  364,  435,
      425,  404,  426,  405,  458,  406,  460,  461,  407,  470,
      463,  413,  726,  727,  464,  436,  465,  459,  472,  473,
      561,  471,  474,  509,  821,  510,  466,  562,  565,  569,
      467,  573,  689,  563,  690,  564,  822,  566,  570,  567,
      574,  568,  575,  596,  576,  597,  577,  815,  719,  598,
      825,  578,  720,  728,  729,  732,  733,  826,  599,  734,
      735,  743,  816,  744,  823,  745,  811,  812,  824,  746,
      817,  818,  827,  828,  829,  830,  831,  832,  747,  833,
      834,  835,  836,  837,  838,  839,  840,  841,  842,  843,

      844,  845,  846,  847,  848,  849,  850,  851,  852,  853,
      854,  855,  856,  857,  858,  859,  860,  861,  862,  863,
      864,  865,  866,  867,  868,  869,  870,  871,  872,  873,
      874,  875,  876,  877,  878,  879,  880,  881,  882,  883,
      884,  885,  886,  887,  888,  889,  890,  891,  892,  893,
       39,   39,   50,   55,  346,  807,  806,  805,  804,  803,
      802,  801,  800,  799,  798,  797,  796,  795,  794,  793,
      792,  791,  790,  789,  788,  787,  786,  785,  784,  783,
      782,  781,  780,  779,  778,  777,  776,  775,  774,  773,
      772,  771,  770,  769,  768,  767,  766,  765,  764,  763,

      762,  761,  760,  759,  758,  757,  756,  755,  754,  753,
      752,  751,  750,  749,  748,  742,  741,  740,  739,  738,
      737,  736,  731,  730,  725,  724,  723,  722,  721,  718,
      717,  716,  715,  714,  713,  712,  711,  710,  709,  708,
      707,  706,  705,  704,  703,  702,  701,  700,  699,  698,
      697,  696,  695,  694,  693,  692,  691,  688,  687,  686,
      685,  684,  683,  682,  681,  680,  679,  678,  677,  676,
      675,  674,  673,  672,  671,  670,  669,  668,  667,  666,
      665,  664,  663,  662,  661,  660,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  650,  649,  648,  496,  647,

      646,  645,  644,  643,  642,  641,  640,  639,  638,  637,
      636,  635,  634,  633,  632,  631,  630,  629,  628,  627,
      626,  625,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  603,  602,  601,  600,  595,  594,  593,
      592,  591,  590,  589,  588,  587,  586,  585,  584,  583,
      582,  581,  580,  579,  572,  571,  560,  559,  558,  557,
      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,
      546,  545,  544,  543,  542,  541,  540,  539,  538,  537,
      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,

      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  513,  512,  511,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  498,  497,  496,  495,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      469,  468,  462,  457,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  434,  433,  432,  431,  430,  429,
      428,  427,  424,  423,  422,  421,  420,  419,  418,  417,
      416,  415,  414,  411,  410,  409,  408,  400,  399,  398,

      397,  396,  393,  392,  391,  390,  389,  388,  387,  386,
      385,  382,  379,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  368,  367,  366,  365,  362,  361,  360,
      359,  356,  355,  354,  351,  350,  349,  348,  347,  345,
      344,  343,  342,  339,  338,  337,  336,  335,  334,  333,
      330,  329,  328,  327,  326,  325,  324,  323,  320,  319,
      318,  317,  316,  313,  312,  309,  308,  307,  306,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  283,  282,  281,  280,  277,  276,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,

      260,  256,  253,  252,  251,  245,  244,  243,  242,  241,
      240,  230,  220,  219,  218,  217,  210,  209,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  197,  191,  190,
      187,  186,  183,  182,  181,  178,  177,  176,  170,  164,
      163,  162,   40,  161,  160,  159,  158,  157,  126,  119,
       65,   51,   40,  894,    3,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894
    } ;

static yyconst short int yy_chk[1016] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,    5,    5,    6,    6,    6,    8,  102,    9,   21,
      102,    9,    9,   21,    9,    8,    9,  147,  147,    8,
       38,   38,   38,    9,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   12,   12,   12,   46,   51,   46,   14,

       14,   17,   51,   87,   14,   17,   14,   62,   14,   62,
       14,   11,   14,   14,   14,   16,   17,   87,   16,  711,
       24,   16,   80,   20,  715,   80,   23,   23,   16,   24,
       23,   16,   20,   16,   18,   24,   59,   20,   18,   23,
       18,   80,   18,   23,   18,   59,   18,  720,   18,   18,
       18,   18,   85,   19,   18,   19,   18,   47,   85,   19,
       47,   47,  123,   19,   19,   19,   22,   19,   22,  123,
       22,   22,   22,   25,  725,   27,   76,   25,   22,   25,
       65,   27,   22,   22,   65,   76,   25,   27,   27,   79,
       79,   27,   65,   65,   27,   29,  730,   65,   29,   29,

       29,   30,   79,  230,   30,   29,  165,   29,   29,   29,
      187,   30,   29,   29,  187,   30,   30,  230,   30,   31,
       31,  165,   90,   32,   90,   32,  738,   32,   31,  739,
       31,   44,   44,   32,   44,   31,   32,   32,   31,   44,
       32,   31,   52,   52,   52,   52,   52,   44,   53,   53,
       53,   53,   53,   53,   86,   89,   86,   89,   86,   98,
       86,  104,   91,   98,   89,   98,   89,  128,  150,  104,
       86,   91,  120,   91,  120,   98,  129,  104,  191,   98,
      128,  150,  142,  142,  142,  142,  156,  156,  129,  142,
      173,  217,  220,  191,  129,  217,  173,  180,  180,  180,

      180,  180,  196,  241,  236,  220,  236,  236,  196,  268,
      255,  236,  255,  236,  294,  236,  295,  295,  236,  301,
      297,  241,  607,  607,  297,  268,  297,  294,  302,  302,
      402,  301,  302,  339,  742,  339,  297,  402,  403,  404,
      297,  407,  561,  402,  561,  402,  746,  403,  404,  403,
      407,  403,  407,  433,  407,  433,  407,  731,  599,  433,
      748,  407,  599,  608,  608,  612,  612,  749,  433,  613,
      613,  624,  731,  624,  747,  624,  723,  723,  747,  624,
      737,  737,  751,  753,  754,  755,  756,  757,  624,  758,
      761,  763,  764,  766,  767,  768,  769,  770,  771,  772,

      775,  776,  781,  782,  784,  785,  786,  788,  789,  790,
      792,  795,  796,  798,  800,  802,  803,  805,  806,  808,
      810,  814,  814,  815,  815,  824,  827,  828,  830,  831,
      835,  838,  839,  845,  846,  848,  850,  851,  852,  854,
      856,  857,  860,  864,  869,  871,  873,  882,  888,  890,
      895,  895,  896,  897,  898,  708,  707,  706,  705,  704,
      703,  702,  701,  699,  698,  697,  696,  695,  694,  693,
      692,  691,  690,  689,  688,  685,  684,  682,  681,  678,
      676,  675,  673,  672,  668,  665,  661,  660,  659,  656,
      655,  654,  653,  652,  651,  650,  648,  647,  645,  644,

      643,  642,  641,  640,  637,  636,  634,  633,  632,  630,
      629,  628,  627,  626,  625,  622,  621,  620,  618,  616,
      615,  614,  611,  609,  606,  605,  603,  602,  601,  598,
      594,  592,  591,  590,  588,  585,  582,  581,  580,  579,
      578,  577,  576,  575,  574,  573,  572,  571,  570,  569,
      568,  567,  566,  565,  564,  563,  562,  560,  558,  557,
      555,  554,  553,  552,  548,  547,  546,  544,  543,  542,
      539,  537,  534,  532,  531,  528,  525,  524,  523,  522,
      519,  518,  516,  515,  514,  513,  512,  511,  509,  507,
      506,  505,  504,  503,  502,  501,  500,  497,  495,  494,

      493,  492,  491,  489,  488,  487,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      459,  458,  457,  454,  453,  452,  451,  449,  448,  447,
      444,  442,  441,  440,  439,  437,  435,  430,  428,  426,
      425,  424,  423,  422,  421,  420,  419,  417,  415,  412,
      411,  410,  409,  408,  406,  405,  401,  400,  399,  398,
      397,  396,  395,  394,  393,  392,  391,  390,  388,  387,
      386,  385,  384,  383,  381,  380,  379,  378,  377,  376,
      374,  371,  370,  369,  368,  367,  365,  361,  360,  359,

      358,  356,  355,  354,  353,  352,  351,  350,  349,  347,
      345,  344,  343,  342,  341,  340,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  326,  324,
      323,  322,  321,  320,  319,  318,  317,  316,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  303,
      299,  298,  296,  293,  292,  291,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  277,  276,  275,
      274,  272,  271,  270,  267,  265,  264,  262,  261,  260,
      258,  256,  254,  252,  251,  250,  249,  248,  247,  246,
      245,  243,  242,  240,  239,  238,  237,  235,  234,  233,

      232,  231,  229,  228,  227,  226,  225,  224,  223,  222,
      221,  219,  216,  215,  214,  213,  212,  211,  209,  208,
      206,  202,  201,  200,  199,  198,  197,  195,  194,  193,
      192,  190,  189,  188,  185,  184,  183,  182,  181,  177,
      176,  175,  174,  172,  171,  170,  169,  168,  167,  166,
      164,  163,  162,  161,  160,  159,  158,  157,  155,  154,
      153,  152,  151,  149,  148,  146,  145,  144,  143,  141,
      140,  139,  138,  137,  136,  135,  134,  133,  132,  131,
      130,  127,  126,  125,  124,  122,  121,  118,  117,  116,
      115,  114,  113,  112,  111,  110,  109,  108,  107,  106,

      105,  103,  101,  100,   99,   97,   96,   95,   94,   93,
       92,   88,   84,   83,   82,   81,   78,   77,   75,   74,
       73,   72,   71,   70,   69,   68,   67,   66,   64,   63,
       61,   60,   58,   57,   56,   50,   49,   48,   45,   43,
       42,   41,   39,   37,   36,   35,   34,   33,   28,   26,
       15,   10,    7,    3,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "pnfasm.lpp"
#define INITIAL 0
#line 4 "pnfasm.lpp"
/* Prologue */
/*
Copyright (C) 2019 Dennis Earl Smiley

This file is part of pnfasm.

    pnfasm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pnfasm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pnfasm.  If not, see <https://www.gnu.org/licenses/>. 
*/

/*
 CHANGELOG
 =========
 
 5/25/15 Origional a 	- The first version.
 5/25/15 Origional a-a	- Removed ADDSTORE instruction. 2 instructions did the same thing.
 7/27/15 Original a-a-a - Added support for a type1 range.
 7/30/15 Original  a-a-b - 1. Added support for a type1 range implementation.
			   2. Added support for RLOAD1 and RSTORE1.
			   3. Added features to fix bugs...
			   4. Added support for a type2 range
			   5. Added support for a type2 range implementation
			   6. Added support for RPREP2 and RLOAD2
			   7. Added support for enums
			   8. Added support for enum implementations
			   9. Added support for other enum instructions
			  10. Added support for arrays
			  11. Added support for other array functions
			  12. Changed array definition.
			  13. Added version mechinism.

3/25/17 Original a-a-c - 1. Added support for preprocessor.
			 2. Debugged the code...
			 3. Added support for automatic preprocessing...
			 4. Fixed bugs...
			 5. Added LIB directive...
			 6. Fixed bugs...
			 7. Added IFs.
			 8. Added switches.
			 9. Added more stack instructions.
			10. Made Linux compatable.
			11. Added PATCH and NATIVE.

12/9/19 Origional a-a-d 1. Added FDECL and FRETS instructions.
			2. Added FDEF, FDEF2, FEDEF2 and FEDEF instructions.
			3. Added PARAMF2 instruction.
			4. Added more function instructions.
			5. Added documentation.
			6. Added FNCPOINT and FNCLENGTH.
			7. Fixed bugs...
			8. Took out "extra" instructions.
			9. Took out extra instructions.
		       10. Added FNCFIND.
		       11. Added FNCFRET and FNCFPARAM.
*/
/*
 IVERSION   - Switches versions. It's not possible to switch versions yet, because it's the first version.
              VERSION TVOID 0V

 IVOID      - Does nothing.
              VOID TVOID 0V

 ICRASH     - Intentional crash of program.
              CRASH TSTRING [string]

 IQUIT      - Quits the program. Returns return value.
              QUIT TVOID [return value]

 IHALT      - Halts the system by entering a forever loop.
              HALT TVOID 0V

 IPRINT     - Prints the specified value or the contents of the accumulator.
              PRINT TVOID 0V
              PRINT TBOOLEAN [data]
              PRINT TNUMBER [data]
              PRINT TCHARACTER [data]
              PRINT TSTRING [data]

 IPRINTLN   - Prints the specified value or the contents of the accumulator,
              then a newline.
              PRINTLN TVOID 0V
              PRINTLN TBOOLEAN [data]
              PRINTLN TNUMBER [data]
              PRINTLN TCHARACTER [data]
              PRINTLN TSTRING [data]

 IREAD      - Reads in a value to the accumulator.
              READ [type] 0V

 ILOAD      - Loads a value from memory into the accumulator.
              LOAD [type] [address]

 ISTORE     - Stores the contents of the accumulator at the specified memory
              location.
              STORE TVOID [address]

 ILOADC     - Loads a value from memory into the %calc register.
              LOADC [type] [address]

 ISTOREC    - Stores the contents of the %calc register into the specified
              memory location.
              STOREC TVOID [address]

 IESTORE    - Stores the contents of %accumulator into [%ecount + 3].
              ESTORE TVOID 0V

 IESTOREC    - Stores the contents of %calc into [%ecount + 3].
               ESTOREC TVOID 0V

 IVLOAD      - Gets a variable from variable location %operand, and stores it in
               %accumulator.
               VLOAD [type] [Variable Address]

 IVSTORE     - Stores a new variable from %accumulator to the next location.
               VSTORE TVOID 0V
               VSTORE TNUMBER [variable number]

 IVLOADC     - Gets a variable from variable location %operand, and stores it in
               %calc.
               VLOADC [type] [Variable Address]

 IVSTOREC    - Stores a new variable from %calc to the next location.
               VSTOREC TVOID 0V
               VSTOREC TNUMBER [variable number]

 ISTOREA     - Stores %accumulator to the address pointed at by %calc.
 	       STOREA TVOID 0V

 IMODT       - Modifies the type of %accumulator.
               MODT [type] 0V

 IMODCT      - Modifies the type of %calc.
               MODCT [type] 0V

 IADD       - Adds %calc or other value to %accumulator.
              ADD TVOID 0V
              ADD TNUMBER [data]
              ADD TCHARACTER [data]
              ADD TSTRING [data]

 ISUB       - Subtracts %calc from %accumulator.
              SUB VOID 0
              SUB TNUMBER [data]

 IMUL       - Multiplies %accumulator and %calc.
              MUL VOID 0
              MUL TNUMBER [data]

 IDIV       - Divides %calc by %accumulator.
              DIV VOID 0
              DIV TNUMBER [data]

 IMOD       - Takes a modulus of %accumulator and %calc.
              MOD VOID 0
              MOD TNUMBER [data]

 IPOW       - Raises %accumulator to the power of %calc.
              POW VOID 0
              POW TNUMBER [data]

 IROOT      - Root %accumulator by itself or the given number.
              SQRT VOID 0
              SQRT TNUMBER [data]

 IINC       - Increments %accumulator.
              INC TVOID 0V

 IDEC       - Decrements %accumulator.
              DEC TVOID 0V

 IEQU       - Tests if %accumulator == %calc.
              EQU TVOID 0V
              EQU TBOOLEAN [data]
              EQU TNUMBER [data]
              EQU TCHARACTER [data]

 INEQU      - Tests if %accumulator != %calc.
              NEQU TVOID 0V
              NEQU TBOOLEAN [data]
              NEQU TNUMBER [data]
              NEQU TCHARACTER [data]

 IGTR       - Tests if %accumulator > %calc.
              GTR TVOID 0V
              GTR TNUMBER [data]
              GTR TCHARACTER [data]

 ILSS       - Tests if %accumulator < %calc.
              LSS TVOID 0V
              LSS TNUMBER [data]
              LSS TCHARACTER [data]

 IGEQU       - Tests if %accumulator >= %calc.
               GEQU TVOID 0V
               GEQU TNUMBER [data]
               GEQU TCHARACTER [data]

 ILEQU       - Tests if %accumulator <= %calc.
               LEQU TVOID 0V
               LEQU TNUMBER [data]
               LEQU TCHARACTER [data]

 IAND        - %accumulator && %calc
               AND TVOID 0V

 IOR         - %accumulator || %calc
               OR TVOID 0V

 INOT        - !(%accumulator)
               NOT TVOID 0V

 IGOTO       - Go to the memory address specified and continue running the
               program from there.
               GOTO TVOID [memory address]

 ICGOTO       - Go to the memory address specified and continue running the
                program from there if %accumulator equals true.
                CGOTO TVOID [memory address]

 IZGOTO       - Go to the memory address specified if %accumulator is 0.
                ZGOTO TVOID [memory address]

 IPGOTO       - Go to the memory address specified if %accumulator is > 0.
                PGOTO TVOID [memory address]

 INGOTO       - Go to the memory address specified if %accumulator is < 0.
                NGOTO TVOID [memory address]

 IGOTOL        - Go to the label specified and continue running the
                 program from there.
                 GOTOL TVOID [label number]
                 GOTOL TSTRING [label string]               

 ICGOTOL       - Go to the label specified and continue running the
                 program from there if %accumulator equals true.
                 CGOTOL TVOID [label number]
                 CGOTOL TSTRING [label string

 IZGOTOL       - Go to the label specified if %accumulator is 0.
                 ZGOTOL TVOID [label number]
                 ZGOTOL TSTRING [label string]

 IPGOTOL       - Go to the memory address specified if %accumulator is > 0.
                 PGOTOL TVOID [label number]
                 PGOTOL TSTRING [label string]

 INGOTOL       - Go to the label specified if %accumulator is < 0.
                 NGOTOL TVOID [label number]
                 NGOTOL TSTRING [label string]

 IST           - Sets %accumulator to 0 if %calc is 0. (Used for loops.)
                 ST TVOID 0V

 IPUSH         - Put the accumulator on the stack.
                 PUSH TVOID 0V

 IPOP          - Loads a value into the accumulator from the stack.
                 POP TVOID 0V

 ICALL         - Calls a subroutine that begins at [memory address].
                 CALL TVOID [memory address]

 ICALLL        - Calls a subroutine that begins at [label].
                 CALLL TVOID [label]

 IRET          - Returns from a subroutine.
                 RET TVOID 0

 ILBL	       - Declares a label.
	         LBL TVOID 0V
                 LBL TSTRING [string]

 IVAR          - Declares a variable.
                 VAR TVOID [variable]

 IELBL         - Declares an event label.
                 ELBL TVOID 0V

 IEVLOAD       - Loads a value into %evalue.
                 EVLOAD TVOID [value]

 IHEADD        - Adds a Hardware Event to the table.
                 HEADD TVOID [event label number]

 IHEREM        - Removes a Hardware Event from the table.
                 HEREM TVOID 0V

 IHEED         - Edits a Hardware Event in the table. %evalue must be the hevent
                 number.
                 HEED TVOID [new event label number number]

 IHEGET        - Gets a Hardware Event event label number from the table. Puts it
                 in %evalue.
                 HEGET TVOID [hardware event number]

 ISHEADD       - Adds a System Hardware Event to the table.
                 SHEADD TVOID [event label number]

 ISHEREM       - Removes a System Hardware Event from the table.
                 SHEREM TVOID 0V

 ISHEED        - Edits a System Hardware Event in the table. %evalue must be the 
                 shevent number.
                 SHEED TVOID [new event label number number]

 ISHEGET       - Gets a System Hardware Event event label number from the table.
                 Puts it in %evalue.
                 SHEGET TVOID [hardware event number]

 IEADD        -  Adds an Event to the table.
                 EADD TVOID [event label number]

 IEREM         - Removes an Event from the table.
                 EREM TVOID 0V

 IEED          - Edits an Event in the table. %evalue must be the event number.
                 EED TVOID [new event label number number]

 IEGET         - Gets an Event event label number from the table. Puts it in \
                 %evalue.
                 EGET TVOID [hardware event number]

 IEXADD        - Adds an Exception to the table.
                 EXADD TVOID [event label number]

 IEXREM        - Removes an Exception from the table.
                 EXREM TVOID 0V

 IEXED         - Edits an Exception in the table. %evalue must be the exception
                 number.
                 EXED TVOID [new event label number number]

 IEXGET        - Gets an Exception event label number from the table. Puts it
                 in %evalue.
                 EXGET TVOID [hardware event number]

 IIADD         - Adds an Interrupt to the table.
                 IADD TVOID [event label number]

 IIREM         - Removes an Interrupt from the table.
                 IREM TVOID 0V

 IIED          - Edits an Interrupt in the table. %evalue must be the interrupt
                 number.
                 IED TVOID [new event label number number]

 IIGET         - Gets an Interrupt event label number from the table. Puts it
                 in %evalue.
                 IGET TVOID [hardware event number]
              
 IHEVENT       - Executes a Hardware Event subroutine.
                 HEVENT TVOID [hardware event number]

 ISHEVENT      - Executes a System Hardware Event Subroutine.
                 SHEVENT TVOID [system hardware event number]

 IEVENT        - Executes an Event subroutine.
          	 EVENT TVOID [event number]

 IEXCEPTION 	- Executes an Exception subroutine.
              	  EXCEPTION TVOID [exception number]

 IINT   	- Executes an Interrupt (User Defined Event) subroutine.
              	  INT TVOID [interrupt number]
                            
 ITYPEOF	- Puts the type of %accumulator in %typeof.
 		  TYPEOF TVOID 0V
 			  
 ICTYPEOF	- Puts the type of %calc in %typeof.
 		  CTYPEOF TVOID 0V
 			  
 ITLOAD         - Loads %typeof to %accumulator.
   	    	  TLOAD TVOID 0V

 IALOAD		- Loads a value into the accumulator.
 		  ALOAD TVOID 0V
 		  ALOAD TBOOLEAN [data]
 		  ALOAD TNUMBER [data]
 		  ALOAD TCHARACTER [data]
 		  ALOAD TSTRING [data]
 			  
 IINLOAD	- Loads %iname into %accumulator.
 		  INLOAD TVOID 0V
 			  
 IICLOAD	- Loads %icount into %accumulator.
 		  ICLOAD TVOID 0V
 			  
 IARLOAD	- Loads %arg[number] into %accumulator.
 		  ARLOAD TVOID [number]
 			  
 IELOAD		- Loads [%ecount + 3] to %accumulator.
 		  ELOAD TVOID 0V
 			  
 IELOADC	- Loads [%ecount + 3] to %calc.
 		  ELOADC TVOID 0V
 			  
 IATOC		- Puts %accumulator in %calc.
 		  ATOC TVOID 0V
 			  
 ISWITCH    	- Switches %accumulator and %calc.
 		  SWITCH TVOID 0V
 		
 IVADD		- Gets the address of the specified variable.
 		  VADD TVOID [variable number]
 			  
 ILADD		- Gets the address of the specified label.
 		  LADD TVOID [label number]
 			  
 IELADD		- Gets the address of the specified event label.
 		  ELADD TVOID [event label number]

 IADD2V	   	 - Retrieves the value at the address stored in %accumulator.
 	    	   ADD2V TVOID 0V
 			  
 IBTAND		- Performs bit AND on %accumulator and %calc.
 		  BTAND TVOID 0V
 			  
 IBTOR		- Performs bit OR on %accumulator and %calc.
 		  BTOR TVOID 0V
 			  
 IBTEXOR	- Performs bit exclusive OR on %accumulator and %calc.
 	 	  BTEXOR TVOID 0V
 			  
 IBTNOT		- Performs bit NOT on %accumulator.
		  BTNOT TVOID 0V
 			  
 IBTSL		- Performs << on %accumulator and %calc.
		  BTSL TVOID 0V
 			  
 IBTSR		- Performs >> on %accumulator and %calc.
		  BTSR TVOID 0V

 IVCHECK        - Sets %accumulator to true if version parameters match.
 	          VCHECK [type] [operand]

 IVSUPP	        - Checks to see if a version is supported.
 	          VSUPP [type] [operand]

 IVPRINT	- Prints the version.
		  VPRINT TVOID 0V

 IVPRINTLN	- Prints the version, then a newline.
		  VPRINTLN TVOID 0V

 IISUPP	    	- Checks to see if an instruction is supported or not.
 		  ISUPP TNUMBER [data]
 			  
 ITSUPP		- Checks to see if a type is supported or not.
 		  TSUPP TNUMBER [data]

 ICOMMENT   	- A comment in the code.
 		  COMMENT TSTRING [string]

 IFIMODE        - Sets the mode for file input.
 	          FIMODE TSTRING [mode]
 		
 IFOMODE        - Sets the mode for file output.
 	          FOMODE TSTRING [mode]
 			  
 IFIOPEN        - Opens the specified file for input. If VOID, gets it from %accumulator.
		  FIOPEN TVOID 0V
 	          FIOPEN TSTRING [filename]
 			  
 IFOOPEN        - Opens the specified file for output. If VOID, gets it from, %accumulator.
		  FOOPEN TVOID 0V
 	          FOOPEN TSTRING [filename]
 			  
 IFREAD	        - Reads a value from the file, and stores it in %accumulator.
 	          FREAD [type] 0V
 			  
 IFPRINT        - Prints a value to the file.
 	          FRPINT [type] [data]
 			  
 IFPRINTLN      - Prints a value to the file, then a newline.
 	          FPRINTLN [type] [data]

 IFICLOSE   	- Closes the input file that's open.
 		  FICLOSE TVOID 0V
 			  
 IFOCLOSE   	- Closes the output file that's open.
 		  FOCLOSE TVOID 0V

 IMEML		- Stores the length of memory in %accumulator.
 		  MEML TVOID 0V

 IFIEOF		- Tests if we are at EOF or not.
 		  FIEOF TVOID 0V

 IARNLOAD	- Loads the number of arguments into %accumulator.
 		  ARNLOAD TVOID 0V

 IRDSTART1      - Marks the start of a type1 range.
 		  RDSTART1 TSTRING [name]
 			  
 IRFROM1        - Specifies the type1 range from value.
 		  RFROM1 TNUMBER [num]
 			  
 IRTO1		- Specifies the type1 range to value.
 		  RTO1 TNUMBER [num]
 			  
 IRDEND1	- Marks the end of a type1 range.
                  RDEND1 TVOID 0V

 IRSTART1       - Marks the start of a type1 range implementation. Needs a definition name.
                  RSTART1 TSTRING [defname]
              
 IRANGE1        - Specifies the range implementation value for a type1 range. To be valid, number MUST be within the range values...
 		  RANGE1 TNUMBER [num]
 			  
 IREND1         - Marks the end of the type1 range implementation, and names it.
 		  REND1 TSTRING [name]

 IRLOAD1    	- Loads a value from a type1 range to %accumulator.
 		  RLOAD1 TSTRING [name]
 			  
 IRSTORE1   	- Stores a value from %accumulator to a type1 range.
 		  RSTORE TSTRING [name]

 IHEADDB	- Add num blank hardware events
 		  HEADDB TVOID [num]
 			  
 ISHEADDB	- Add num blank system hardware events
 		  SHEADDB TVOID [num]
 			  
 IEADDB		- Add num blank events
 	          EADDB TVOID [num]
 			  
 IEXADDB	- Add num blank exceptions
 		  EXADDB TVOID [num]
 			  
 IIADDB		- Add num blank system interrupts
 		  IADDB TVOID [num]

 IRDSTART2  	- Marks the start of a type2 range.
 		  RDSTART2 TSTRING [name]
 			  
 IRFROM2    	- Specifies the type2 range from value.
 		  RFROM2 TNUMBER [num]
 			  
 IRTO2		- Specifies the type2 range to value.
 		  RTO2 TNUMBER [num]
 			  
 IRDEND2	- Marks the end of a type2 range.
              	  RDEND2 TVOID 0V

 IRSTART2   	- Marks the start of a type2 range implementation. Needs a definition name.
              	  RSTART2 TSTRING [defname]
              
 IRANGE2    	- Specifies the range implementation value for a type2 range.
 		  RANGE2 TSTRING [name]

 IRPREP2	- Prepares the rt2prep register...
 		  RPREP2 TSTRING [name]
 			  
 IRLOAD2	- Loads a value from index to %accumulator
 		  RLOAD2 TNUMBER [index]

 IESTART	- Marks the start of an enum definition
 		  ESTART TSTRING [name]
 			  
 IENAME		- Specifies an enum definition name
 		  ENAME TSTRING [name]
 			  
 IEEND		- Marks the end of an enum definition
 		  EEND TVOID 0V

 IENUMS		- Marks the beginning of an enum implementation
 		  ENUMS TSTRING [defname]
 			  
 IENUM		- Sets the value for the enum implementation
 		  ENUM TSTRING [valuename]
 			  
 ISENUM		- Ends the enum implementation. Names it.
 		  SENUM TSTRING [name]

 IEPREP		- Prepares the etprep register...
 		  EPREP TSTRING [name]
 			  
 ILOADE		- Loads a value from an enum to %accumulator
 		  LOADE TVOID 0V
 			  
 ISTOREE	- Stores a value from %accumulator to an enum
 		  STOREE TVOID 0V

 IASTART	- Names the array to be defined.
 		  ASTART TSTRING [name] 			
 			  
 IAEND		- Marks the end of an array definition
 		  AEND TNUMBER [length]

 IAPREP		- Prepares %aprep register
 		  APREP TSTRING [name]
 			  
 IAIPREP	- Prepares %aiprep register. If TVOID, gets number from %accumulator.
 		  AIPREP TNUMBER [num]
		  AIPREP TVOID 0V
 			  
 ILOADIA	- Loads a value from an array to %accumulator
 		  LOADIA TVOID 0V
 			  
 ISTOREIA	- Stores a value from %accumulator to an array
 		  STOREIA TVOID 0V

 IALENGTH   	- Gets the length of an array and puts it in %accumulator
	      	  ALENGTH TVOID 0V

 IAPRINT        - Prints the contents of an array
	    	  APRINT TVOID 0V

 IDUP		- Sets %accumulator to %calc
		  DUP TVOID 0V

 ICDUP		- Sets %calc to %accumulator
		  CDUP TVOID 0V

 IIF	    - Branches to if block if %accumulator is true, otherwise either optional else block or the end of the if.
	      IF TVOID 0V

 IIFBEGIN    - Marks the begining of the if or else block.
	      IFBEGIN TVOID 0V

 IIFEND	     - Marks the end of the if or else block.
	       IFEND TVOID 0V

 IENDIF	     - Marks the end of the if.
	       ENDIF TVOID 0V

 IIFELSE     - Marks the beginning of the optional else block.
	       IFELSE TVOID 0V

 IENDIFELSE  - Marks the end of the optional else blcok.
	       ENDIFELSE TVOID 0V

 IEIF	     - Marks the end of the if/else.
	       EIF TVOID 0V

ISWITCH2    - Specifies that what follows is a switch statement.
               SWITCH2 TVOID 0V

 ISWBEGIN    - The switch statement block start.
               SWBEGIN TVOID 0V

 ISWEND      - The switch statement block end.
               SWEND TVOID 0V

 ISWCBEGIN   - The switch statement case block start.
               SWCBEGIN TVOID 0V

 ISWCEND     - The switch statement case block end.
               SWCEND TVOID 0V

 ISWCASE     - A switch statement case.
               SWCASE [type] [value]

 ISWDEFAULT  - A switch statement default case.
               SWDEFAULT TVOID 0V

 ISWBREAK    - Goes to the next SWEND or reg.ecount.
	       SWBREAK TVOID 0V

 ILOADSP     - Loads the specified stack position into %accumulator.
	       LOADSP TNUMBER [stackpos]

 ISTORESP    - Stores the specified stack position from %accumulator. Also mirrors the stack in %savestack.
	       STORESP TNUMBER [stackpos]

 ILOADSTACK  - Loads %savestack into the stack.
	       LOADSTACK TVOID 0V

 ISTORESTACK - Stores the stack in %savestack.
	       STORESTACK TVOID 0V

 IATOSP	     - Sends %accumulator to %stackp.
	       ATOSP TVOID 0V

 ISPTOA	     - Sends %stackp to %accumulator.
	       SPTOA TVOID 0V

 IPATCH	     - Applies a patch.
	       PATCH [type] [value]

 INATIVE     - Runs a native subroutine.
	       NATIVE TSTRING [subroutine name]

 IFRET	      - Returns from a function.
		FRET TVOID 0V

 IFCALL	      - Prepares to call function [name]
		FCALL TSTRING [name]

 IFCPARAMS    - The actual parameter block start.
		FCPARAMS TVOID 0V

 IFECPARAMS   - The actual parameter block end.
		FECPARAMS TVOID 0V

 IFECALL      - Makes the call to the function.
		FECALL TVOID 0V

 IPUNUM       - Allows us to specify an actual parameter number.
		PNUM TNUMBER [num]

 IPARAMF      - Specify an actual parameter.
		PARAMF [type] [value]

 IPARAMF2     - Load parameter specified by %pnum to %accumulator
		PARAMF2 TVOID 0V

 IRNUM	      - Specify a return value number
		RNUM TNUMBER [num]

 IRETURNF     - Modifies a value for return
		RETURNF [type] [value]

 IFNAME	      - Sets %fname
		FNAME TSTRING [name]

 IRETURNV     - Loads %accumulator with return value %rnum
		RETURNV TVOID 0V

 IFNCLOAD     - Loads a function from %fpointer1 to %fpointer2.
		FNCLOAD TNUMBER [num]

 IFNCSTORE    - Stores a function from %fpointer2 to %fpointer1
		FNCSTORE TNUMBER [num]
		FNCSTORE TVOID 0V

 IFNCNEW      - Adds a new Function on the C++ heap.
		FNCNEW TVOID 0V

 IFNCDELETE   - Deletes a new Function on the C++ heap.
		FNCDELETE TVOID 0V

 IFNCSNAME    - Sets the name of the function %fpointer2
		FNCSNAME TVOID 0V

 IFNCSRET     - Sets the return type of a return value in %fpointer.
		FNCSRET [type] 0V

 IFNCSPARAM   - Adds a parameter of type [type] to %fpointer2 with value %accumulator
		FNCSPARAM [type] 0V

 IFNCSDEF      - Adds a definition beginning at [where] or [label] to %fpointer2.
		 FNCSDEF TNUMBER [where]
		 FNCSDEF TSTRING [label]

 IFNCGNAME     - Gets the name of %fpointer2
		 FNCGNAME TVOID 0V

 IFNCGRET      - Gets a return value from %fpointer2
		 FNCGRET TNUMBER [num]

 IFNCGPARAM    - Gets a parameter value from %fpointer2
		 FNCGPARAM TNUMBER [num]

 IFNCGDEF      - Gets a definition address for %fpointer2
		 FNCGDEF TVOID 0V
*/
#include "pnfasm.tab.cpp"
/* Flex Definitions */
/* Flex Patterns Below %% */
#line 1705 "pnfasm.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 1303 "pnfasm.lpp"

#line 1858 "pnfasm.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 895 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 955 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1304 "pnfasm.lpp"
yylval = "-1"; return ASMVERSION;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1306 "pnfasm.lpp"
yylval = "-2"; return PNF;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1308 "pnfasm.lpp"
yylval = "-3"; return BIN;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1310 "pnfasm.lpp"
yylval = "-4"; return PBIN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1312 "pnfasm.lpp"
yylval = "-5"; return LIB;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 1314 "pnfasm.lpp"
yylval = "-6"; return PINCLUDE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 1316 "pnfasm.lpp"
yylval = "-7"; return PIMPORT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 1318 "pnfasm.lpp"
yylval = "-8"; return PDEFINE;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 1320 "pnfasm.lpp"
yylval = "-9"; return PMACRO;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 1322 "pnfasm.lpp"
yylval = "-10"; return PENDM;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1324 "pnfasm.lpp"
yylval = "-11"; return PUNDEF;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1326 "pnfasm.lpp"
yylval = "-12"; return PIFDEF;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1328 "pnfasm.lpp"
yylval = "-13"; return PIFNDEF;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1330 "pnfasm.lpp"
yylval = "-14"; return PELSE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1332 "pnfasm.lpp"
yylval = "-15"; return PENDIF;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1334 "pnfasm.lpp"
yylval = "-16"; return PPDATE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1336 "pnfasm.lpp"
yylval = "-17"; return PPTIME;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1338 "pnfasm.lpp"
yylval = "-18"; return PPLINE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1340 "pnfasm.lpp"
yylval = "-19"; return PPFILE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1342 "pnfasm.lpp"
yylval = "-20"; return PPCDATE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1344 "pnfasm.lpp"
yylval = "-21"; return PPCTIME;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1346 "pnfasm.lpp"
yylval = yytext; return PPCOMMENT;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1348 "pnfasm.lpp"
yylval = "0"; return IVERSION;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1350 "pnfasm.lpp"
yylval = "1"; return IVOID;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1352 "pnfasm.lpp"
yylval = "2"; return ICRASH;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1354 "pnfasm.lpp"
yylval = "3"; return IQUIT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1356 "pnfasm.lpp"
yylval = "4"; return IHALT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1358 "pnfasm.lpp"
yylval = "5"; return IPRINT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1360 "pnfasm.lpp"
yylval = "6"; return IPRINTLN;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1362 "pnfasm.lpp"
yylval = "7"; return IREAD;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1364 "pnfasm.lpp"
yylval = "8"; return ILOAD;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1366 "pnfasm.lpp"
yylval = "9"; return ISTORE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1368 "pnfasm.lpp"
yylval = "10"; return ILOADC;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1370 "pnfasm.lpp"
yylval = "11"; return ISTOREC;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1372 "pnfasm.lpp"
yylval = "12"; return IELOAD;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1374 "pnfasm.lpp"
yylval = "13"; return IESTORE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1376 "pnfasm.lpp"
yylval = "14"; return IELOADC;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1378 "pnfasm.lpp"
yylval = "15"; return IESTOREC;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1380 "pnfasm.lpp"
yylval = "16"; return IVLOAD;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1382 "pnfasm.lpp"
yylval = "17"; return IVSTORE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1384 "pnfasm.lpp"
yylval = "18"; return IVLOADC;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1386 "pnfasm.lpp"
yylval = "19"; return IVSTOREC;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 1388 "pnfasm.lpp"
yylval = "20"; return ISTOREA;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1390 "pnfasm.lpp"
yylval = "21"; return IMODT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 1392 "pnfasm.lpp"
yylval = "22"; return IMODCT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1394 "pnfasm.lpp"
yylval = "23"; return IADD;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1396 "pnfasm.lpp"
yylval = "24"; return ISUB;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1398 "pnfasm.lpp"
yylval = "25"; return IMUL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1400 "pnfasm.lpp"
yylval = "26"; return IDIV;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1402 "pnfasm.lpp"
yylval = "27"; return IMOD;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1404 "pnfasm.lpp"
yylval = "28"; return IPOW;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1406 "pnfasm.lpp"
yylval = "29"; return IROOT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1408 "pnfasm.lpp"
yylval = "30"; return IINC;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1410 "pnfasm.lpp"
yylval = "31"; return IDEC;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 1412 "pnfasm.lpp"
yylval = "32"; return IEQU;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1414 "pnfasm.lpp"
yylval = "33"; return INEQU;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 1416 "pnfasm.lpp"
yylval = "34"; return IGTR;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 1418 "pnfasm.lpp"
yylval = "35"; return ILSS;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 1420 "pnfasm.lpp"
yylval = "36"; return IGEQU;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 1422 "pnfasm.lpp"
yylval = "37"; return ILEQU;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 1424 "pnfasm.lpp"
yylval = "38"; return IAND;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1426 "pnfasm.lpp"
yylval = "39"; return IOR;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1428 "pnfasm.lpp"
yylval = "40"; return INOT;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1430 "pnfasm.lpp"
yylval = "41"; return IGOTO;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1432 "pnfasm.lpp"
yylval = "42"; return ICGOTO;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1434 "pnfasm.lpp"
yylval = "43"; return IZGOTO;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1436 "pnfasm.lpp"
yylval = "44"; return IPGOTO;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1438 "pnfasm.lpp"
yylval = "45"; return INGOTO;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1440 "pnfasm.lpp"
yylval = "46"; return IGOTOL;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1442 "pnfasm.lpp"
yylval = "47"; return ICGOTOL;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1444 "pnfasm.lpp"
yylval = "48"; return IZGOTOL;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1446 "pnfasm.lpp"
yylval = "49"; return IPGOTOL;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1448 "pnfasm.lpp"
yylval = "50"; return INGOTOL;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1450 "pnfasm.lpp"
yylval = "51"; return IST;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1452 "pnfasm.lpp"
yylval = "52"; return IPUSH;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1454 "pnfasm.lpp"
yylval = "53"; return IPOP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1456 "pnfasm.lpp"
yylval = "54"; return ICALL;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1458 "pnfasm.lpp"
yylval = "55"; return ICALLL;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1460 "pnfasm.lpp"
yylval = "56"; return IRET;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1462 "pnfasm.lpp"
yylval = "57"; return IVAR;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1464 "pnfasm.lpp"
yylval = "58"; return ILBL;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1466 "pnfasm.lpp"
yylval = "59"; return IEPRINT;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1468 "pnfasm.lpp"
yylval = "60"; return IEPRINTLN;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1470 "pnfasm.lpp"
yylval = "61"; return IEND;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1472 "pnfasm.lpp"
yylval = "62"; return IELBL;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1474 "pnfasm.lpp"
yylval = "63"; return IEVLOAD;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1476 "pnfasm.lpp"
yylval = "64"; return IHEADD;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1478 "pnfasm.lpp"
yylval = "65"; return IHEREM;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1480 "pnfasm.lpp"
yylval = "66"; return IHEED;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1482 "pnfasm.lpp"
yylval = "67"; return IHEGET;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1484 "pnfasm.lpp"
yylval = "68"; return ISHEADD;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1486 "pnfasm.lpp"
yylval = "69"; return ISHEREM;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1488 "pnfasm.lpp"
yylval = "70"; return ISHEED;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1490 "pnfasm.lpp"
yylval = "71"; return ISHEGET;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1492 "pnfasm.lpp"
yylval = "72"; return IEADD;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1494 "pnfasm.lpp"
yylval = "73"; return IEREM;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1496 "pnfasm.lpp"
yylval = "74"; return IEED;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1498 "pnfasm.lpp"
yylval = "75"; return IEGET;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1500 "pnfasm.lpp"
yylval = "76"; return IEXADD;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1502 "pnfasm.lpp"
yylval = "77"; return IEXREM;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1504 "pnfasm.lpp"
yylval = "78"; return IEXED;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1506 "pnfasm.lpp"
yylval = "79"; return IEXGET;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1508 "pnfasm.lpp"
yylval = "80"; return IIADD;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1510 "pnfasm.lpp"
yylval = "81"; return IIREM;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1512 "pnfasm.lpp"
yylval = "82"; return IIED;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1514 "pnfasm.lpp"
yylval = "83"; return IIGET;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1516 "pnfasm.lpp"
yylval = "84"; return IHEVENT;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1518 "pnfasm.lpp"
yylval = "85"; return ISHEVENT;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1520 "pnfasm.lpp"
yylval = "86"; return IEVENT;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1522 "pnfasm.lpp"
yylval = "87"; return IEXCEPTION;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1524 "pnfasm.lpp"
yylval = "88"; return IINT;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1526 "pnfasm.lpp"
yylval = "89"; return ITYPEOF;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1528 "pnfasm.lpp"
yylval = "90"; return ICTYPEOF;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1530 "pnfasm.lpp"
yylval = "91"; return ITLOAD;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1532 "pnfasm.lpp"
yylval = "92"; return IALOAD;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1534 "pnfasm.lpp"
yylval = "93"; return IINLOAD;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1536 "pnfasm.lpp"
yylval = "94"; return IINLOAD;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1538 "pnfasm.lpp"
yylval = "95"; return IARLOAD;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1540 "pnfasm.lpp"
yylval = "96"; return IATOC;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1542 "pnfasm.lpp"
yylval = "97"; return ISWITCH;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1544 "pnfasm.lpp"
yylval = "98"; return IVADD;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1546 "pnfasm.lpp"
yylval = "99"; return ILADD;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1548 "pnfasm.lpp"
yylval = "100"; return IELADD;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1550 "pnfasm.lpp"
yylval = "101"; return IADD2V;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1552 "pnfasm.lpp"
yylval = "102"; return IBTAND;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1554 "pnfasm.lpp"
yylval = "103"; return IBTOR;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1556 "pnfasm.lpp"
yylval = "104"; return IBTEXOR;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1558 "pnfasm.lpp"
yylval = "105"; return IBTNOT;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1560 "pnfasm.lpp"
yylval = "106"; return IBTSL;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1562 "pnfasm.lpp"
yylval = "107"; return IBTSR;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1564 "pnfasm.lpp"
yylval = "108"; return IVCHECK;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1566 "pnfasm.lpp"
yylval = "109"; return IVSUPP;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1568 "pnfasm.lpp"
yylval = "110"; return IVPRINT;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1570 "pnfasm.lpp"
yylval = "111"; return IVPRINTLN;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1572 "pnfasm.lpp"
yylval = "112"; return IISUPP;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1574 "pnfasm.lpp"
yylval = "113"; return ITSUPP;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1576 "pnfasm.lpp"
yylval = "114"; return ICOMMENT;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1578 "pnfasm.lpp"
yylval = "115"; return IFIMODE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1580 "pnfasm.lpp"
yylval = "116"; return IFOMODE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1582 "pnfasm.lpp"
yylval = "117"; return IFIOPEN;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1584 "pnfasm.lpp"
yylval = "118"; return IFOOPEN;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1586 "pnfasm.lpp"
yylval = "119"; return IFREAD;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1588 "pnfasm.lpp"
yylval = "120"; return IFPRINT;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1590 "pnfasm.lpp"
yylval = "121"; return IFPRINTLN;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1592 "pnfasm.lpp"
yylval = "122"; return IFICLOSE;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1594 "pnfasm.lpp"
yylval = "123"; return IFOCLOSE;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1596 "pnfasm.lpp"
yylval = "124"; return IMEML;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1598 "pnfasm.lpp"
yylval = "125"; return IFIEOF;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1600 "pnfasm.lpp"
yylval = "126"; return IARNLOAD;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1602 "pnfasm.lpp"
yylval = "127"; return IRDSTART1;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1604 "pnfasm.lpp"
yylval = "128"; return IRFROM1;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1606 "pnfasm.lpp"
yylval = "129"; return IRTO1;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1608 "pnfasm.lpp"
yylval = "130"; return IRDEND1;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1610 "pnfasm.lpp"
yylval = "131"; return IRSTART1;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1612 "pnfasm.lpp"
yylval = "132"; return IRANGE1;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1614 "pnfasm.lpp"
yylval = "133"; return IREND1;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1616 "pnfasm.lpp"
yylval = "134"; return IRLOAD1;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1618 "pnfasm.lpp"
yylval = "135"; return IRSTORE1;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1620 "pnfasm.lpp"
yylval = "136"; return IHEADDB;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1622 "pnfasm.lpp"
yylval = "137"; return ISHEADDB;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1624 "pnfasm.lpp"
yylval = "138"; return IEADDB;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1626 "pnfasm.lpp"
yylval = "139"; return IEXADDB;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1628 "pnfasm.lpp"
yylval = "140"; return IIADDB;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1630 "pnfasm.lpp"
yylval = "141"; return IRDSTART2;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1632 "pnfasm.lpp"
yylval = "142"; return IRFROM2;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1634 "pnfasm.lpp"
yylval = "143"; return IRTO2;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1636 "pnfasm.lpp"
yylval = "144"; return IRDEND2;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1638 "pnfasm.lpp"
yylval = "145"; return IRSTART2;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1640 "pnfasm.lpp"
yylval = "146"; return IRANGE2;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1642 "pnfasm.lpp"
yylval = "147"; return IRPREP2;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1644 "pnfasm.lpp"
yylval = "148"; return IRLOAD2;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1646 "pnfasm.lpp"
yylval = "149"; return IESTART;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1648 "pnfasm.lpp"
yylval = "150"; return IENAME;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1650 "pnfasm.lpp"
yylval = "151"; return IEEND;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1652 "pnfasm.lpp"
yylval = "152"; return IENUMS;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1654 "pnfasm.lpp"
yylval = "153"; return IENUM;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1656 "pnfasm.lpp"
yylval = "154"; return ISENUM;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1658 "pnfasm.lpp"
yylval = "155"; return IEPREP;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1660 "pnfasm.lpp"
yylval = "156"; return ILOADE;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1662 "pnfasm.lpp"
yylval = "157"; return ISTOREE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1664 "pnfasm.lpp"
yylval = "158"; return IASTART;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1666 "pnfasm.lpp"
yylval = "159"; return IAEND;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1668 "pnfasm.lpp"
yylval = "160"; return IAPREP;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1670 "pnfasm.lpp"
yylval = "161"; return IAIPREP;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1672 "pnfasm.lpp"
yylval = "162"; return ILOADIA;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 1674 "pnfasm.lpp"
yylval = "163"; return ISTOREIA;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1676 "pnfasm.lpp"
yylval = "164"; return IALENGTH;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1678 "pnfasm.lpp"
yylval = "165"; return IAPRINT;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 1680 "pnfasm.lpp"
yylval = "166"; return IDUP;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1682 "pnfasm.lpp"
yylval = "167"; return ICDUP;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1684 "pnfasm.lpp"
yylval = "168"; return IIF;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 1686 "pnfasm.lpp"
yylval = "169"; return IENDIF;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1688 "pnfasm.lpp"
yylval = "170"; return IIFELSE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1690 "pnfasm.lpp"
yylval = "171"; return IENDIFELSE;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1692 "pnfasm.lpp"
yylval = "172"; return IEIF;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1694 "pnfasm.lpp"
yylval = "173"; return IIFBEGIN;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 1696 "pnfasm.lpp"
yylval = "174"; return IIFEND;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 1698 "pnfasm.lpp"
yylval = "175"; return ISWITCH2;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1700 "pnfasm.lpp"
yylval = "176"; return ISWBEGIN;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 1702 "pnfasm.lpp"
yylval = "177"; return ISWEND;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 1704 "pnfasm.lpp"
yylval = "178"; return ISWCASE;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 1706 "pnfasm.lpp"
yylval = "179"; return ISWCBEGIN;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 1708 "pnfasm.lpp"
yylval = "180"; return ISWCEND;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 1710 "pnfasm.lpp"
yylval = "181"; return ISWDEFAULT;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 1712 "pnfasm.lpp"
yylval = "182"; return ISWBREAK;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 1714 "pnfasm.lpp"
yylval = "183"; return ILOADSP;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 1716 "pnfasm.lpp"
yylval = "184"; return ISTORESP;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1718 "pnfasm.lpp"
yylval = "185"; return ILOADSTACK;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 1720 "pnfasm.lpp"
yylval = "186"; return ISTORESTACK;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 1722 "pnfasm.lpp"
yylval = "187"; return IATOSP;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1724 "pnfasm.lpp"
yylval = "188"; return ISPTOA;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 1726 "pnfasm.lpp"
yylval = "189"; return IPATCH;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 1728 "pnfasm.lpp"
yylval = "190"; return INATIVE;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 1730 "pnfasm.lpp"
yylval = "191"; return IFRET;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 1732 "pnfasm.lpp"
yylval = "192"; return IFCALL;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 1734 "pnfasm.lpp"
yylval = "193"; return IFCPARAMS;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 1736 "pnfasm.lpp"
yylval = "194"; return IFECPARAMS;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 1738 "pnfasm.lpp"
yylval = "195"; return IFECALL;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 1740 "pnfasm.lpp"
yylval = "196"; return IPNUM;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 1742 "pnfasm.lpp"
yylval = "197"; return IPARAMF;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 1744 "pnfasm.lpp"
yylval = "198"; return IPARAMF2;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 1746 "pnfasm.lpp"
yylval = "199"; return IPARAMF3;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 1748 "pnfasm.lpp"
yylval = "200"; return IRNUM;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 1750 "pnfasm.lpp"
yylval = "201"; return IRETURNF;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 1752 "pnfasm.lpp"
yylval = "202"; return IRETURNF2;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 1754 "pnfasm.lpp"
yylval = "203"; return IRETURNF3;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 1756 "pnfasm.lpp"
yylval = "204"; return IFNAME;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 1758 "pnfasm.lpp"
yylval = "205"; return IRETURNV;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 1760 "pnfasm.lpp"
yylval = "206"; return IFNCLOAD;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 1762 "pnfasm.lpp"
yylval = "207"; return IFNCSTORE;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 1764 "pnfasm.lpp"
yylval = "208"; return IFNCNEW;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 1766 "pnfasm.lpp"
yylval = "209"; return IFNCDELETE;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 1768 "pnfasm.lpp"
yylval = "210"; return IFNCSNAME;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 1770 "pnfasm.lpp"
yylval = "211"; return IFNCSRET;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 1772 "pnfasm.lpp"
yylval = "212"; return IFNCSPARAM;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 1774 "pnfasm.lpp"
yylval = "213"; return IFNCSDEF;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 1776 "pnfasm.lpp"
yylval = "214"; return IFNCGNAME;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 1778 "pnfasm.lpp"
yylval = "215"; return IFNCGRET;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 1780 "pnfasm.lpp"
yylval = "216"; return IFNCGPARAM;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 1782 "pnfasm.lpp"
yylval = "217"; return IFNCGDEF;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 1784 "pnfasm.lpp"
yylval = "218"; return IFNCPOINT;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 1786 "pnfasm.lpp"
yylval = "219"; return IFNCLENGTH;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 1788 "pnfasm.lpp"
yylval = "220"; return IFNCSYNCR;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 1790 "pnfasm.lpp"
yylval = "221"; return IFNCFIND;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 1792 "pnfasm.lpp"
yylval = "222"; return IFNCFRET;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 1794 "pnfasm.lpp"
yylval = "223"; return IFNCFPARAM;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 1796 "pnfasm.lpp"
yylval = "224"; return IFNCFBRET;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 1798 "pnfasm.lpp"
yylval = "225"; return IFNCFBPARAM;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 1801 "pnfasm.lpp"
yylval = yytext; return TVOID;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 1803 "pnfasm.lpp"
yylval = yytext; return TBOOLEAN;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 1805 "pnfasm.lpp"
yylval = yytext; return TNUMBER;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 1807 "pnfasm.lpp"
yylval = yytext; return TCHARACTER;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 1809 "pnfasm.lpp"
yylval = yytext; return TSTRING;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 1811 "pnfasm.lpp"
yylval = yytext; return VOID;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 1813 "pnfasm.lpp"
yylval = yytext; return BOOLEAN;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 1815 "pnfasm.lpp"
yylval = yytext; return NUMBER;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 1817 "pnfasm.lpp"
{
			 if (yytext == "\\n")
                          yytext = (char *)"\n";

                         yylval = yytext; return CHARACTER;
                        }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 1824 "pnfasm.lpp"
yylval = yytext; return STRING;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 1826 "pnfasm.lpp"
/* Eat up Comment */
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 1828 "pnfasm.lpp"
/* Eat up Whitespace */
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 1830 "pnfasm.lpp"
{
			 String str = "Scan error: ";
			 str += yytext;
			 yyerror(str.getString().c_str());
			}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 1838 "pnfasm.lpp"
ECHO;
	YY_BREAK
#line 3268 "pnfasm.cpp"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 895 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 895 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 894);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 1838 "pnfasm.lpp"

/* Additional Code */
int main(int argc, char ** argv)
{
 if (argc == 3)
 {
  String extension = get_extension(argv[1]);
  if (extension == ".pppasm")
   preprocess(argv[1]);


  FILE * input = fopen((strip_extension(argv[1]) + ".pasm").getString().c_str(), "r");
  if (!input)
  {
   yyerror("can't open file");
   return -1;
  }
  yyin = input;
  output = fopen(argv[2], "w");
  if (!output)
  {
   yyerror("can't open file for write");
   return -1;
  }
  yydebug = 0;


  fprintf(output, "!@.PNF\n\n\n");

  
  int ret = yyparse();

  fclose(input);
  fclose(output);

  if (mode == 2)
   mklib(argv[2]);


  return ret;
 }
 else
  yyerror("can't find input file or output file.");
}

String get_extension(String fileName)
{
 unsigned long index = fileName.getString().find(".");
 if (index == string::npos)
  yyerror((char *)"File has No Extension.");

 String extension = fileName.getString().substr(index);


 return extension;
}

String strip_extension(String fileName)
{
 unsigned long index = fileName.getString().find(".");
 if (index == string::npos)
  yyerror((char *)"File has No Extension.");

 String stripped = fileName.getString().substr(0, index);


 return stripped;
}

void preprocess(String arg)
{ 
 _spawnl(_P_WAIT, "pnfpp.exe", "pnfpp.exe", (strip_extension(arg) + (char *)".pppasm").getString().c_str(), 
 		 (strip_extension(arg) + (char *)".pasm").getString().c_str(), NULL);
}

void mklib(String arg)
{
 _spawnl(_P_WAIT, "mkpnflib.exe", "mkpnflib.exe", (strip_extension(arg) + (char *)".pnf").getString().c_str(), 
	 (strip_extension(arg) + (char *)".plib").getString().c_str(), NULL);
}