%option yylineno


%{
/* Prologue */
/*
Copyright (C) 2019 Dennis Earl Smiley

This file is part of pnfha.

    pnfha is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pnfha is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pnfha.  If not, see <https://www.gnu.org/licenses/>. 
*/
/*
CHANGELOG
=========

5/3/19 Origional a-a-a - 1. The first version.
			 2. Added new LTYPE for function return values...
			 3. Debugged...
			 4. Added default values to functions.
			 5. Debugged...
			 6. Debugged...
			 7. Implemented through segments...
*/
#include <stdarg.h>

#include "pnfha.tab.cpp"


void generate_code();
void generate_pcode(bool names);
void generate_switch_code();
String strip_quotes(String str);
void generate_comment_code();


PNF_Variable lval;
%}
/* Flex Definitions */

DIGIT		[0-9]

VOIDV		"0V"

BOOLEANV	"true"|"false"

NUMBERV		{DIGIT}+|{DIGIT}+"."{DIGIT}*

TCHARACTER	[^\"\n]

TCHARACTER2	.

CHARACTERV	'.'

STRINGV		\"{TCHARACTER}*\"

COMMENT		"//"{TCHARACTER2}*

SEND		";"

COMMA		","

OPPLUS		"+"

OPMINUS		"-"

OPTIMES		"*"

OPDIV		"/"

OPMODULUS	"%"

OPPOWER		"^"

OPROOT		"!^"

OPINC		"++"

OPDEC		"--"

OPEQUAL		"="

OPAND		"&&"

OPAMP		"&"

OPOR		"||"

OPNOT		"!"

OPCOLON		":"

OPSUB		"\-"

OPEQU		"=="

OPNEQU		"!="

OPLSS		"<"

OPGTR		">"

OPLEQU		"<="

OPGEQU		">="

OPCMP		"<=>"

OPBTOR		"|"

OPBTXOR		"^|"

OPBTNOT		"~"

OPBTSL		"<<"

OPBTSR		">>"

OPQUES		"?"

OPDOT		"."

OPLSQ		"["

OPRSQ		"]"

OPSTR		"$"

OPSTRTIMES	"x"

OPRUN		"R"

LEFTP		"("

RIGHTP		")"

LEFTB		"{"

RIGHTB		"}"

VAR		"var"

PRINT		"print"

PRINTLN		"println"

EPRINT		"eprint"

EPRINTLN	"eprintln"

END		"end"

ASM		"asm"

READ		"read"

LOAD		"load"

GOTO		"goto"

ST		"st"

PUSH		"push"

POP		"pop"

TOP		"top"

TYPEOF		"typeof"

ATOC		"atoc"

SWITCH		"switch"

CSWITCH		"cswitch"

CRASH		"crash"

VERSION		"version"

HALT		"halt"

MODT		"modt"

RETURN		"return"

GOSUB		"gosub"

SUB		"subroutine"

EVENT		"event"

UNREGISTER	"unregister"

REGISTER	"register"

REREGISTER	"reregister"

STORE		"store"

IF		"if"

ELSE		"else"

CASE		"case"

CCASE		"ccase"

DEFAULT		"default"

CDEFAULT	"cdefault"

BREAK		"break"

LABEL		"label"

WHILE		"while"

ADDRESSOF	"addressof"

ADD2V		"add2v"

STOREA		"storea"

DOWHILE		"dowhile"

DOFOR		"dofor"

FOR		"for"

FVAR		"fvar"

FOREVER		"forever"

CONTINUE	"continue"

CHECK		"check"

HCMNT		"comment"

FMODE		"fmode"

FOPEN		"fopen"

FCLOSE		"fclose"

FEOF		"feof"

FPRINT		"frpint"

FPRINTLN	"fprintln"

FREAD		"fread"

MEML		"meml"

ENUM		"enum"

ENUMV		"enumv"

RANGE		"range"

RANGEV		"rangev"

ARRAY		"array"

BLANK		"blank"

PNFASM		"pnfasmv"

LENGTH		"length"

DUP		"dup"

THEN		"then"

ENDIF		"endif"

DONEIF		"doneif"

ATOSP		"atosp"

SPTOA		"sptoa"

STRUCT		"struct"

STRUCTVAR	"structvar"

UNION		"union"

UNIONVAR	"unionvar"

USE		"use"

MODE		"mode"

EXTMODE		"extmode"

COPY		"copy"

SEGMENT		"segment"

TYPE		"void"|"boolean"|"number"|"character"|"string"

LTYPE		"memory"|"variable"|"tend"|"type_of"|"iname"|"icount"|"args"|"aload"|"argn"|"stk"|"rvalue"|"seg1"|"seg2"

GTYPE		"normal"|"condition"|"zero"|"positive"|"negative"

RTYPE		"%accumulator"|"%calc"

VTYPE		"pnf"|"pnfasm"|"norm"

STYPE		"sub"|"heve"|"sheve"|"eve"|"exe"|"int"

ATYPE		"avariable"|"alabel"|"aevent"

CTYPE		"ver"|"current_ver"|"vmode"|"current_vmode"|"extvmode"|"current_extvmode"|"instruction"|"type"

CMTYPE		"l1"|"l2"

BFMODEC		"input"|"output"

FMODEC		"in"|"out"|"binary"|"ate"|"app"|"trunc"

RUNOPOP		"run"|"jrun"|"pnfrun"

OTYPE		"tstruct"|"tunion"

VTYPE2		"venum"

RTYPE2		"rtype1"|"rtype2"

CETYPE		"collapse"|"expand"

FUNCTION	"function"

FUNCDEF		"funcdef"

FUNCCALL	"funccall"

FPARAMETER	"fparameter"

FRET		"fret"

DEFAULTV	"defaultv"

DEFAULTV2	"defaultv2"

UNTIL		"until"

UNLESS		"unless"

DOUNTIL		"dountil"

ID		[[:alnum:]_$]*

PBIN		"%BIN%"

PPBIN		"%PBIN%"

PLIB		"%LIB%"

PINCLUDE 	"%include "

PIMPORT		"%import "

PDEFINE		"%define"

PMACRO		"%macro"

PENDM		"%endm"

PUNDEF		"%undef"

PIFDEF		"%ifdef"

PIFNDEF		"%ifndef"

PELSE		"%else"

PENDIF		"%endif"

PPDATE		"%_DATE()"

PPTIME		"%_TIME()"

PPLINE		"%_LINE()"

PPFILE		"%_FILE()"

PPCDATE		"%_CDATE()"

PPCTIME		"%_CTIME()"

PPCOMMENT	"%'! "{TCHARACTER2}*

PPINCLUDE 	"%%include "

PPIMPORT	"%%import "

PPDEFINE	"%%define"

PPMACRO		"%%macro"

PPENDM		"%%endm"

PPUNDEF		"%%undef"

PPIFDEF		"%%ifdef"

PPIFNDEF	"%%ifndef"

PPELSE		"%%else"

PPENDIF		"%%endif"

PPPDATE		"%%_DATE()"

PPPTIME		"%%_TIME()"

PPPLINE		"%%_LINE()"

PPPFILE		"%%_FILE()"

PPPCDATE	"%%_CDATE()"

PPPCTIME	"%%_CTIME()"

PPPCOMMENT	"%%'! "{TCHARACTER2}*


/* Flex Patterns Below %% */
%%

{VOIDV}			lval.put("1"); yylval = lval; return VOIDV;

{BOOLEANV}		{
			 String b;
			 if (strcmp(yytext, "true") == 0)
		          b = "true";
			 else if (strcmp(yytext, "false") == 0)
			  b = "false";
			 else
 			  b = "true";

			 bool b2 = b == "true" ? true : false;
			 PNF_Boolean b3(b2);

			 lval.put(b3);
			 yylval = lval.to_boolean();
			 return BOOLEANV;
			}

{NUMBERV}		{
			 double d = atof(yytext);
			 PNF_Number n(d);
			 lval.put(n);
			 yylval = lval.to_number();
			 return NUMBERV;
			}

{CHARACTERV}		{
			 char ch = yytext[1];
			 PNF_Character c(ch);
			 lval.put(c);
			 yylval = lval.to_character();
			 return CHARACTERV;
			}

{STRINGV}		{
			 String str = yytext;
			 PNF_String s(str);
			 lval.put(s);
			 yylval = lval.to_string();
			 return STRINGV;
			}

{SEND}			lval.put("1"); yylval = lval; return SEND;

{COMMA}			lval.put("1"); yylval = lval; return COMMA;

{LEFTP}			lval.put("0"); yylval = lval; return LEFTP;

{RIGHTP}		lval.put("0"); yylval = lval; return RIGHTP;

{OPEQUAL}		lval.put("0"); yylval = lval; return OPEQUAL;

{OPPLUS}		lval.put("0"); yylval = lval; return OPPLUS;

{OPMINUS}		lval.put("0"); yylval = lval; return OPMINUS;

{OPTIMES}		lval.put("0"); yylval = lval; return OPTIMES;

{OPDIV}			lval.put("0"); yylval = lval; return OPDIV;

{OPMODULUS}		lval.put("0"); yylval = lval; return OPMODULUS;

{OPPOWER}		lval.put("0"); yylval = lval; return OPPOWER;

{OPROOT}		lval.put("0"); yylval = lval; return OPROOT;

{OPINC}			lval.put("0"); yylval = lval; return OPINC;

{OPDEC}			lval.put("0"); yylval = lval; return OPDEC;

{OPAND}			lval.put("0"); yylval = lval; return OPAND;

{OPAMP}			lval.put("0"); yylval = lval; return OPAMP;

{OPOR}			lval.put("0"); yylval = lval; return OPOR;

{OPNOT}			lval.put("0"); yylval = lval; return OPNOT;

{OPCOLON}		lval.put("0"); yylval = lval; return OPCOLON;

{OPSUB}			lval.put("0"); yylval = lval; return OPSUB;

{OPEQU}			lval.put("0"); yylval = lval; return OPEQU;

{OPNEQU}		lval.put("0"); yylval = lval; return OPNEQU;

{OPLSS}			lval.put("0"); yylval = lval; return OPLSS;

{OPGTR}			lval.put("0"); yylval = lval; return OPGTR;

{OPLEQU}		lval.put("0"); yylval = lval; return OPLEQU;

{OPGEQU}		lval.put("0"); yylval = lval; return OPGEQU;

{OPCMP}			lval.put("0"); yylval = lval; return OPCMP;

{OPQUES}		lval.put("0"); yylval = lval; return OPQUES;

{OPDOT}			lval.put("0"); yylval = lval; return OPDOT;

{OPLSQ}			lval.put("0"); yylval = lval; return OPLSQ;

{OPRSQ}			lval.put("0"); yylval = lval; return OPRSQ;

{OPSTR}			lval.put("0"); yylval = lval; return OPSTR;

{OPSTRTIMES}		lval.put("0"); yylval = lval; return OPSTRTIMES;

{OPRUN}			lval.put("0"); yylval = lval; return OPRUN;

{VAR}			lval.put("0"); yylval = lval; return VAR;

{PRINT}			lval.put("0"); yylval = lval; return PRINT;

{PRINTLN}		lval.put("0"); yylval = lval; return PRINTLN;

{EPRINT}		lval.put("0"); yylval = lval; return EPRINT;

{EPRINTLN}		lval.put("0"); yylval = lval; return EPRINTLN;

{END}			lval.put("0"); yylval = lval; return END;

{ASM}			lval.put("0"); yylval = lval; return ASM;

{LOAD}			lval.put("0"); yylval = lval; return LOAD;

{GOTO}			lval.put("0"); yylval = lval; return GOTO;

{ST}			lval.put("0"); yylval = lval; return ST;

{PUSH}			lval.put("0"); yylval = lval; return PUSH;

{POP}			lval.put("0"); yylval = lval; return POP;

{TOP}			lval.put("0"); yylval = lval; return TOP;

{TYPEOF}		lval.put("0"); yylval = lval; return TYPEOF;

{ATOC}			lval.put("0"); yylval = lval; return ATOC;

{SWITCH}		lval.put("0"); yylval = lval; return SWITCH;

{CSWITCH}		lval.put("0"); yylval = lval; return CSWITCH;

{CRASH}			lval.put("0"); yylval = lval; return CRASH;

{VERSION}		lval.put("0"); yylval = lval; return VERSION;

{HALT}			lval.put("0"); yylval = lval; return HALT;

{MODT}			lval.put("0"); yylval = lval; return MODT;

{RETURN}		lval.put("0"); yylval = lval; return RETURN;

{GOSUB}			lval.put("0"); yylval = lval; return GOSUB;

{SUB}			lval.put("0"); yylval = lval; return SUB;

{EVENT}			lval.put("0"); yylval = lval; return EVENT;

{UNREGISTER}		lval.put("0"); yylval = lval; return UNREGISTER;

{REGISTER}		lval.put("0"); yylval = lval; return REGISTER;

{REREGISTER}		lval.put("0"); yylval = lval; return REREGISTER;

{STORE}			lval.put("0"); yylval = lval; return STORE;

{IF}			lval.put("0"); yylval = lval; return IF;

{ELSE}			{
			 lval.put("0");
			 yylval = lval;
			 return ELSE;
			}

{CASE}			lval.put("0"); yylval = lval; return CASE;

{CCASE}			lval.put("0"); yylval = lval; return CCASE;

{DEFAULT}		lval.put("0"); yylval = lval; return DEFAULT;

{CDEFAULT}		lval.put("0"); yylval = lval; return CDEFAULT;

{BREAK}			lval.put("0"); yylval = lval; return BREAK;

{LABEL}			lval.put("0"); yylval = lval; return LABEL;

{WHILE}			lval.put("0"); yylval = lval; return WHILE;

{ADDRESSOF}		lval.put("0"); yylval = lval; return ADDRESSOF;

{ADD2V}			lval.put("0"); yylval = lval; return ADD2V;

{STOREA}		lval.put("0"); yylval = lval; return STOREA;

{DOWHILE}		lval.put("0"); yylval = lval; loopexpr = true; return DOWHILE;

{DOFOR}			lval.put("0"); yylval = lval; loopexpr = true; return DOFOR;

{FOR}			lval.put("0"); yylval = lval; return FOR;

{FVAR}			lval.put("0"); yylval = lval; return FVAR;

{FOREVER}		lval.put("0"); yylval = lval; inforever = true; return FOREVER;

{CONTINUE}		lval.put("0"); yylval = lval; return CONTINUE;

{CHECK}			lval.put("0"); yylval = lval; return CHECK;

{HCMNT}			lval.put("0"); yylval = lval; return HCMNT;

{FMODE}			lval.put("0"); yylval = lval; return FMODE;

{FOPEN}			lval.put("0"); yylval = lval; return FOPEN;

{FCLOSE}		lval.put("0"); yylval = lval; return FCLOSE;

{FEOF}			lval.put("0"); yylval = lval; return FEOF;

{FPRINT}		lval.put("0"); yylval = lval; return FPRINT;

{FPRINTLN}		lval.put("0"); yylval = lval; return FPRINTLN;

{FREAD}			lval.put("0"); yylval = lval; return FREAD;

{MEML}			lval.put("0"); yylval = lval; return MEML;

{ENUM}			lval.put("0"); yylval = lval; return ENUM;

{ENUMV}			lval.put("0"); yylval = lval; return ENUMV;

{RANGE}			lval.put("0"); yylval = lval; return RANGE;

{RANGEV}		lval.put("0"); yylval = lval; return RANGEV;

{ARRAY}			lval.put("0"); yylval = lval; return ARRAY;

{BLANK}			lval.put("0"); yylval = lval; return BLANK;

{PNFASM}		lval.put("0"); yylval = lval; return PNFASM;

{LENGTH}		lval.put("0"); yylval = lval; return LENGTH;

{DUP}			lval.put("0"); yylval = lval; return DUP;

{THEN}			lval.put("0"); yylval = lval; return THEN;

{ENDIF}			lval.put("0"); yylval = lval; return ENDIF;

{DONEIF}		lval.put("0"); yylval = lval; return DONEIF;

{FRET}			lval.put("0"); yylval = lval; return FRET;

{DEFAULTV}		lval.put("0"); yylval = lval; return DEFAULTV;

{DEFAULTV2}		lval.put("0"); yylval = lval; return DEFAULTV2;

{UNTIL}			lval.put("0"); yylval = lval; return UNTIL;

{UNLESS}		lval.put("0"); yylval = lval; return UNLESS;

{DOUNTIL}		lval.put("0"); yylval = lval; return DOUNTIL;

{STRUCT}		lval.put("0"); yylval = lval; return STRUCT;

{STRUCTVAR}		lval.put("0"); yylval = lval; return STRUCTVAR;

{UNION}			lval.put("0"); yylval = lval; return UNION;

{UNIONVAR}		lval.put("0"); yylval = lval; return UNIONVAR;

{USE}			lval.put("0"); yylval = lval; return USE;

{MODE}			lval.put("0"); yylval = lval; return MODE;

{EXTMODE}		lval.put("0"); yylval = lval; return EXTMODE;

{COPY}			lval.put("0"); yylval = lval; return COPY;

{SEGMENT}		lval.put("0"); yylval = lval; return SEGMENT;

{TYPE}			{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return TYPE;
			}

{LTYPE}			{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return LTYPE;
			}

{GTYPE}			{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return GTYPE;
			}

{RTYPE}			{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return RTYPE;
			}

{VTYPE}			{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return VTYPE;
			}

{STYPE}			{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return STYPE;
			}

{ATYPE}			{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return ATYPE;
			}

{CTYPE}			{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return CTYPE;
			}

{CMTYPE}		{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return CMTYPE;
			}

{BFMODEC}		{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return BFMODEC;
			}

{FMODEC}		{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FMODEC;
			}

{VTYPE2}		{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return VTYPE2;
			}

{RTYPE2}		{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return RTYPE2;
			}

{CETYPE}		{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return CETYPE;
			}

{RUNOPOP}		{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return RUNOPOP;
			}

{OTYPE}			{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return OTYPE;
			}

{FUNCTION}		{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FUNCTION;
			}

{FUNCDEF}		{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FUNCDEF;
			}

{FUNCCALL}		{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FUNCCALL;
			}

{FPARAMETER}		{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FPARAMETER;
			}


{READ}			lval.put("0"); yylval = lval; return READ;

{ID}			{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return ID;
			}

{PBIN}		return PBIN;

{PPBIN}		return PPBIN;

{PLIB}		return PLIB;

{PINCLUDE} 	return PINCLUDE;

{PIMPORT}	return PIMPORT;

{PDEFINE}	return PDEFINE;

{PMACRO}	return PMACRO;

{PENDM}		return PENDM;

{PUNDEF}	return PUNDEF;

{PIFDEF}	return PIFDEF;

{PIFNDEF}	return PIFNDEF;

{PELSE}		return PELSE;

{PENDIF}	return PENDIF;

{PPDATE}	return PPDATE;

{PPTIME}	return PPTIME;

{PPLINE}	return PPLINE;

{PPFILE}	return PPFILE;

{PPCDATE}	return PPCDATE;

{PPCTIME}	return PPCTIME;

{PPCOMMENT}	{ 
		 ASTNode pp_statement("pp_statement");
		 pp_statement.conprint("' %s\n", yytext); 
		 tree.add_node(pp_statement); 
		}

{PPINCLUDE} 	return PPINCLUDE;

{PPIMPORT}	return PPIMPORT;

{PPDEFINE}	return PPDEFINE;

{PPMACRO}	return PPMACRO;

{PPENDM}	return PPENDM;

{PPUNDEF}	return PPUNDEF;

{PPIFDEF}	return PPIFDEF;

{PPIFNDEF}	return PPIFNDEF;

{PPELSE}	return PPELSE;

{PPENDIF}	return PPENDIF;

{PPPDATE}	return PPPDATE;

{PPPTIME}	return PPPTIME;

{PPPLINE}	return PPPLINE;

{PPPFILE}	return PPPFILE;

{PPPCDATE}	return PPPCDATE;

{PPPCTIME}	return PPPCTIME;

{PPPCOMMENT}	{ 
		 ASTNode pp_statement("pp_statement");
		 pp_statement.conprint("'! %s\n", yytext); 
		 tree.add_node(pp_statement);
		}

{LEFTB}			{
			 inblock = true;
			 blockinstmt = true;
			 if ((!loopexpr || midloop != 0) && !inloop && !infor && !inforever && !intop && !inif)
			 {
			  ++scope;
			  varTable.insert();
			  varTable[scope].insert();
			  ++midloop;
			 }

			 lval.put("0");
			 yylval = lval;
			 return LEFTB;
			}

{RIGHTB}		{
			 if ((!loopexpr || midloop != 0) && !inloop && !infor && !inforever && !intop && !inif)
			 {
			  --scope;
			  varTable.remove();
			  --midloop;
			 }
			 else
			 {
			  if (infor)
			  {
			   --inforfor;
			   if (inforfor == 0)
			    infor = false;
			  }

			  if (loopexpr)
			   inloop = true;
			  else
			   inloop = false;

			  loopexpr = false;
			  inforever = false;

			  if (intop)
			  {
			   --intopfor;
			   if (intopfor == 0)
			    intop = false;
			  }
			 }

			 lval.put("0");
			 yylval = lval;
			 inblock = false;
			
			 return RIGHTB;
			}

[\n\t ]+		/* Eat up Whitespace */

{COMMENT}		/* Eat up comment */

.			{
			 String str = "Scan error: ";
			 str += yytext;
			 yyerror(str.getString().c_str());

			 lval.put("0");
			 yylval = lval;
			}

%%
/* Additional Code */
int main(int argc, char ** argv)
{
 try
 {
  yydebug = 0;


  varTable[scope].insert();


  if (argc == 3)
  {
   String extension = get_extension(argv[1]);
   if (extension == ".pppha")
    preprocess(argv[1]);

   FILE * input = fopen((strip_extension(argv[1]) + ".pha").getString().c_str(), "r");
   if (!input)
   {
    yyerror("can't open file");
    return -1;
   }
   yyin = input;
   output = fopen(argv[2], "w");
   if (!output)
   {
    yyerror("can't open file for write");
    return -1;
   }
   fprintf(output, "VERSION TVOID 1\n\n\n");

  
   int ret = yyparse();
   //generate_pcode(false);
   //generate_switch_code();
   //generate_comment_code();
   generate_code();


   fprintf(output, "\n\nEND TVOID 0V");
   fclose(output);
   return ret;
  }
  else
   yyerror("can't find input file or output file.");
 }
 catch (Exception e)
 {
  e.display();
 }
}

void yyerror(char const * c)
{
 cout << "* ERROR: " << yylineno << ": " << c << endl;
}

String get_extension(String fileName)
{
 unsigned long index = fileName.getString().find(".");
 if (index == string::npos)
  yyerror((char *)"File has No Extension.");

 String extension = fileName.getString().substr(index);


 return extension;
}

String strip_extension(String fileName)
{
 unsigned long index = fileName.getString().find(".");
 if (index == string::npos)
  yyerror((char *)"File has No Extension.");

 String stripped = fileName.getString().substr(0, index);


 return stripped;
}

void preprocess(String arg)
{
 #ifdef OS_WINDOWS 
 _spawnl(_P_WAIT, "pnfpp.exe", "pnfpp.exe", (strip_extension(arg) + (char *)".pppha").getString().c_str(), 
 		 (strip_extension(arg) + (char *)".pha").getString().c_str(), NULL);
 #endif // OS_WINDOWS
 #ifdef OS_LINUX
 system(("./pnfpp " + (strip_extension(arg) + (char *)".pppha") + (Strip_extension(arg) + (char *)".pha")).getString().c_str());
 #endif // OS_LINUX
}

int conprint(const char * format, ...)
{
 va_list arg;
 int done = 0;

 va_start(arg, format);

 out.insert();
 done = vsnprintf(outbuffer, 256, format, arg);
 String str = "";
 if (outbuffer != NULL)
  str += outbuffer;
 out[outcount] = str;
 ++outcount;

 va_end(arg);


 return done;
}

void generate_code()
{
 unsigned long len = out.length();
 for (unsigned long i = 0; i < out.length(); ++i)
 {
  if (out[i].getString() == "")
   out.remove(i);
 }

 for (unsigned long i = 0; i < out.length(); ++i)
 {
  fprintf(output, "%s", out[i].getString().c_str());
 }
}

void movelineno(unsigned long index, unsigned long line)
{
 unsigned long i;
 for (i = 0; i < out.length(); ++i)
 {
  if (i < statementlineno.length())
   if (statementlineno[i] == line)
    break;
 }
 cout << i << endl;
 //out.move(index, i);
}

void sort(Array<unsigned long> & array)
{
 bool changed = false;
 do
 {
  changed = false;
  for (unsigned long i = 0; (i + 1) < array.length(); ++i)
  {
   if (array[i + 1] < array[i])
   {
    swap(array[i], array[i + 1]);
    changed = true;
   }
  }
 } while (changed == true);
}

void sort_lines(Array<String> & array)
{
 bool changed = false;
 do
 {
  changed = false;
  for (unsigned long i = 0; (i + 1) < array.length(); ++i)
  {
   String str;
   str = array[i];
   unsigned long k = str.getString().find(':');
   if (k == string::npos)
   {
    continue;
   }
   str = array[i].getString().substr(k + 2);
   unsigned long l = atoi(str.getString().c_str());

   str = array[i + 1];
   k = str.getString().find(':');
   if (k == string::npos)
   {
    continue;
   }
   str = array[i + 1].getString().substr(k + 2);
   unsigned long l2 = atoi(str.getString().c_str());

   if (l2 < l)
   {
    String temp1 = array[i], temp2 = array[i + 1];
    array[i] = temp2;
    array[i + 1] = temp1;

    changed = true;
   }
  }
 } while (changed == true);
}

void generate_pcode(bool names)
{
 unsigned long len = tree.nodenumber();

 for (unsigned long i = 0; i < len; ++i)
 {
  ASTNode node(tree.getNode(i));
  String nodename = node.getName();
  nodename += ":\n\n";
  if (names)
   conprint("%s", nodename.getString().c_str());

  for (unsigned long j = 0; j < node.getValue().length(); ++j)
   conprint("%s", node.getValue()[j].getString().c_str());
 }
}

void generate_switch_code()
{
 /*
  1. Determine if there is a switch or not. Do other steps only if there is a switch.
  2. Find highest switch_case.
  3. Replace the skip_switch_case that is higher than that with GOTOL TSTRING default_switch_(switchcount).
 */
 // Step 1
 if (switchfound)
 {
  // Step 2
  String num;
  String num2;
  String underscore = "_";
  String str;
  unsigned long j = 0;
  for (unsigned long i = 0; i < out.length(); ++i)
  {
   num.from_long(i);
   String line = out[i].getString();
   for (unsigned long k = 1; k <= switchcounter; ++k)
   {
    num2.from_long(k);
    str = (String)"LBL TSTRING \"switch_case_" + num2 + underscore + num + (String)"\"\n";
   
    for (unsigned long l = 0; l < out.length(); ++l)
    {
     if (out[l] == str)
      ++j;
    }
   }
  }

  // Step 3
  for (unsigned long i = 0; i < out.length(); ++i)
  {
   String line = out[i];
   num.from_long(j + 1);

   for (unsigned long k = 1; k <= switchcounter; ++k)
   {
    num2.from_long(k);
    str = (String)"GOTOL TSTRING \"skip_switch_case_" + num2 + underscore + num + (String)"\"\n";
   
    for (unsigned long l = 0; l < out.length(); ++l)
    {
     if (out[l] == str)
      j = l;
    }
   }
  }

  String num3;
  num3.from_long(switchcounter);
  Array<String> out2;
  for (unsigned long i = 0, k = 0; i < out.length(); ++i)
  {
   if (i != j)
   {
    out2[k] = out[i];
    ++k;
    out2.insert();
   }
   else
   {
    out2[k] = "GOTOL TSTRING \"default_switch_";
    out2[k] += num3;
    out2[k] += "\"\n";
    ++k;
    out2.insert();
   }
  }
  out = out2;
 }
}

String strip_quotes(String str)
{
 String str2 = "";

 for (unsigned long i = 0; i < str.length(); ++i)
 {
  if (i == 0)
   continue;
  else if (i == str.length() - 1)
   continue;
  else
   str2 += str[i];
 }

 return str2;
}

void generate_comment_code()
{
 for (unsigned long i = 0; i < out.length(); ++i)
 {
  if (out[i][0] == ';' && out[i][1] == '\\')
  {
   String str = "";
   for (unsigned long j = 0; j < out[i].length(); ++j)
   {
    if (j == 1)
     continue;
    else
     str += out[i][j];
   }
   out[i] = str;
  }
 }
}
