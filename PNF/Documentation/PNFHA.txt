Copyright (c)  2019  Dennis Earl Smiley.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".


CHANGELOG
=========

5/3/19 Origional a-a-a - 1. The first version.
			 2. Added syntax


Portable Numbers Format High Level Language A (PNFHA)
=====================================================

SYNTAX
======

input:	// Empty
	| input line

line:	(newline)
	| statement
	| ERROR

statement:	stmt
		| statement , stmt

stmt:	control_statement
	| ;
	| expression_statement
	| declaration_statement
	| label_statement
	| command_statement
	| statement_block
	| pp_directive
	| pp_statement

expression_statement:	expression ;

declaration_statement:	declaration ;

command_statement:	command ;

label_statement:	ID :
			| sub ID :
			| event ID :

control_statement:	if_statement
			| unless_statement
			| switch_statement
			| loop_statement

if_statement:		if ( stmt ) 
			then
			stmt
			endif
			[else 
			stmt
			endif]
			doneif

unless_statement:	unless ( stmt )
			then
			stmt
			endif
			[else 
			stmt
			endif]
			doneif

switch_statement:	switch ( expression ) { 
			case_statements
			opt_default_statement
			}
			| cswitch ( stmt ) 
			{
			case_statements2
			opt_default_statement2
			}

case_statements:	case_statement
			| case_statements case_statement

case_statement:		case expression
			: stmt

opt_default_statement:	[default : 
			stmt]

case_statements2:	case_statement2
			| case_statements2 case_statement2

case_statement2:	ccase expression 
			:
			stmt

opt_default_statement2:	[cdefault :
			stmt]

loop_statement:		while_loop
			| whileb_loop
			| until_loop
			| untilb_loop
			| for_loop
			| forb_loop
			| forever_loop

while_loop:		while ( 
			stmt 
			)
			stmt

whileb_loop:		dowhile 
			stmt 
			while
			( 
			stmt
			)

until_loop:		until (
			stmt
			)
			stmt

untilb_loop:		dountil
			stmt
			until
			(
			stmt
			)

for_loop:		for ( 
			stmt ; 
			stmt ; 
			stmt 
			) stmt

forb_loop:		dofor 
			stmt 
			for ( 
			stmt ; 
			stmt ; 
			stmt 
			)

forever_loop:		forever 
			stmt

statement_block:	{ statements }

statements:		statement
			| statement statements

expression:		void_expression
			| boolean_expression
			| number_expression
			| character_expression
			| string expression
			| id_expression
			| relational_expression
			| mixed_expression
			| function_expression

void_expression:	0V
			| ( void_expression )

boolean_expression:	BOOLEANV
			| ! boolean_expression
			| boolean_expression && boolean_expression
			| boolean_expression || boolean_expression
			| ( boolean_expression )

number_expression:	NUMBERV
			| number_expression + number_expression
			| number_expression - number_expression
			| number_expression * number_expression
			| number_expression / number_expression
			| number_expression % number_expression
			| - number_expression
			| number_expression ^ number_expression
			| number_expression !^ number_expression
			| ++ number_expression
			| number_expression ++
			| -- number_expression
			| number_expression --
			| number_expression & number_expression
			| number_expression | number_expression
			| number_expression ^| number_expression
			| ~ number_expression
			| number_expression << number_expression
			| number_expression >> number_expression
			| ( number_expression )

character_expression:	CHARACTERV
			| character_expression + character_expression
			| character_expression - character_expression
			| character_expression * character_expression
			| character_expression / character_expression
			| character_expression % character_expression
			| character_expression ^ character_expression
			| character_expression !^ character_expression
			| ++ character_expression
			| character_expression ++
			| -- character_expression
			| character_expression --
			| ( character_expression )

string_expression:	STRINGV
			| string_expression + string_expression
			| $ string_expression
			| ( string_expression )

id_expression:		ID
			| & id_expression
			| ! id_expression
			| id_expression && id_expression
			| id_expression || id_expression
			| id_expression + id_expression
			| id_expression - id_expression
			| id_expression * id_expression
			| id_expression / id_expression
			| id_expression % id_expression
			| - id_expression
			| id_expression ^ id_expression
			| id_expression !^ id_expression
			| ++ id_expression
			| id_expression ++
			| -- id_expression
			| id_expression --
			| ( id_expression )

relational_expression:	number_expression == number_expression
			| number_expression != number_expression
			| number_expression > number_expression
			| number_expression < number_expression
			| number_expression >= number_expression
			| number_expression <= number_expression
			| number_expression <=> number_expression

mixed_expression:	( mixed_expression )
			| ID && boolean_expression
			| boolean_expression && ID
			| ID || boolean_expression
			| boolean_expression || ID
			| ID + number_expression
			| ID - number_expression
			| ID * number_expression
			| ID / number_expression
			| ID ^ number_expression
			| ID !^ number_expression
			| number_expression + ID
			| number_expression - ID
			| number_expression * ID
			| number_expression / ID
			| number_expression ^ ID
			| number_expression !^ ID
			| ID + character_expression
			| ID - character_expression
			| ID * character_expression
			| ID / character_expression
			| ID ^ character_expression
			| ID !^ character_expression
			| character_expression + ID
			| character_expression - ID
			| character_expression * ID
			| character_expression / ID
			| character_expression ^ ID
			| character_expression !^ ID
			| ID + string_expression
			| string_expression + ID
			| number_expression == ID
			| number_expression != ID
			| number_expression < ID
			| number_expression > ID
			| number_expression <= ID
			| number_expression >= ID
			| ID == number_expression
			| ID != number_expression
			| ID < number_expression
			| ID > number_expression
			| ID <= number_expression
			| ID >= number_expression
			| ID & number_expression
			| ID | number_expression
			| ID ^| number_expression
			| number_expression & ID
			| number_expression | ID
			| number_expression ^| ID
			| number_expression << ID
			| number_expression >> ID
			| ID << number_expression
			| ID >> number_expression
			| number_expression <=> ID
			| ID <=> number_expression

function_expression:	function_command
			| ( function_expression )

function_command:	funccall : NUMBERV
			LEFTP vars3 RIGHTP ID
			LEFTP
			actual_function_parameters
			RIGHTP
			nothing

actual_function_parameters:	dv

dv:			opt_expressions

opt_expressions:	opt_expression
			| opt_expressions , opt_expression
			| defaultv2 : TYPE
			opt_expressions , defaultv2 : TYPE

actual_function_parameters2:	opt_expression2
				nothing

opt_expression:			expression

opt_expression2:		expression
				| opt_expression2 , expression

declaration:	variable_declaration
		| label_declaration
		| enum_declaration
		| range_declaration
		| struct_declaration
		| struct_declaration2
		| struct_var_declaration3
		| union_declaration
		| union_declaration2
		| union_var_declaration3

variable_declaration:	var ID
			| var ID = expression
			| fvar ID
			| enumv_declaration
			| rangev_declaration
			| array_declaration

enumv_declaration:	enumv STRINGV STRINGV = STRINGV

rangev_declaration:	rangev RTYPE2 STRINGV STRINGV = STRINGV
			| rangev RTYPE2 STRINGV STRINGV

array_declaration:	array STRINGV [ number_expression ]

enum_declaration:	enum ID = {
			enum_strings
			}

enum_strings:		STRINGV
			| enum_strings , STRINGV

range_declaration:	range RTYPE2 STRINGV = STRINGV .. STRINGV

struct_declaration:	struct ID
			struct_body

struct_body:		{
			struct_var_declarations
			}

struct_var_declarations:	struct_var_declarations2
				| struct_var_declarations struct_var_declarations2

struct_var_declarations2:	structvar ID ;

struct_declaration2:		struct ID ID

struct_var_declarations3:	struct ID ID . ID = expression

union_declaration:	union ID
			union_body

union_body:		{
			union_var_declarations
			}

union_var_declarations:		union_var_declarations2
				| union_var_declarations union_var_declarations2

union_var_declarations2:	unionvar ID ;

union_declaration2:		union ID ID

union_var_declarations3:	union ID ID . ID = expression

label_declaration:	sub ID
			| event ID
			| label ID
			| function_declaration
			| function_declaration2

function_declaration:	funcdef ( vars ) ID ( parameter_declaration )
			nothing

nothing:		// Empty

parameter_declaration:	opt_var
			| parameter_declaration , var ID : TYPE

parameter_declaration2:	opt_var2
			| parameter_declaration2 , var ID : TYPE opt_default_value

parameter_declaration5:	opt_var5
			| parameter_declaration5 , var ID : TYPE

parameter_declaration6: opt_var6
			| parameter_declaration6 , var ID : TYPE

opt_var:		var ID : TYPE
			| VOIDV

opt_var2:		var ID : TYPE opt_default_value
			| VOIDV

opt_default_value:	[dvalue]

dvalue:			= expression : NUMBERV

optdefaultv:		defaultv

opt_var5		var ID : TYPE
			| VOIDV

opt_var6:		var ID : TYPE
			| VOIDV

function_declaration2:	function optdefaultv ( vars2 ) ID ( parameter_declaration2 )
			function_body
			nothing

function_body:		{
			statements
			}

vars:			VOIDV
			| var : TYPE
			| vars , var : TYPE

vars2:			VOIDV
			| var : TYPE
			| vars2 , var : TYPE

vars3:			VOIDV
			| var : TYPE
			| vars3 , var : TYPE

vars4:			VOIDV
			| var : TYPE
			| vars4 , var : TYPE

vars5:			VOIDV
			| var : TYPE
			| vars5 , var : TYPE

vars6:			VOIDV
			| var : TYPE
			| vars6 , var : TYPE

command:	print_command
		| read_command
		| end_command
		| asm_command
		| load_command
		| goto_command
		| operator_command
		| st_command
		| stack_command
		| typeof_command
		| rm_command
		| crash_command
		| version_command
		| halt_command
		| modt_command
		| subroutine_command
		| register_command
		| store_command
		| break_command
		| address_command
		| add2v_command
		| continue_command
		| check_command
		| comment_command
		| file_command
		| meml_command
		| pnfasm_command
		| array_length_command
		| dup_command
		| fret
		| parameter_command
		| struct_command
		| union_command
		| copy_command
		| segment_command

print_command:	print
		| print expression
		| print ver
		| println
		| println expression
		| println ver
		| eprint
		| eprint expression
		| eprintln
		| eprintln expression
		| fprint
		| fprint expression
		| fprintln
		| fprintln expression
		| print array STRINGV

read_command:	read TYPE ID
		| fread TYPE ID

end_command:	end number_expression

asm_command:	asm STRINGV STRINGV string_expression

load_command:		load RTYPE LTYPE number_expression
			| load RTYPE LTYPE TYPE			
			| load LTYPE			
			| load LTYPE boolean_expression			
			| load LTYPE number_expression			
			| load LTYPE character_expression			
			| load LTYPE string_expression			
			| load RTYPE LTYPE ID			
			| load STYPE number_expression			
			| load venum STRINGV			
			| load range RTYPE2 STRINGV			
			| load range RTYPE2 STRINGV [ number_expression ]
			| load array STRINGV [ number_expression ]
			| load array STRINGV [ ]
			| load signature2 LTYPE number_expression : boolean_expression
			nothing
			| load signature2 LTYPE number_expression : number_expression
			nothing
			| load signature2 LTYPE number_expression : character_expression
			nothing
			| load signature2 LTYPE number_expression : string_expression
			nothing
			| load struct STRINGV
			| load union STRINGV
			| use OTYPE ID
			| load RTYPE LTYPE TYPE number_expression

goto_command:	goto GTYPE number_expression
		| goto GTYPE ID

operator_command:	+
			| + number_expression
			| + character_expression
			| + string_expression
			| -
			| \- number_expression
			| *
			| * number_expression
			| /
			| / number_expression
			| %
			| % number_expression
			| ^
			| ^ number_expression
			| !^
			| !^ number_expression
			| ++
			| --
			| &&
			| ||
			| !
			| ==
			| !=
			| <
			| >
			| <=
			| >=
			| == boolean_expression
			| != boolean_expression
			| == number_expression
			| != number_expression
			| < number_expression
			| > number_expression
			| <= number_expression
			| >= number_expression
			| == character_expression
			| != character_expression
			| < character_expression
			| > character_expression
			| <= character_expression
			| >= character_expression
			| &
			| "|"
			| ^|
			| ~
			| <<
			| >>
			| top_command
			| <=>
			| x
			| R RUNOPOP string_expression

top_command:		stmt ?
			stmt
			:
			stmt

st_command:	st

stack_command:	push
		| pop

typeof_command:	typeof RTYPE

rm_command:	atoc
		| atosp
		| sptoa
		| switch

crash_command:	crash string_expression

version_command:	version VTYPE number_expression
			mode number_expression
			extmode number_expression

halt_command:	halt

modt_command:	modt RTYPE

subroutine_command:	return
			| gosub number_expression
			| gosub STYPE ID

register_command:	unregister STYPE
			| register STYPE ID
			| reregister STYPE ID ID
			| register blank STYPE number_expression

store_command:	store RTYPE LTYPE number_expression
		| store LTYPE
		| store RTYPE LTYPE
		| store storea
		| store venum STRINGV
		| store range RTYPE2 STRINGV
		| store array STRINGV [ number_expression ]
		| store array STRINGV [ ]

break_command:	break
		| break ID

address_command:	addressof ATYPE ID

add2v_command:	add2v

continue_command:	continue

check_command:	check CTYPE TYPE number_expression
		| check CTYPE TYPE boolean_expression
		| check CTYPE TYPE character_expression
		| check CTYPE TYPE string_expression
		| check CTYPE number_expression

comment_command:	comment CMTYPE string_expression

file_command:	fmode BFMODEC FMODEC
		| fopen BFMODEC string_expression
		| fclose FBMODEC
		| feof

meml_command:	meml

pnfasm_command: pnfasm STRINGV STRINGV STRINGV

array_length_command:	array STRINGV . length

dup_command:		dup RTYPE

fret_command:		fret

psig:			signature ID TYPE
			nothing

psig2:			signature ID TYPE TYPE

signature:		fparameter ( var5 ) ID ( parameter_declaration5 )

signature2:		function ( var6 ) ID ( parameter_declaration6 )

struct_command:		( struct )
			| { struct }

union_command:		( union )
			| { union }

copy_command:		copy

segment_command:	segment +
			| segment -
			| segment CETYPE number_expression
			| segment copy
			| segment push
			| segment pop
			| segment top

pp_directive:	%BIN%
		| %PBIN%
		| %LIB%

pp_statement:	%include STRINGV
		| %include <STRINGV>
		| %import STRINGV
		| %import <STRINGV>
		| %define STRINGV STRINGV
		| %macro STRINGV STRINGV
		| %endm
		| %undef STRINGV
		| %ifdef STRINGV
		| %ifndef STRINGV
		| %else
		| %endif
		| _DATE()
		| _TIME()
		| _LINE()
		| _FILE()
		| _CDATE()
		| _CTIME()
		| %%include STRINGV
		| %%include <STRINGV>
		| %%import STRINGV
		| %%import <STRINGV>
		| %%define STRINGV STRINGV
		| %%macro STRINGV STRINGV
		| %%endm
		| %%undef STRINGV
		| %%ifdef STRINGV
		| %%ifndef STRINGV
		| %%else
		| %%endif
		| %_DATE()
		| %_TIME()
		| %_LINE()
		| %_FILE()
		| %_CDATE()
		| %_CTIME()


ID = [[:alnum:]]*

BOOLEANV = "true"|"false"

NUMBERV = {DIGIT}+|{DIGIT}+"."{DIGIT}*

DIGIT = [0-9]

CHARACTERV = '.'

STRINGV = \"{TCHARACTER}*\"

TCHARACTER = [^\"\n]

TCHARACTER2 = .

TYPE = "void"|"boolean"|"number"|"character"|"string"

RTYPE = "%accumulator"|"%calc"

LTYPE = "memory"|"variable"|"tend"|"type_of"|"iname"|"icount"|"args"|"aload"|"argn"|"stk"|"rvalue"|"seg1"|"seg2"

STYPE = "sub"|"heve"|"sheve"|"eve"|"exe"|"int"

GTYPE = "normal"|"condition"|"zero"|"positive"|"negative"

VTYPE = "pnf"|"norm"

ATYPE = "avariable"|"alabel"|"aevent"

COMMENT = //{TCHARACTER2}*

CTYPE = "ver"|"current_ver"|"vmode"|"current_vmode"|"extvmode"|"current_extvmode"|"instruction"|"type"

CMTYPE = "l1"|"l2"

BFMODEC = "input"|"output"

RUNOPOP = "tstruct"|"tunion"

FMODEC = "in"|"out"|"binary"|"ate"|"app"|"trunc"

RTYPE2 = "rtype1"|"rtype2"

PPCOMMENT = %'!{TCHARACTER2}*

PPPCOMMENT = %%'!{TCHARACTER2}*
