#line 2 "pnfha.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 159
#define YY_END_OF_BUFFER 160
static yyconst short int yy_acclist[703] =
    {   0,
      116,  116,  160,  158,  159,  156,  158,  159,  156,  159,
       23,  158,  159,  158,  159,   36,  116,  158,  159,   15,
      158,  159,   21,  158,  159,  158,  159,    8,  158,  159,
        9,  158,  159,   13,  158,  159,   11,  158,  159,    7,
      158,  159,   12,   25,  158,  159,   33,  158,  159,   14,
      158,  159,    3,  116,  158,  159,    3,  116,  158,  159,
       24,  158,  159,    6,  158,  159,   28,  158,  159,   10,
      158,  159,   29,  158,  159,   32,  158,  159,  116,  158,
      159,   34,  158,  159,   35,  158,  159,   16,  158,  159,
      116,  158,  159,  116,  158,  159,  116,  158,  159,  116,

      158,  159,  116,  158,  159,  116,  158,  159,  116,  158,
      159,  116,  158,  159,  116,  158,  159,  116,  158,  159,
      116,  158,  159,  116,  158,  159,  116,  158,  159,  116,
      158,  159,  116,  158,  159,  116,  158,  159,  116,  158,
      159,  116,  158,  159,  116,  158,  159,  116,  158,  159,
      116,  158,  159,  154,  158,  159,  158,  159,  155,  158,
      159,  156,   27,   17,    5,  116,   20,   18,   19,  157,
        3,    3,  116,    1,  116,   30,   26,   31,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,   65,  116,
      112,  116,  110,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,   46,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,   22,    4,  157,    3,  116,  116,
      116,  116,  112,  116,  116,  116,   43,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  101,  116,  116,
       42,  116,  116,  116,  107,  116,  107,  116,  116,  116,

      116,  116,  116,   79,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  112,  116,  106,  116,   48,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  107,  116,  116,  116,  116,  116,  116,
       37,  116,  116,  109,  116,  116,  116,  116,  136,  116,
      116,  116,  116,  116,  103,  116,  116,   50,  116,  116,
      116,  116,  116,  116,   67,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,   66,
      116,   93,  116,  116,  116,  116,  116,   88,  116,  116,

      116,  116,  116,  116,  116,   80,  116,  116,   45,  116,
       55,  116,  116,  116,  116,  116,  116,  116,   44,  116,
       92,  116,  116,   56,  116,  116,  106,  116,  116,  116,
      116,  116,  116,   47,  116,  116,  115,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,    2,  116,  116,
      109,  116,  116,  116,  116,  116,  102,  116,  116,  104,
      116,  153,  136,  117,  119,  105,  128,  124,   75,  116,
      116,  116,  116,   97,  116,  116,  116,   98,  116,  116,
       71,  116,   68,  116,  116,  116,   83,  116,  116,  116,
      116,   53,  116,  116,  116,  116,   78,  116,  116,   94,

      116,  116,   60,  116,  116,   85,  116,   86,  116,  116,
      116,   91,  116,  116,   58,  116,  116,  111,  116,  116,
       72,  116,  116,  116,  116,  116,  116,  116,  116,  116,
       38,  116,   95,  116,  116,  116,  116,  116,   64,  116,
      116,  116,  116,  116,  116,  116,  116,  113,  116,  116,
       73,  116,  153,  145,  141,  118,  129,  126,  123,  125,
      116,  108,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,   40,  116,   87,  116,  116,  116,
       89,  116,  116,  100,  116,  116,  106,  116,  116,  116,
       96,  116,  116,  116,   57,  116,  114,  116,   76,  116,

      116,   51,  116,  116,   49,  116,  116,  116,  116,  146,
      143,  140,  142,  122,  127,  116,  116,  116,  116,   84,
      116,  116,  116,   52,  116,  116,   69,  116,   77,  116,
      116,   81,  116,  116,  116,  116,   99,  116,  116,   39,
      116,  116,  116,  116,  116,  116,   54,  116,  139,  144,
      130,  133,  132,  131,  121,  116,  116,   70,  116,  116,
      116,   82,  116,  116,   41,  116,   90,  116,  116,   62,
      116,  116,  116,  116,  147,  150,  149,  148,  138,  134,
      135,  120,   74,  116,  116,  116,  116,  116,  116,  151,
      152,  137,  116,  116,   63,  116,   59,  116,   61,  116,

      109,  116
    } ;

static yyconst short int yy_accept[679] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   14,   16,   20,
       23,   26,   28,   31,   34,   37,   40,   43,   47,   50,
       53,   57,   61,   64,   67,   70,   73,   76,   79,   82,
       85,   88,   91,   94,   97,  100,  103,  106,  109,  112,
      115,  118,  121,  124,  127,  130,  133,  136,  139,  142,
      145,  148,  151,  154,  157,  159,  162,  163,  164,  165,
      165,  166,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  168,  168,  169,  170,
      171,  172,  174,  176,  177,  178,  179,  180,  181,  182,
      183,  184,  185,  186,  187,  188,  189,  190,  191,  192,

      193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
      203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
      213,  214,  215,  216,  217,  218,  219,  221,  223,  225,
      226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
      236,  237,  238,  239,  240,  241,  242,  244,  245,  246,
      247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  257,  258,  259,  260,
      261,  262,  263,  265,  266,  267,  269,  270,  271,  272,

      273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
      283,  284,  285,  286,  287,  288,  290,  291,  293,  294,
      295,  297,  299,  300,  301,  302,  303,  304,  306,  307,
      308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
      318,  319,  320,  321,  322,  323,  324,  325,  326,  328,
      330,  332,  333,  334,  335,  336,  337,  338,  339,  340,
      341,  342,  343,  344,  346,  347,  348,  349,  350,  351,
      353,  354,  356,  357,  358,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  361,  362,  363,  364,  365,  367,  368,  370,  371,
      372,  373,  374,  375,  377,  378,  379,  380,  381,  382,
      383,  384,  385,  386,  387,  388,  389,  390,  392,  394,
      395,  396,  397,  398,  400,  401,  402,  403,  404,  405,
      406,  408,  409,  411,  413,  414,  415,  416,  417,  418,
      419,  421,  423,  424,  426,  427,  429,  430,  431,  432,
      433,  434,  436,  437,  439,  440,  441,  442,  443,  444,
      445,  446,  447,  448,  450,  451,  453,  454,  455,  456,
      457,  459,  460,  462,  463,  463,  463,  463,  463,  463,

      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      464,  465,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  467,  467,  468,  468,  469,  469,  469,  469,  469,
      469,  469,  471,  472,  473,  474,  476,  477,  478,  480,
      481,  483,  485,  486,  487,  489,  490,  491,  492,  494,
      495,  496,  497,  499,  500,  502,  503,  505,  506,  508,
      510,  511,  512,  514,  515,  517,  518,  520,  521,  523,
      524,  525,  526,  527,  528,  529,  530,  531,  533,  535,
      536,  537,  538,  539,  541,  542,  543,  544,  545,  546,
      547,  548,  550,  551,  553,  554,  554,  554,  554,  554,

      554,  554,  554,  555,  555,  556,  556,  556,  556,  556,
      556,  556,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  558,  559,  559,  559,  559,  560,  561,  562,  564,
      565,  566,  567,  568,  569,  570,  571,  572,  573,  574,
      575,  577,  579,  580,  581,  583,  584,  586,  587,  589,
      590,  591,  593,  594,  595,  597,  599,  601,  602,  604,
      605,  607,  608,  609,  610,  610,  610,  610,  610,  610,
      610,  610,  611,  612,  612,  612,  612,  613,  614,  614,
      614,  614,  614,  614,  614,  614,  615,  616,  616,  616,
      617,  618,  619,  620,  622,  623,  624,  626,  627,  629,

      631,  632,  634,  635,  636,  637,  639,  640,  642,  643,
      644,  645,  646,  647,  649,  649,  649,  649,  649,  649,
      649,  650,  651,  651,  651,  651,  651,  652,  653,  654,
      655,  655,  656,  656,  657,  658,  660,  661,  662,  664,
      665,  667,  669,  670,  672,  673,  674,  675,  675,  675,
      676,  677,  678,  679,  680,  680,  681,  682,  682,  683,
      685,  686,  687,  688,  689,  690,  691,  692,  693,  693,
      694,  695,  697,  699,  701,  701,  703,  703
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,   28,    1,   29,   30,   31,   32,   33,   34,
       35,   35,   36,   35,   35,   37,   38,   39,   35,   40,
       35,   35,   35,   41,   35,   42,   35,   35,   35,   35,
       43,    1,   44,   45,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   35,   56,   57,   58,   59,
       60,   61,   35,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[74] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1,    1
    } ;

static yyconst short int yy_base[684] =
    {   0,
        0,    0,  758,  759,   72,   75,   54,  751,    0,   92,
      747,    0,  759,  759,  759,  741,  759,  738,  759,  735,
       64,   70,  759,  759,  726,  725,  724,  759,    0,  759,
      759,  759,   46,   56,   86,   54,   95,  111,  689,   47,
       68,  144,   44,  115,  683,   66,  123,  114,  131,  688,
      137,  692,  694,  759,  672,  759,  199,  759,  759,  737,
      759,    0,  166,  737,  705,  704,  709,  174,  689,  690,
      685,   64,  131,  688,  675,  759,  723,  759,  759,    0,
      206,  213,    0,  759,  759,  759,  682,  665,   41,  669,
       62,  671,   93,  681,  668,  679,  665,  673,  660,  675,

      670,   83,  127,  673,  652,  656,  665,  140,  655,  652,
      144,  652,  662,  661,  654,  653,  649,  648,  137,  645,
       94,  659,  150,  648,  638,  643,    0,  175,    0,  654,
      642,  653,  641,  648,  644,  634,  637,  630,  641,  157,
      637,  628,  631,  190,  620,  637,  180,  639,  631,  626,
      619,  622,  620,  619,  182,  625,  624,  616,  759,  672,
      214,  625,  190,  198,  628,  615,  669,  633,  641,  634,
      178,  640,  632,  631,  630,  616,  607,  611,  599,  611,
      203,  599,  610,  609,  607,  759,    0,  239,  202,  605,
      607,  607,    0,  204,  606,    0,  603,  589,  603,  590,

      591,  600,  595,  582,  592,  581,  593,  583,  215,  577,
      584,  576,  590,  576,  581,    0,  583,    0,  575,  577,
      572,    0,  567,  569,  576,  577,  575,  574,  569,  576,
      567,  559,  555,  559,  554,  566,  551,  557,  549,  549,
      561,  558,  560,  209,  545,  561,  549,  558,  544,  557,
        0,  548,  543,  547,  547,  549,  543,  546,  531,  534,
      528,  531,  537,  529,  526,  539,  108,  537,  536,  531,
      520,  521,  533,  525,  521,  576,  236,  550,  542,  541,
      540,  523,  511,  523,  221,  511,  522,  521,  519,    0,
      560,  559,  527,  536,  528,  522,  525,  522,  522,  494,

      509,  502,  505,  215,  504,  504,  493,  495,  489,  499,
      483,  497,  488,  495,  495,    0,  475,    0,  488,  480,
      485,  489,  483,    0,  487,  490,  489,  479,  483,  478,
      477,  477,  466,  478,  463,  465,  471,    0,  459,  465,
      459,  471,  458,    0,  469,  460,  452,  458,  466,  456,
        0,  466,    0,    0,  454,  461,  447,  448,  452,  444,
        0,    0,  445,    0,  442,  458,  453,  438,  439,  437,
      436,    0,  448,    0,  435,  444,  434,  444,  443,  442,
      433,  431,  441,    0,  440,  226,  435,  440,  428,  430,
        0,  433,    0,    0,  454,  446,  440,  443,  440,  440,

      422,  425,  220,  424,  424,  413,  415,  409,  419,    0,
      759,  759,  461,  427,  429,  433,  432,  431,  430,  404,
      759,  402,  759,  408,  759,  407,  407,  395,  391,  395,
      402,    0,  390,  388,  394,    0,  403,  380,    0,  401,
        0,    0,  382,  397,    0,  386,  380,  384,    0,  393,
      382,  383,    0,  382,    0,  374,    0,  386,    0,    0,
      385,  371,    0,  370,    0,  369,    0,  367,    0,  377,
      361,  374,  371,  365,  362,  367,  369,  366,  356,  357,
      365,  360,  261,  371,  364,  351,  361,  354,  361,  357,
      363,    0,  350,    0,    0,  368,  370,  374,  373,  372,

      371,  344,  759,  350,  759,  349,  349,  337,  333,  337,
      344,  759,  362,  361,  382,  381,  380,  379,  324,  337,
      759,  759,  335,  322,  335,  759,  759,  321,    0,  335,
      323,  324,  316,  315,  323,  312,  322,  311,  310,  322,
      315,    0,  309,  313,    0,  320,    0,  302,  301,  300,
      306,    0,  313,  300,    0,    0,    0,  298,    0,  309,
        0,  297,  302,  299,  324,  323,  344,  343,  342,  341,
      300,  759,  759,  298,  285,  298,  759,  759,  336,  335,
      333,  332,  331,  330,  284,  759,  759,  336,  288,  278,
      280,  272,  284,    0,  274,  282,    0,  286,    0,    0,

      272,    0,  271,  265,  277,    0,  276,    0,  264,  261,
      269,  259,  271,    0,  310,  309,  307,  306,  305,  304,
      759,  759,  311,  263,  301,  300,  759,  759,  759,  759,
      264,  759,  306,  257,  257,    0,  245,  247,    0,  239,
        0,    0,  249,    0,  252,  243,  249,  285,  282,  759,
      759,  759,  759,  759,  287,  759,  759,  224,  759,    0,
      234,  224,  221,  225,  212,  759,  759,  759,  169,  134,
       78,    0,    0,    0,   31,    0,  759,  286,   79,  289,
      292,  295,  298
    } ;

static yyconst short int yy_def[684] =
    {   0,
      677,    1,  677,  677,  677,  677,  677,  678,  679,  677,
      677,  680,  677,  677,  677,  677,  677,  677,  677,  677,
      679,  679,  677,  677,  677,  677,  677,  677,  679,  677,
      677,  677,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  677,  677,  677,  677,  677,  677,  678,
      677,  679,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  681,
      677,  679,  679,  677,  677,  677,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  681,  677,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  682,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,

      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  683,  677,  677,  677,  677,  677,  677,

      677,  677,  677,  677,  677,  677,  677,  677,  677,  682,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  683,  677,  677,  677,  677,  677,

      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  679,
      679,  679,  679,  679,  679,  677,  677,  677,  677,  679,
      679,  679,  679,  679,  677,  679,    0,  677,  677,  677,
      677,  677,  677
    } ;

static yyconst short int yy_nxt[833] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   23,   24,   25,   26,   27,   28,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   30,   31,   32,   29,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   29,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   29,   29,   53,
       54,   55,   56,   57,   57,   57,   57,   57,   57,   58,
       81,   62,   82,   82,   82,   82,   81,  191,   82,   82,
       82,   82,  421,  124,  133,   87,   88,  125,   59,   63,

      192,   64,   89,  134,  107,   83,   90,   91,   92,   93,
       95,   94,   96,  108,  194,   97,  126,   98,  109,  127,
      179,   65,  180,  195,  139,  140,  128,  141,   66,  206,
      142,   67,   99,  207,  100,  101,  676,   68,   69,  102,
       70,   71,   72,  193,  230,  103,   73,  104,  105,   74,
      106,  110,  197,  111,  231,  112,   75,  115,  384,  116,
      113,  117,  114,  129,  129,  135,  385,  146,  118,  143,
      119,  120,  121,  144,  136,  160,  122,  147,  148,  137,
      149,  150,  181,  154,  208,  209,  145,  155,  182,  183,
      130,  214,  151,  218,  131,  676,  156,  227,  228,  152,

       57,   57,   57,  132,  171,  172,  215,  173,  219,  294,
      174,  161,  233,  234,  175,  162,  163,  251,  295,  252,
      164,  238,  311,  165,  188,  188,  188,  188,  675,   81,
      166,   82,   82,   82,   82,  239,  256,  240,  222,  262,
      271,  263,  257,  272,  277,  278,  283,  279,  284,  285,
      280,  258,  305,  259,  281,  286,  287,  188,  188,  188,
      188,  306,  316,  312,  330,  362,  316,  395,  363,  424,
      404,  488,  425,  674,  504,  673,  396,  505,  331,  405,
      556,  556,  672,  671,  670,  489,   60,  669,   60,   77,
      668,   77,  187,  667,  187,  410,  666,  410,  495,  665,

      495,  664,  663,  662,  661,  393,  391,  529,  660,  659,
      658,  657,  656,  655,  654,  653,  652,  651,  650,  649,
      648,  316,  647,  646,  645,  644,  393,  393,  643,  642,
      641,  640,  639,  638,  637,  636,  635,  634,  633,  632,
      631,  630,  629,  628,  627,  626,  625,  624,  623,  622,
      621,  620,  619,  618,  617,  616,  615,  614,  613,  612,
      316,  611,  610,  609,  608,  607,  606,  605,  604,  603,
      602,  601,  600,  599,  598,  597,  596,  595,  594,  593,
      592,  391,  591,  590,  589,  588,  587,  586,  585,  584,
      583,  582,  581,  580,  579,  578,  577,  576,  575,  574,

      573,  572,  571,  570,  569,  568,  567,  566,  565,  564,
      563,  562,  561,  560,  559,  558,  391,  557,  555,  554,
      553,  552,  551,  550,  549,  467,  391,  393,  548,  316,
      547,  546,  316,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  535,  534,  533,  532,  531,  193,  530,
      529,  529,  528,  527,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  503,  502,  501,  500,  499,
      498,  497,  496,  494,  493,  492,  491,  490,  193,  487,
      486,  485,  484,  222,  483,  482,  481,  480,  479,  478,

      477,  476,  475,  474,  473,  472,  471,  470,  469,  468,
      467,  316,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  384,  457,  456,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  316,  435,  434,  433,  432,  431,
      430,  429,  428,  427,  426,  423,  422,  421,  420,  419,
      418,  417,  416,  415,  414,  413,  412,  411,  409,  408,
      407,  406,  403,  402,  401,  400,  399,  398,  397,  394,
      393,  392,  391,  390,  389,  388,  387,  386,  316,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,

      372,  371,  370,  369,  368,  367,  366,  365,  364,  361,
      360,  359,  358,  357,  356,  355,  222,  354,  353,  352,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  337,  336,  335,  334,  333,  332,
      329,  328,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  315,  314,  313,  310,  309,  308,  307,
      304,  303,  302,  301,  300,  299,  298,  297,  296,  293,
      292,  291,  290,  289,  288,  282,  276,  275,  274,  273,
      270,  269,  268,  267,  266,  265,  264,  261,  260,  255,
      254,  253,  250,  249,  248,  247,  246,  245,  244,  243,

      242,  241,  237,  236,  235,  232,  229,  226,  225,  224,
      223,  222,  221,  220,  217,  216,  213,  212,  211,  210,
      205,  204,  203,  202,  201,  200,  199,  198,  196,  193,
      190,  189,  186,  185,  184,  178,  177,  176,  170,  169,
      168,  167,   61,  159,  158,  157,  153,  138,  123,   86,
       85,   84,   80,   79,   78,   76,   61,  677,    3,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,

      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677
    } ;

static yyconst short int yy_chk[833] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    5,    5,    6,    6,    6,    7,
       21,  679,   21,   21,   21,   21,   22,   89,   22,   22,
       22,   22,  675,   40,   43,   33,   33,   40,    7,   10,

       89,   10,   33,   43,   36,   21,   33,   33,   33,   33,
       34,   33,   34,   36,   91,   34,   41,   34,   36,   41,
       72,   10,   72,   91,   46,   46,   41,   46,   10,  102,
       46,   10,   35,  102,   35,   35,  671,   10,   10,   35,
       10,   10,   10,   93,  121,   35,   10,   35,   35,   10,
       35,   37,   93,   37,  121,   37,   10,   38,  267,   38,
       37,   38,   37,   42,   42,   44,  267,   48,   38,   47,
       38,   38,   38,   47,   44,   63,   38,   48,   48,   44,
       48,   49,   73,   51,  103,  103,   47,   51,   73,   73,
       42,  108,   49,  111,   42,  670,   51,  119,  119,   49,

       57,   57,   57,   42,   68,   68,  108,   68,  111,  171,
       68,   63,  123,  123,   68,   63,   63,  140,  171,  140,
       63,  128,  189,   63,   81,   81,   81,   81,  669,   82,
       63,   82,   82,   82,   82,  128,  144,  128,  128,  147,
      155,  147,  144,  155,  161,  161,  163,  161,  163,  164,
      161,  144,  181,  144,  161,  164,  164,  188,  188,  188,
      188,  181,  194,  189,  209,  244,  194,  277,  244,  304,
      285,  386,  304,  665,  403,  664,  277,  403,  209,  285,
      483,  483,  663,  662,  661,  386,  678,  658,  678,  680,
      655,  680,  681,  649,  681,  682,  648,  682,  683,  647,

      683,  646,  645,  643,  640,  638,  637,  635,  634,  633,
      631,  626,  625,  624,  623,  620,  619,  618,  617,  616,
      615,  613,  612,  611,  610,  609,  607,  605,  604,  603,
      601,  598,  596,  595,  593,  592,  591,  590,  589,  588,
      585,  584,  583,  582,  581,  580,  579,  576,  575,  574,
      571,  570,  569,  568,  567,  566,  565,  564,  563,  562,
      560,  558,  554,  553,  551,  550,  549,  548,  546,  544,
      543,  541,  540,  539,  538,  537,  536,  535,  534,  533,
      532,  531,  530,  528,  525,  524,  523,  520,  519,  518,
      517,  516,  515,  514,  513,  511,  510,  509,  508,  507,

      506,  504,  502,  501,  500,  499,  498,  497,  496,  493,
      491,  490,  489,  488,  487,  486,  485,  484,  482,  481,
      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,
      470,  468,  466,  464,  462,  461,  458,  456,  454,  452,
      451,  450,  448,  447,  446,  444,  443,  440,  438,  437,
      435,  434,  433,  431,  430,  429,  428,  427,  426,  424,
      422,  420,  419,  418,  417,  416,  415,  414,  413,  409,
      408,  407,  406,  405,  404,  402,  401,  400,  399,  398,
      397,  396,  395,  392,  390,  389,  388,  387,  385,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  373,  371,

      370,  369,  368,  367,  366,  365,  363,  360,  359,  358,
      357,  356,  355,  352,  350,  349,  348,  347,  346,  345,
      343,  342,  341,  340,  339,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  323,  322,
      321,  320,  319,  317,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  292,  291,  289,  288,
      287,  286,  284,  283,  282,  281,  280,  279,  278,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  266,  265,
      264,  263,  262,  261,  260,  259,  258,  257,  256,  255,

      254,  253,  252,  250,  249,  248,  247,  246,  245,  243,
      242,  241,  240,  239,  238,  237,  236,  235,  234,  233,
      232,  231,  230,  229,  228,  227,  226,  225,  224,  223,
      221,  220,  219,  217,  215,  214,  213,  212,  211,  210,
      208,  207,  206,  205,  204,  203,  202,  201,  200,  199,
      198,  197,  195,  192,  191,  190,  185,  184,  183,  182,
      180,  179,  178,  177,  176,  175,  174,  173,  172,  170,
      169,  168,  167,  166,  165,  162,  160,  158,  157,  156,
      154,  153,  152,  151,  150,  149,  148,  146,  145,  143,
      142,  141,  139,  138,  137,  136,  135,  134,  133,  132,

      131,  130,  126,  125,  124,  122,  120,  118,  117,  116,
      115,  114,  113,  112,  110,  109,  107,  106,  105,  104,
      101,  100,   99,   98,   97,   96,   95,   94,   92,   90,
       88,   87,   77,   75,   74,   71,   70,   69,   67,   66,
       65,   64,   60,   55,   53,   52,   50,   45,   39,   27,
       26,   25,   20,   18,   16,   11,    8,    3,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,

      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "pnfha.lpp"
#define INITIAL 0
#line 5 "pnfha.lpp"
/* Prologue */
#include <stdarg.h>

#include "pnfha.tab.cpp"


void generate_code();
void generate_pcode(bool names);
void generate_if_line_numbers();
void generate_switch_code();
String strip_quotes(String str);
void generate_comment_code();


PNF_Variable lval;
/* Flex Definitions */
/* Flex Patterns Below %% */
#line 881 "pnfha.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 353 "pnfha.lpp"


#line 1035 "pnfha.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 678 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 759 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 355 "pnfha.lpp"
lval.put("1"); yylval = lval; return VOIDV;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 357 "pnfha.lpp"
{
			 String b;
			 if (strcmp(yytext, "true") == 0)
		          b = "true";
			 else if (strcmp(yytext, "false") == 0)
			  b = "false";
			 else
 			  b = "true";

			 lval.put(b); 
			 yylval = lval.to_boolean(); 
			 return BOOLEANV;
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 371 "pnfha.lpp"
{
			 double d = atof(yytext);
			 PNF_Number n(d);
			 PNF_Variable v(n);
			 lval.put(v.to_number());
			 yylval.put(lval.to_number());
			 return NUMBERV;
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 380 "pnfha.lpp"
{
			 char ch = yytext[1];
			 PNF_Character c(ch);
			 lval.put(c);
			 yylval = lval.to_character();
			 return CHARACTERV;
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 388 "pnfha.lpp"
{
			 String str = yytext;
			 PNF_String s(str);
			 lval.put(s);
			 yylval = lval.to_string();
			 return STRINGV;
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 396 "pnfha.lpp"
lval.put("1"); yylval = lval; return SEND;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 398 "pnfha.lpp"
lval.put("1"); yylval = lval; return COMMA;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 400 "pnfha.lpp"
lval.put("0"); yylval = lval; return LEFTP;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 402 "pnfha.lpp"
lval.put("0"); yylval = lval; return RIGHTP;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 404 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPEQUAL;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 406 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPPLUS;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 408 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPMINUS;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 410 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPTIMES;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 412 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPDIV;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 414 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPMODULUS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 416 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPPOWER;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 418 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPROOT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 420 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPINC;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 422 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPDEC;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 424 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPAND;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 426 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPAMP;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 428 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPOR;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 430 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPNOT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 432 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPCOLON;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 434 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPSUB;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 436 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPEQU;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 438 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPNEQU;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 440 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPLSS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 442 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPGTR;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 444 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPLEQU;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 446 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPGEQU;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 448 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPQUES;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 450 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPDOT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 452 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPLSQ;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 454 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPRSQ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 456 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPSTR;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 458 "pnfha.lpp"
lval.put("0"); yylval = lval; return VAR;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 460 "pnfha.lpp"
lval.put("0"); yylval = lval; return PRINT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 462 "pnfha.lpp"
lval.put("0"); yylval = lval; return PRINTLN;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 464 "pnfha.lpp"
lval.put("0"); yylval = lval; return EPRINT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 466 "pnfha.lpp"
lval.put("0"); yylval = lval; return EPRINTLN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 468 "pnfha.lpp"
lval.put("0"); yylval = lval; return END;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 470 "pnfha.lpp"
lval.put("0"); yylval = lval; return ASM;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 472 "pnfha.lpp"
lval.put("0"); yylval = lval; return LOAD;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 474 "pnfha.lpp"
lval.put("0"); yylval = lval; return GOTO;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 476 "pnfha.lpp"
lval.put("0"); yylval = lval; return ST;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 478 "pnfha.lpp"
lval.put("0"); yylval = lval; return PUSH;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 480 "pnfha.lpp"
lval.put("0"); yylval = lval; return POP;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 482 "pnfha.lpp"
lval.put("0"); yylval = lval; return TYPEOF;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 484 "pnfha.lpp"
lval.put("0"); yylval = lval; return ATOC;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 486 "pnfha.lpp"
lval.put("0"); yylval = lval; return SWITCH;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 488 "pnfha.lpp"
lval.put("0"); yylval = lval; return CSWITCH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 490 "pnfha.lpp"
lval.put("0"); yylval = lval; return CRASH;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 492 "pnfha.lpp"
lval.put("0"); yylval = lval; return VERSION;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 494 "pnfha.lpp"
lval.put("0"); yylval = lval; return HALT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 496 "pnfha.lpp"
lval.put("0"); yylval = lval; return MODT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 498 "pnfha.lpp"
lval.put("0"); yylval = lval; return RETURN;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 500 "pnfha.lpp"
lval.put("0"); yylval = lval; return GOSUB;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 502 "pnfha.lpp"
lval.put("0"); yylval = lval; return SUB;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 504 "pnfha.lpp"
lval.put("0"); yylval = lval; return EVENT;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 506 "pnfha.lpp"
lval.put("0"); yylval = lval; return UNREGISTER;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 508 "pnfha.lpp"
lval.put("0"); yylval = lval; return REGISTER;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 510 "pnfha.lpp"
lval.put("0"); yylval = lval; return REREGISTER;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 512 "pnfha.lpp"
lval.put("0"); yylval = lval; return STORE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 514 "pnfha.lpp"
lval.put("0"); yylval = lval; return IF;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 516 "pnfha.lpp"
{
			 lval.put("0");
			 yylval = lval;
			 return ELSE;
			}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 522 "pnfha.lpp"
lval.put("0"); yylval = lval; return CASE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 524 "pnfha.lpp"
lval.put("0"); yylval = lval; return CCASE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 526 "pnfha.lpp"
lval.put("0"); yylval = lval; return DEFAULT;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 528 "pnfha.lpp"
lval.put("0"); yylval = lval; return CDEFAULT;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 530 "pnfha.lpp"
lval.put("0"); yylval = lval; return BREAK;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 532 "pnfha.lpp"
lval.put("0"); yylval = lval; return LABEL;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 534 "pnfha.lpp"
lval.put("0"); yylval = lval; return WHILE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 536 "pnfha.lpp"
lval.put("0"); yylval = lval; return ADDRESSOF;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 538 "pnfha.lpp"
lval.put("0"); yylval = lval; return ADD2V;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 540 "pnfha.lpp"
lval.put("0"); yylval = lval; return STOREA;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 542 "pnfha.lpp"
lval.put("0"); yylval = lval; loopexpr = true; return DOWHILE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 544 "pnfha.lpp"
lval.put("0"); yylval = lval; loopexpr = true; return DOFOR;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 546 "pnfha.lpp"
lval.put("0"); yylval = lval; return FOR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 548 "pnfha.lpp"
lval.put("0"); yylval = lval; return FVAR;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 550 "pnfha.lpp"
lval.put("0"); yylval = lval; inforever = true; return FOREVER;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 552 "pnfha.lpp"
lval.put("0"); yylval = lval; return CONTINUE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 554 "pnfha.lpp"
lval.put("0"); yylval = lval; return CHECK;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 556 "pnfha.lpp"
lval.put("0"); yylval = lval; return HCMNT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 558 "pnfha.lpp"
lval.put("0"); yylval = lval; return FMODE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 560 "pnfha.lpp"
lval.put("0"); yylval = lval; return FOPEN;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 562 "pnfha.lpp"
lval.put("0"); yylval = lval; return FCLOSE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 564 "pnfha.lpp"
lval.put("0"); yylval = lval; return FEOF;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 566 "pnfha.lpp"
lval.put("0"); yylval = lval; return FPRINT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 568 "pnfha.lpp"
lval.put("0"); yylval = lval; return FPRINTLN;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 570 "pnfha.lpp"
lval.put("0"); yylval = lval; return FREAD;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 572 "pnfha.lpp"
lval.put("0"); yylval = lval; return MEML;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 574 "pnfha.lpp"
lval.put("0"); yylval = lval; return ENUM;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 576 "pnfha.lpp"
lval.put("0"); yylval = lval; return ENUMV;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 578 "pnfha.lpp"
lval.put("0"); yylval = lval; return RANGE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 580 "pnfha.lpp"
lval.put("0"); yylval = lval; return RANGEV;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 582 "pnfha.lpp"
lval.put("0"); yylval = lval; return ARRAY;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 584 "pnfha.lpp"
lval.put("0"); yylval = lval; return BLANK;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 586 "pnfha.lpp"
lval.put("0"); yylval = lval; return PNFASM;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 588 "pnfha.lpp"
lval.put("0"); yylval = lval; return LENGTH;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 590 "pnfha.lpp"
lval.put("0"); yylval = lval; return DUP;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 592 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return TYPE;
			}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 599 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return LTYPE;
			}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 606 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return GTYPE;
			}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 613 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return RTYPE;
			}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 620 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return VTYPE;
			}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 627 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return STYPE;
			}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 634 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return ATYPE;
			}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 641 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return CTYPE;
			}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 648 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return CMTYPE;
			}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 655 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return BFMODEC;
			}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 662 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FMODEC;
			}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 669 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return VTYPE2;
			}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 676 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return RTYPE2;
			}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 683 "pnfha.lpp"
lval.put("0"); yylval = lval; return READ;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 685 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return ID;
			}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 692 "pnfha.lpp"
return PBIN;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 694 "pnfha.lpp"
return PPBIN;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 696 "pnfha.lpp"
return PLIB;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 698 "pnfha.lpp"
return PINCLUDE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 700 "pnfha.lpp"
return PIMPORT;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 702 "pnfha.lpp"
return PDEFINE;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 704 "pnfha.lpp"
return PMACRO;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 706 "pnfha.lpp"
return PENDM;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 708 "pnfha.lpp"
return PUNDEF;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 710 "pnfha.lpp"
return PIFDEF;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 712 "pnfha.lpp"
return PIFNDEF;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 714 "pnfha.lpp"
return PELSE;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 716 "pnfha.lpp"
return PENDIF;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 718 "pnfha.lpp"
return PPDATE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 720 "pnfha.lpp"
return PPTIME;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 722 "pnfha.lpp"
return PPLINE;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 724 "pnfha.lpp"
return PPFILE;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 726 "pnfha.lpp"
return PPCDATE;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 728 "pnfha.lpp"
return PPCTIME;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 730 "pnfha.lpp"
{ 
		 ASTNode pp_statement("pp_statement");
		 pp_statement.conprint("' %s\n", yytext); 
		 tree.add_node(pp_statement); 
		}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 736 "pnfha.lpp"
return PPINCLUDE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 738 "pnfha.lpp"
return PPIMPORT;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 740 "pnfha.lpp"
return PPDEFINE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 742 "pnfha.lpp"
return PPMACRO;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 744 "pnfha.lpp"
return PPENDM;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 746 "pnfha.lpp"
return PPUNDEF;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 748 "pnfha.lpp"
return PPIFDEF;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 750 "pnfha.lpp"
return PPIFNDEF;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 752 "pnfha.lpp"
return PPELSE;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 754 "pnfha.lpp"
return PPENDIF;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 756 "pnfha.lpp"
return PPPDATE;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 758 "pnfha.lpp"
return PPPTIME;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 760 "pnfha.lpp"
return PPPLINE;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 762 "pnfha.lpp"
return PPPFILE;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 764 "pnfha.lpp"
return PPPCDATE;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 766 "pnfha.lpp"
return PPPCTIME;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 768 "pnfha.lpp"
{ 
		 ASTNode pp_statement("pp_statement");
		 pp_statement.conprint("'! %s\n", yytext); 
		 tree.add_node(pp_statement);
		}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 774 "pnfha.lpp"
{
			 inblock = true;
			 blockinstmt = true;
			 if ((!loopexpr || midloop != 0) && !inloop && !infor && !inforever && !intop && !inif)
			 {
			  ++scope;
			  varTable.insert();
			  varTable[scope].insert();
			  ++midloop;
			 }

			 lval.put("0");
			 yylval = lval;
			 return LEFTB;
			}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 790 "pnfha.lpp"
{
			 if ((!loopexpr || midloop != 0) && !inloop && !infor && !inforever && !intop && !inif)
			 {
			  --scope;
			  varTable.remove();
			  --midloop;
			 }
			 else
			 {
			  if (infor)
			  {
			   --inforfor;
			   if (inforfor == 0)
			    infor = false;
			  }

			  if (loopexpr)
			   inloop = true;
			  else
			   inloop = false;

			  loopexpr = false;
			  inforever = false;

			  if (intop)
			  {
			   --intopfor;
			   if (intopfor == 0)
			    intop = false;
			  }
			 }

			 lval.put("0");
			 yylval = lval;
			 inblock = false;
			
			 return RIGHTB;
			}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 829 "pnfha.lpp"
/* Eat up Whitespace */
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 831 "pnfha.lpp"
/* Eat up comment */
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 833 "pnfha.lpp"
{
			 String str = "Scan error: ";
			 str += yytext;
			 yyerror(str.getString().c_str());

			 lval.put("0");
			 yylval = lval;
			}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 842 "pnfha.lpp"
ECHO;
	YY_BREAK
#line 2092 "pnfha.cpp"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 678 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 678 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 677);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 842 "pnfha.lpp"

/* Additional Code */
int main(int argc, char ** argv)
{
 yydebug = 0;


 varTable[scope].insert();


 if (argc == 3)
 {
  String extension = get_extension(argv[1]);
  if (extension == ".pppha")
   preprocess(argv[1]);

  FILE * input = fopen((strip_extension(argv[1]) + ".pha").getString().c_str(), "r");
  if (!input)
  {
   yyerror("can't open file");
   return -1;
  }
  yyin = input;
  output = fopen(argv[2], "w");
  if (!output)
  {
   yyerror("can't open file for write");
   return -1;
  }
  fprintf(output, "VERSION TVOID 0V\n\n\n");

  
  int ret = yyparse();
  generate_pcode(false);
  generate_if_line_numbers();
  generate_switch_code();
  generate_comment_code();
  generate_code();


  fprintf(output, "\n\nEND TVOID 0V");
  return ret;
 }
 else
  yyerror("can't find input file or output file.");
}

void yyerror(char const * c)
{
 cout << "* ERROR: " << yylineno << ": " << c << endl;
}

String get_extension(String fileName)
{
 unsigned long index = fileName.getString().find(".");
 if (index == string::npos)
  yyerror((char *)"File has No Extension.");

 String extension = fileName.getString().substr(index);


 return extension;
}

String strip_extension(String fileName)
{
 unsigned long index = fileName.getString().find(".");
 if (index == string::npos)
  yyerror((char *)"File has No Extension.");

 String stripped = fileName.getString().substr(0, index);


 return stripped;
}

void preprocess(String arg)
{ 
 _spawnl(_P_WAIT, "pnfpp.exe", "pnfpp.exe", (strip_extension(arg) + (char *)".pppha").getString().c_str(), 
 		 (strip_extension(arg) + (char *)".pha").getString().c_str(), NULL);
}

int conprint(const char * format, ...)
{
 va_list arg;
 int done = 0;

 va_start(arg, format);

 out.insert();
 done = vsnprintf(outbuffer, 256, format, arg);
 String str = "";
 if (outbuffer != NULL)
  str += outbuffer;
 out[outcount] = str;
 ++outcount;

 va_end(arg);


 return done;
}

void generate_code()
{
 unsigned long len = out.length();
 for (unsigned long i = 0; i < out.length(); ++i)
 {
  if (out[i].getString() == "")
   out.remove(i);
 }

 for (unsigned long i = 0; i < out.length(); ++i)
 {
  fprintf(output, "%s", out[i].getString().c_str());
 }
}

void movelineno(unsigned long index, unsigned long line)
{
 unsigned long i;
 for (i = 0; i < out.length(); ++i)
 {
  if (i < statementlineno.length())
   if (statementlineno[i] == line)
    break;
 }
 cout << i << endl;
 //out.move(index, i);
}

void sort(Array<unsigned long> & array)
{
 bool changed = false;
 do
 {
  changed = false;
  for (unsigned long i = 0; (i + 1) < array.length(); ++i)
  {
   if (array[i + 1] < array[i])
   {
    swap(array[i], array[i + 1]);
    changed = true;
   }
  }
 } while (changed == true);
}

void sort_lines(Array<String> & array)
{
 bool changed = false;
 do
 {
  changed = false;
  for (unsigned long i = 0; (i + 1) < array.length(); ++i)
  {
   String str;
   str = array[i];
   unsigned long k = str.getString().find(':');
   if (k == string::npos)
   {
    continue;
   }
   str = array[i].getString().substr(k + 2);
   unsigned long l = atoi(str.getString().c_str());

   str = array[i + 1];
   k = str.getString().find(':');
   if (k == string::npos)
   {
    continue;
   }
   str = array[i + 1].getString().substr(k + 2);
   unsigned long l2 = atoi(str.getString().c_str());

   if (l2 < l)
   {
    String temp1 = array[i], temp2 = array[i + 1];
    array[i] = temp2;
    array[i + 1] = temp1;

    changed = true;
   }
  }
 } while (changed == true);
}

void generate_pcode(bool names)
{
 unsigned long len = tree.nodenumber();

 for (unsigned long i = 0; i < len; ++i)
 {
  ASTNode node(tree.getNode(i));
  String nodename = node.getName();
  nodename += ":\n\n";
  if (names)
   conprint("%s", nodename.getString().c_str());

  for (unsigned long j = 0; j < node.getValue().length(); ++j)
   conprint("%s", node.getValue()[j].getString().c_str());
 }
}

void generate_if_line_numbers()
{
 /*
  1. Test if the if is just an if statement.
  2. If it is just an if, change end_1 to iffalse_or_end_1.
  3. Test if the if is an if else ladder with one if-else.
  4. If step 3 is true, change end_2 to end_1.
 */
 bool iffound = false, ifendfound = false, if2found = false, if2endfound = false, if3found = false;
 String rstring = "";
 string modstring = "";
 String modstring2 = "";
 Array<String> modstrings;
 bool changed = false;
 ASTNode node;
 unsigned long len = tree.nodenumber();
 unsigned long changedindex = 0;
 unsigned long nodenumber = 0;

 // Step 1
 for (unsigned long i = 0; i < out.length(); ++i)
 {
  String line = out[i];
  if (line[0] == ';')
  {
   int index = line.getString().find("Begin if :1");
   if (index != string::npos)
    iffound = true;
  }
 }

 for (unsigned long i = 0; i < out.length(); ++i)
 {
  String line = out[i];
  if (line[0] == ';')
  {
   int index = line.getString().find("End if :1");
   if (index != string::npos)
    ifendfound = true;
  }
 }

 // Step 2
 nodenumber = 0;
 rstring = "GOTOL TSTRING \"iffalse_or_end_1\"\n";
 if (iffound == true && ifendfound == false && if2found == false && if2endfound == false && if3found == false)
 {  
  for (unsigned long i = 0; i < len; ++i)
  {
   node.setNode(tree.getNode(i));
   String nodename = node.getName();

   if (nodename == (String)("if_statementp3_1"))
   {
    nodenumber = i;
    for (unsigned long j = 0; j < node.getValue().length(); ++j)
    {
     int index = node.getValue()[j].getString().find("GOTOL TSTRING \"end_1\"\n");
     if (index != string::npos)
     {
      modstring = node.getValue()[j].getString();
      modstring.erase(index);
      modstring.insert(index, rstring.getString().c_str());
      modstring2 = modstring;
      changed = true;
      changedindex = j;
      break;
     }
    }
   }
  }
 }

 if (changed == true)
 {
  for (unsigned long i = out.length() - 1; i > 0; --i)
  {
   out.remove();
   --outcount;
  }

  node.setNode(tree.getNode(nodenumber));

  for (unsigned long i = 0; i < node.getValue().length(); ++i)
  {
   if (i != 0)
    modstrings.insert();

   if (i != changedindex)
    modstrings[i] = node.getValue()[i];
   else
    modstrings[i] = modstring2;
  }
  node.setValue(modstrings);
  tree.setNode(nodenumber, node);
 }

 // Step 3
 for (unsigned long i = 0; i < out.length(); ++i)
 {
  String line = out[i];
  if (line[0] == ';')
  {
   int index = line.getString().find("Begin if :2");
   if (index != string::npos)
    if2found = true;
  }
 }

 for (unsigned long i = 0; i < out.length(); ++i)
 {
  String line = out[i];
  if (line[0] == ';')
  {
   int index = line.getString().find("End if :2");
   if (index != string::npos)
    if2endfound = true;
  }
 }

 for (unsigned long i = 0; i < out.length(); ++i)
 {
  String line = out[i];
  if (line[0] == ';')
  {
   int index = line.getString().find("Begin if :3");
   if (index != string::npos)
    if3found = true;
  }
 }


 // Step 4
 nodenumber = 0;
 rstring = "GOTOL TSTRING \"end_1\"\n";
 if (iffound == true && ifendfound == true && if2found == true && if2endfound == false && if3found == false)
 {
  for (unsigned long i = 0; i < len; ++i)
  {
   node.setNode(tree.getNode(i));
   String nodename = node.getName();

   if (nodename == (String)("if_statementp3_2"))
   {
    nodenumber = i;

    for (unsigned long j = 0; j < node.getValue().length(); ++j)
    {
     int index = node.getValue()[j].getString().find("GOTOL TSTRING \"end_2\"\n");
     if (index != string::npos)
     {
      changedindex = j;
      modstring = node.getValue()[j].getString();
      modstring.erase(index);
      modstring.insert(index, rstring.getString().c_str());
      modstring2 = modstring;
      changed = true;
      break;
     }
    }
   }
  }

  if (changed == true)
  {
   node.setNode(tree.getNode(nodenumber));

   for (unsigned long i = 0; i < node.getValue().length(); ++i)
   {
    if (i != 0)
     modstrings.insert();

    if (i != changedindex)
     modstrings[i] = node.getValue()[i];
    else
     modstrings[i] = modstring2;
   }
   node.setValue(modstrings);
   tree.setNode(nodenumber, node);

   for (unsigned long i = out.length() - 1; i > 0; --i)
   {
    out.remove();
    --outcount;
   }
  }
 }

 if (changed == true)
 {
  generate_pcode(false);
 }
}

void generate_switch_code()
{
 /*
  1. Determine if there is a switch or not. Do other steps only if there is a switch.
  2. Find highest switch_case.
  3. Replace the skip_switch_case that is higher than that with GOTOL TSTRING default_switch_(switchcount).
 */
 // Step 1
 if (switchfound)
 {
  // Step 2
  String num;
  String num2;
  String underscore = "_";
  String str;
  unsigned long j = 0;
  for (unsigned long i = 0; i < out.length(); ++i)
  {
   num.from_long(i);
   String line = out[i].getString();
   for (unsigned long k = 1; k <= switchcounter; ++k)
   {
    num2.from_long(k);
    str = (String)"LBL TSTRING \"switch_case_" + num2 + underscore + num + (String)"\"\n";
   
    for (unsigned long l = 0; l < out.length(); ++l)
    {
     if (out[l] == str)
      ++j;
    }
   }
  }

  // Step 3
  for (unsigned long i = 0; i < out.length(); ++i)
  {
   String line = out[i];
   num.from_long(j + 1);

   for (unsigned long k = 1; k <= switchcounter; ++k)
   {
    num2.from_long(k);
    str = (String)"GOTOL TSTRING \"skip_switch_case_" + num2 + underscore + num + (String)"\"\n";
   
    for (unsigned long l = 0; l < out.length(); ++l)
    {
     if (out[l] == str)
      j = l;
    }
   }
  }

  String num3;
  num3.from_long(switchcounter);
  Array<String> out2;
  for (unsigned long i = 0, k = 0; i < out.length(); ++i)
  {
   if (i != j)
   {
    out2[k] = out[i];
    ++k;
    out2.insert();
   }
   else
   {
    out2[k] = "GOTOL TSTRING \"default_switch_";
    out2[k] += num3;
    out2[k] += "\"\n";
    ++k;
    out2.insert();
   }
  }
  out = out2;
 }
}

String strip_quotes(String str)
{
 String str2 = "";

 for (unsigned long i = 0; i < str.length(); ++i)
 {
  if (i == 0)
   continue;
  else if (i == str.length() - 1)
   continue;
  else
   str2 += str[i];
 }

 return str2;
}

void generate_comment_code()
{
 for (unsigned long i = 0; i < out.length(); ++i)
 {
  if (out[i][0] == ';' && out[i][1] == '\\')
  {
   String str = "";
   for (unsigned long j = 0; j < out[i].length(); ++j)
   {
    if (j == 1)
     continue;
    else
     str += out[i][j];
   }
   out[i] = str;
  }
 }
}