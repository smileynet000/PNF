#line 2 "pnfha.cpp"

#line 4 "pnfha.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 203
#define YY_END_OF_BUFFER 204
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[823] =
    {   0,
      160,  160,  204,  202,  200,  200,   23,  202,   37,   15,
       21,  202,    8,    9,   13,   11,    7,   12,   34,   14,
        3,    3,   24,    6,   28,   10,   29,   33,  160,   39,
       35,   36,   16,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,   38,  160,  198,  202,  199,  200,
       27,   17,    0,    5,  160,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   20,    0,
       18,   19,  201,    3,    3,    1,   30,   26,   31,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,

      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
       69,  149,  160,  147,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,   49,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,   22,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    4,

      201,    3,   32,  160,  160,  160,  160,  149,  160,  160,
       46,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  105,  160,   45,  160,  160,  144,
      144,  160,  160,  160,  160,  160,  160,  160,  128,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  149,  143,   51,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  153,  160,  160,  160,  140,
      160,  160,  144,  160,  160,  160,   52,  160,  160,  160,

      160,  160,  160,  160,  160,  119,   40,  160,  146,  160,
      160,  160,  160,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  180,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  160,  160,
      160,  160,  160,  160,   54,  160,  160,  160,  160,  160,
       71,  160,  160,  160,  160,  160,  160,  160,  160,  122,
      160,  160,  160,  160,  160,  160,  160,  160,   70,  160,
      160,   97,  160,  160,  160,  160,  160,  160,  160,   92,
      160,  160,  138,   83,  160,  160,  160,  160,  109,  160,

      160,   84,  160,   48,   59,  160,  160,  160,  160,  160,
      160,   47,  131,   96,  160,  120,   60,  160,  143,  160,
      160,  160,  160,  160,  160,   50,  160,  159,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      106,    2,  160,  160,  160,  146,  160,  160,  160,  160,
      160,  160,  160,  160,  139,  160,  141,  197,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  180,  161,  163,    0,    0,    0,    0,
        0,    0,    0,    0,  142,    0,  172,    0,  168,    0,
        0,    0,    0,    0,    0,   79,  160,  160,  160,  101,

      160,  160,  102,  160,   75,   72,  160,  160,   87,  160,
      160,  160,  160,   57,  160,  160,  160,  129,  160,  160,
      160,  107,  160,   98,  160,   64,  160,  160,  160,  160,
       89,   90,  135,  160,  160,  160,   95,  160,  160,  160,
      160,   62,  160,  148,  160,   76,  160,  160,  160,  160,
      160,  160,  160,  160,  160,   41,   99,  160,  160,  160,
      160,  160,  160,   68,  160,  160,  160,  160,  160,  160,
      160,  160,  117,  160,  160,  126,  160,  150,  160,  146,
      124,  197,    0,    0,    0,    0,    0,    0,    0,  189,
        0,  185,    0,    0,    0,    0,    0,    0,  162,    0,

        0,    0,    0,    0,    0,    0,    0,  173,  170,    0,
        0,    0,  167,  169,  160,  145,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,   82,  108,  160,
      160,  160,   43,  152,  160,  160,   91,  160,  160,  160,
       93,  160,  160,  160,  160,  104,  160,  143,  160,  160,
      100,  160,  160,   61,  151,  160,   80,  115,  160,   55,
      160,  154,  160,   53,  160,  113,  160,  137,  112,  160,
      160,  136,   77,    0,    0,    0,    0,    0,    0,    0,
      190,  187,    0,    0,    0,  184,  186,    0,    0,    0,
        0,    0,    0,    0,  166,  171,    0,    0,  160,  160,

      160,  160,  160,   88,  160,  160,   56,  160,   73,  127,
      125,  132,  160,  121,  160,  130,  160,  160,  160,  156,
      160,  160,  160,  103,  160,   42,  160,  160,  123,  160,
      160,  160,  160,  134,  160,   58,  133,    0,    0,    0,
        0,    0,    0,  183,  188,    0,    0,    0,    0,  174,
      177,  176,  175,    0,  165,    0,  160,  160,   74,  160,
      160,   86,  160,  110,  114,   81,   44,   85,  160,   94,
      157,  155,  160,   66,  160,  160,  160,  118,  160,    0,
        0,  191,  194,  193,  192,  182,    0,  178,  179,    0,
      164,   78,  160,  160,  111,  160,  160,  160,  116,  160,

      160,  195,  196,  181,    0,  160,  160,  160,  158,  160,
       67,   63,   65,    0,  160,  160,  160,  160,  160,  160,
      160,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,   28,    1,   29,   30,   31,   32,   33,   34,
       35,   35,   36,   35,   35,   37,   38,   39,   35,   40,
       35,   41,   35,   42,   35,   43,   35,   35,   35,   35,
       44,    1,   45,   46,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   35,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1
    } ;

static const flex_int16_t yy_base[829] =
    {   0,
        0,    0,  914,  915,   74,   77,   56,  907,    0,   95,
      903,    0,  915,  915,  915,  897,  915,  894,  915,  891,
       66,   72,  915,  915,  882,  881,  880,  915,    0,    0,
      915,  915,  915,   47,   58,  102,   56,   68,  108,  843,
       48,   80,  840,  153,   45,   72,  836,  116,  136,  127,
      145,   79,  165,  847,    0,  849,  915,  826,  915,  183,
      915,  915,  893,  915,    0,  179,  893,  861,  860,  865,
      187,  844,  845,  840,   60,  138,  843,  829,  915,  879,
      915,  915,    0,  221,  228,    0,  861,  915,  915,  836,
      818,   42,  822,   62,  824,   97,  835,  821,  833,  818,

      827,  813,  829,  824,  113,  173,  827,  805,  809,  819,
      153,  808,  805,  141,  805,  816,  192,  808,  807,  803,
      802,  174,  147,   32,  802,  814,  186,  802,  792,  797,
        0,  205,  791,    0,  808,  795,  211,  795,  803,  799,
      788,  791,  784,  796,  191,  792,  782,  785,  212,  774,
      783,  795,  788,  789,  199,  791,  783,  777,  785,  773,
      768,  768,  772,  769,  208,  779,  766,  201,  767,  772,
      771,  762,  915,  820,  248,  772,  216,  228,  775,  761,
      817,  781,  789,  782,  251,  788,  780,  779,  778,  763,
      753,  758,  745,  758,  233,  745,  757,  756,  754,  915,

        0,  276,  915,  248,  752,  754,  754,    0,  226,  753,
        0,  750,  735,  750,  736,  737,  747,  742,  728,  739,
      727,  740,  730,  728,   97,  716,  721,  729,  720,  735,
      720,  729,  719,  724,    0,  726,  243,  717,  720,  714,
        0,  726,  232,  708,  710,  718,  719,  717,  254,  704,
      711,  253,  710,  715,  700,  696,  700,  695,  708,  692,
      698,  690,  690,  694,  702,  699,  701,  688,  246,  255,
      702,  689,  699,  684,  261,    0,  690,  684,  689,  689,
      691,  685,  688,  672,  675,    0,  678,  290,  668,    0,
      671,  257,  670,  667,  681,  670,    0,   76,  666,  673,

      676,  665,  674,  673,  668,    0,  667,  655,  656,  669,
      668,  659,  655,  712,  284,  686,  678,  677,  676,  658,
      645,  658,  266,  645,  657,  656,  654,    0,  696,  695,
      663,  672,  664,  657,  661,  658,  658,  628,  644,  637,
      640,  258,  639,  639,  627,  629,  623,  634,  617,  632,
      622,  630,  630,  609,    0,  623,  614,  619,  624,  617,
        0,  622,  625,  624,  613,  622,  617,  612,  611,    0,
      611,  599,  612,  596,  598,  605,  594,  603,    0,  605,
      595,  588,  594,  588,  592,  590,  591,  598,  584,    0,
      596,  586,  596,    0,  577,  596,  582,  591,    0,  580,

      272,    0,  591,    0,    0,  578,  586,  571,  572,  576,
      568,    0,    0,    0,  569,    0,    0,  566,  583,  578,
      562,  563,  560,  560,  559,    0,  572,    0,  558,  568,
      557,  568,  552,  566,  565,  564,  554,  564,  551,  562,
        0,    0,  561,  543,  547,  268,  547,  542,  552,  546,
      556,  543,  546,  549,    0,  548,    0,    0,  570,  562,
      555,  559,  556,  556,  537,  540,  272,  539,  539,  527,
      529,  523,  534,    0,  915,  915,  577,  542,  545,  549,
      548,  547,  546,  518,  915,  516,  915,  523,  915,  522,
      522,  509,  505,  509,  517,    0,  504,  502,  508,    0,

      518,  494,    0,  516,    0,    0,  496,  512,    0,  498,
      499,  493,  497,    0,  507,  495,  496,  504,  500,  496,
      492,    0,  488,    0,  483,    0,  497,  496,  484,  493,
        0,    0,    0,  492,  483,  476,    0,  475,  492,  487,
      482,    0,  471,    0,  469,    0,  480,  463,  477,  473,
      467,  464,  469,  467,  471,  467,  457,  458,  467,  461,
      313,  469,  459,  471,  464,  451,  449,  460,  464,  452,
      450,  458,  442,  444,  452,  286,  458,    0,  444,    0,
      290,    0,  463,  466,  470,  469,  468,  467,  438,  915,
      445,  915,  444,  444,  431,  427,  431,  439,  915,  458,

      457,  478,  477,  476,  475,  418,  432,  915,  915,  430,
      416,  430,  915,  915,  415,    0,  430,  417,  418,  410,
      410,  408,  417,  405,  416,  404,  403,    0,    0,  409,
      415,  403,  406,    0,  412,  412,    0,  398,  409,  401,
        0,  400,  405,  395,  406,    0,  387,  386,  385,  391,
        0,  399,  385,    0,    0,  383,    0,  380,  381,    0,
      380,    0,  392,    0,  396,    0,  378,  392,    0,  382,
      379,  389,    0,  405,  404,  425,  424,  423,  422,  380,
      915,  915,  378,  364,  378,  915,  915,  417,  416,  414,
      413,  412,  411,  363,  915,  915,  417,  368,  356,  356,

      346,  357,   49,    0,   92,  129,    0,  143,  155,  178,
      236,    0,  259,    0,  277,  281,  271,  280,  283,    0,
      282,  278,  293,    0,  294,    0,  283,  282,    0,  301,
      295,  288,  287,    0,  302,    0,    0,  344,  345,  345,
      346,  347,  348,  915,  915,  357,  310,  351,  352,  915,
      915,  915,  915,  317,  915,  362,  314,  316,    0,  305,
      309,    0,  319,  351,    0,    0,    0,    0,  321,    0,
        0,    0,  318,    0,  323,  312,  316,    0,  326,  367,
      368,  915,  915,  915,  915,  915,  377,  915,  915,  316,
      915,    0,  313,  332,    0,  321,  324,  324,    0,  337,

      326,  915,  915,  915,  329,  327,  330,  333,    0,  335,
        0,    0,    0,  333,  330,  348,  340,  349,  340,  352,
      352,  915,  404,  403,  407,  410,  413,  416
    } ;

static const flex_int16_t yy_def[829] =
    {   0,
      822,    1,  822,  822,  822,  822,  822,  823,  824,  822,
      822,  825,  822,  822,  822,  822,  822,  822,  822,  822,
      824,  824,  822,  822,  822,  822,  822,  822,  824,  824,
      822,  822,  822,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  822,  822,  822,  822,
      822,  822,  823,  822,  824,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  826,  822,  824,  824,  822,  822,  822,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,

      826,  822,  822,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  827,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  828,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  827,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  828,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,

      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  822,  822,  822,  822,  824,  824,  824,  824,  824,
      824,  824,  824,  822,  824,  824,  824,  824,  824,  824,
      824,    0,  822,  822,  822,  822,  822,  822
    } ;

static const flex_int16_t yy_nxt[991] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   23,   24,   25,   26,   27,   28,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       30,   29,   29,   31,   32,   33,   29,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   29,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       29,   56,   57,   58,   59,   60,   60,   60,   60,   60,
       60,   61,   84,  252,   85,   85,   85,   85,   84,  206,
       85,   85,   85,   85,  253,  128,  138,   90,   91,  129,

      634,   62,   66,  207,   67,   92,  139,  110,   86,   93,
       94,   95,   96,   98,   97,  209,   99,  111,  193,  100,
      194,  101,  112,  140,   68,  210,  113,  442,  114,  130,
      115,   69,  131,  141,   70,  116,  443,  117,  142,  165,
      132,   71,   72,  166,   73,   74,   75,  368,  208,  102,
       76,  103,  104,  761,   77,  118,  105,  119,  212,  120,
      221,   78,  369,  106,  222,  107,  108,  121,  109,  122,
      123,  124,  134,  134,  125,  126,  144,  145,  153,  146,
      762,  154,  147,  148,   60,   60,   60,  149,  174,  763,
      195,  237,  155,  156,  250,  157,  158,  196,  197,  159,

      135,  150,  151,  152,  136,  231,  160,  238,  161,  162,
      251,  163,  167,  232,  137,  164,  168,  185,  186,  233,
      187,  234,  764,  188,  169,  175,  170,  765,  189,  176,
      177,  223,  224,  225,  178,  226,  248,  249,  179,  202,
      202,  202,  202,  241,   84,  180,   85,   85,   85,   85,
      256,  257,  261,  276,  242,  277,  290,  243,  267,  281,
      291,  308,  292,  302,  309,  282,  303,  262,  349,  263,
      241,  304,  268,  305,  321,  283,  322,  284,  315,  316,
      323,  317,  332,  343,  318,  766,  290,  324,  325,  319,
      290,  386,  333,  344,  202,  202,  202,  202,  380,  387,

      398,  381,  393,  394,  414,  395,  416,  415,  422,  290,
      290,  350,  437,  488,  571,  459,  468,  489,  399,  767,
      417,  539,  540,  438,  423,  460,  469,  591,  580,  572,
      768,  592,  655,  655,  668,  669,  769,  541,  672,  673,
      770,  771,  772,  773,  457,  457,  774,  775,  776,  434,
      777,  778,  779,  290,  780,  781,  782,  783,  784,  785,
      786,  787,  788,  789,  790,  791,  792,  616,  455,  457,
      793,  795,  796,  797,  798,  799,  800,  801,  802,  803,
      804,  805,  806,  807,  809,  810,  794,  811,  812,  813,
      814,  808,  815,  580,  816,  580,  485,  817,  818,  819,

      580,  820,  821,  580,   63,   65,   63,   80,  760,   80,
      201,  759,  201,  474,  758,  474,  582,  757,  582,  756,
      755,  754,  753,  752,  751,  750,  749,  748,  747,  746,
      745,  744,  743,  742,  741,  740,  739,  738,  737,  736,
      735,  734,  733,  732,  290,  662,  731,  730,  729,  728,
      727,  726,  725,  724,  723,  722,  721,  720,  719,  718,
      717,  716,  715,  714,  713,  712,  711,  710,  709,  708,
      707,  706,  705,  704,  703,  702,  701,  455,  700,  699,
      698,  697,  696,  695,  694,  693,  692,  691,  690,  689,
      688,  687,  686,  685,  684,  683,  682,  681,  680,  679,

      678,  677,  676,  675,  674,  671,  670,  667,  666,  665,
      664,  663,  662,  661,  660,  659,  658,  455,  657,  656,
      290,  654,  653,  652,  651,  650,  649,  286,  648,  544,
      455,  457,  647,  290,  646,  645,  290,  644,  643,  642,
      641,  640,  639,  638,  637,  636,  635,  634,  633,  632,
      631,  630,  629,  628,  627,  626,  625,  624,  623,  622,
      621,  620,  619,  618,  208,  617,  616,  616,  615,  614,
      613,  612,  611,  610,  609,  608,  607,  606,  605,  604,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  590,  589,  588,  587,  586,  585,  584,  583,  581,

      580,  579,  578,  577,  576,  575,  574,  573,  570,  569,
      208,  568,  567,  566,  565,  564,  241,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  547,  546,  545,  544,  290,  543,  542,
      538,  537,  536,  535,  534,  533,  532,  531,  530,  442,
      529,  528,  527,  526,  525,  524,  523,  522,  521,  520,
      519,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      290,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  487,  486,  485,  484,  483,  482,  481,  480,  479,

      478,  477,  476,  475,  473,  472,  471,  470,  467,  466,
      465,  464,  463,  462,  461,  458,  457,  456,  455,  454,
      453,  452,  451,  450,  449,  448,  447,  446,  445,  444,
      441,  290,  440,  439,  436,  435,  433,  432,  431,  430,
      429,  428,  427,  426,  425,  424,  421,  420,  419,  418,
      413,  412,  411,  410,  286,  409,  408,  407,  406,  241,
      405,  404,  403,  402,  401,  400,  397,  396,  392,  391,
      390,  389,  388,  385,  384,  383,  382,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  370,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,

      354,  353,  352,  351,  348,  347,  346,  345,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  331,  330,  329,
      328,  327,  326,  320,  314,  313,  312,  311,  310,  307,
      306,  301,  300,  299,  298,  297,  296,  295,  294,  293,
      289,  288,  287,  286,  285,  280,  279,  278,  275,  274,
      273,  272,  271,  270,  269,  266,  265,  264,  260,  259,
      258,  255,  254,  247,  246,  245,  244,  240,  239,  236,
      235,  230,  229,  228,  227,  220,  219,  218,  217,  216,
      215,  214,  213,  211,  208,  205,  204,  203,  200,  199,
      198,  192,  191,  190,  184,  183,  182,  181,   64,  173,

      172,  171,  143,  133,  127,   89,   88,   87,   83,   82,
       81,   79,   64,  822,    3,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822
    } ;

static const flex_int16_t yy_chk[991] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    5,    5,    6,    6,
        6,    7,   21,  124,   21,   21,   21,   21,   22,   92,
       22,   22,   22,   22,  124,   41,   45,   34,   34,   41,

      703,    7,   10,   92,   10,   34,   45,   37,   21,   34,
       34,   34,   34,   35,   34,   94,   35,   37,   75,   35,
       75,   35,   37,   46,   10,   94,   38,  298,   38,   42,
       38,   10,   42,   46,   10,   38,  298,   38,   46,   52,
       42,   10,   10,   52,   10,   10,   10,  225,   96,   36,
       10,   36,   36,  705,   10,   39,   36,   39,   96,   39,
      105,   10,  225,   36,  105,   36,   36,   39,   36,   39,
       39,   39,   44,   44,   39,   39,   48,   48,   50,   48,
      706,   50,   48,   49,   60,   60,   60,   49,   66,  708,
       76,  114,   50,   50,  123,   50,   51,   76,   76,   51,

       44,   49,   49,   49,   44,  111,   51,  114,   51,   51,
      123,   51,   53,  111,   44,   51,   53,   71,   71,  111,
       71,  111,  709,   71,   53,   66,   53,  710,   71,   66,
       66,  106,  106,  106,   66,  106,  122,  122,   66,   84,
       84,   84,   84,  117,   85,   66,   85,   85,   85,   85,
      127,  127,  132,  145,  117,  145,  155,  117,  137,  149,
      155,  168,  155,  165,  168,  149,  165,  132,  204,  132,
      132,  165,  137,  165,  177,  149,  177,  149,  175,  175,
      178,  175,  185,  195,  175,  711,  209,  178,  178,  175,
      209,  243,  185,  195,  202,  202,  202,  202,  237,  243,

      252,  237,  249,  249,  269,  249,  270,  269,  275,  288,
      288,  204,  292,  342,  446,  315,  323,  342,  252,  713,
      270,  401,  401,  292,  275,  315,  323,  467,  715,  446,
      716,  467,  561,  561,  576,  576,  717,  401,  581,  581,
      718,  719,  721,  722,  723,  725,  727,  728,  730,  288,
      731,  732,  733,  735,  738,  739,  740,  741,  742,  743,
      746,  747,  748,  749,  754,  756,  757,  758,  760,  761,
      763,  764,  769,  773,  775,  776,  777,  779,  780,  781,
      787,  790,  793,  794,  796,  797,  763,  798,  800,  801,
      805,  794,  806,  807,  808,  810,  814,  815,  816,  817,

      818,  819,  820,  821,  823,  824,  823,  825,  702,  825,
      826,  701,  826,  827,  700,  827,  828,  699,  828,  698,
      697,  694,  693,  692,  691,  690,  689,  688,  685,  684,
      683,  680,  679,  678,  677,  676,  675,  674,  672,  671,
      670,  668,  667,  665,  663,  661,  659,  658,  656,  653,
      652,  650,  649,  648,  647,  645,  644,  643,  642,  640,
      639,  638,  636,  635,  633,  632,  631,  630,  627,  626,
      625,  624,  623,  622,  621,  620,  619,  618,  617,  615,
      612,  611,  610,  607,  606,  605,  604,  603,  602,  601,
      600,  598,  597,  596,  595,  594,  593,  591,  589,  588,

      587,  586,  585,  584,  583,  579,  577,  575,  574,  573,
      572,  571,  570,  569,  568,  567,  566,  565,  564,  563,
      562,  560,  559,  558,  557,  556,  555,  554,  553,  552,
      551,  550,  549,  548,  547,  545,  543,  541,  540,  539,
      538,  536,  535,  534,  530,  529,  528,  527,  525,  523,
      521,  520,  519,  518,  517,  516,  515,  513,  512,  511,
      510,  508,  507,  504,  502,  501,  499,  498,  497,  495,
      494,  493,  492,  491,  490,  488,  486,  484,  483,  482,
      481,  480,  479,  478,  477,  473,  472,  471,  470,  469,
      468,  466,  465,  464,  463,  462,  461,  460,  459,  456,

      454,  453,  452,  451,  450,  449,  448,  447,  445,  444,
      443,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  427,  425,  424,  423,  422,  421,  420,
      419,  418,  415,  411,  410,  409,  408,  407,  406,  403,
      400,  398,  397,  396,  395,  393,  392,  391,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  378,  377,
      376,  375,  374,  373,  372,  371,  369,  368,  367,  366,
      365,  364,  363,  362,  360,  359,  358,  357,  356,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  341,  340,  339,  338,  337,  336,  335,  334,  333,

      332,  331,  330,  329,  327,  326,  325,  324,  322,  321,
      320,  319,  318,  317,  316,  314,  313,  312,  311,  310,
      309,  308,  307,  305,  304,  303,  302,  301,  300,  299,
      296,  295,  294,  293,  291,  289,  287,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  274,  273,  272,  271,
      268,  267,  266,  265,  264,  263,  262,  261,  260,  259,
      258,  257,  256,  255,  254,  253,  251,  250,  248,  247,
      246,  245,  244,  242,  240,  239,  238,  236,  234,  233,
      232,  231,  230,  229,  228,  227,  226,  224,  223,  222,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,

      210,  207,  206,  205,  199,  198,  197,  196,  194,  193,
      192,  191,  190,  189,  188,  187,  186,  184,  183,  182,
      181,  180,  179,  176,  174,  172,  171,  170,  169,  167,
      166,  164,  163,  162,  161,  160,  159,  158,  157,  156,
      154,  153,  152,  151,  150,  148,  147,  146,  144,  143,
      142,  141,  140,  139,  138,  136,  135,  133,  130,  129,
      128,  126,  125,  121,  120,  119,  118,  116,  115,  113,
      112,  110,  109,  108,  107,  104,  103,  102,  101,  100,
       99,   98,   97,   95,   93,   91,   90,   87,   80,   78,
       77,   74,   73,   72,   70,   69,   68,   67,   63,   58,

       56,   54,   47,   43,   40,   27,   26,   25,   20,   18,
       16,   11,    8,    3,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[204] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "pnfha.lpp"
#line 5 "pnfha.lpp"
/* Prologue */
/*
Copyright (C) 2019 Dennis Earl Smiley

This file is part of pnfha.

    pnfha is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pnfha is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pnfha.  If not, see <https://www.gnu.org/licenses/>. 
*/
/*
CHANGELOG
=========

5/3/19 Origional a-a-a - 1. The first version.
			 2. Added new LTYPE for function return values...
			 3. Debugged...
			 4. Added default values to functions.
			 5. Debugged...
			 6. Debugged...
			 7. Implemented through segments...

1/23/23 Origional a-a-b - 1. Got loops implemented.
*/
#include <stdarg.h>

#include "pnfha.tab.cpp"


void generate_code();
void generate_pcode(bool names);
void generate_switch_code();
String strip_quotes(String str);
void generate_comment_code();


PNF_Variable lval;
#line 1014 "pnfha.cpp"
/* Flex Definitions */
/* Flex Patterns Below %% */
#line 1017 "pnfha.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 476 "pnfha.lpp"


#line 1237 "pnfha.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 823 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 915 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 478 "pnfha.lpp"
lval.put("1"); yylval = lval; return VOIDV;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 480 "pnfha.lpp"
{
			 String b;
			 if (strcmp(yytext, "true") == 0)
		          b = "true";
			 else if (strcmp(yytext, "false") == 0)
			  b = "false";
			 else
 			  b = "true";

			 bool b2 = b == "true" ? true : false;
			 PNF_Boolean b3(b2);

			 lval.put(b3);
			 yylval = lval.to_boolean();
			 return BOOLEANV;
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 497 "pnfha.lpp"
{
			 double d = atof(yytext);
			 PNF_Number n(d);
			 lval.put(n);
			 yylval = lval.to_number();
			 return NUMBERV;
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 505 "pnfha.lpp"
{
			 char ch = yytext[1];
			 PNF_Character c(ch);
			 lval.put(c);
			 yylval = lval.to_character();
			 return CHARACTERV;
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 513 "pnfha.lpp"
{
			 String str = yytext;
			 PNF_String s(str);
			 lval.put(s);
			 yylval = lval.to_string();
			 return STRINGV;
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 521 "pnfha.lpp"
lval.put("1"); yylval = lval; return SEND;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 523 "pnfha.lpp"
lval.put("1"); yylval = lval; return COMMA;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 525 "pnfha.lpp"
lval.put("0"); yylval = lval; return LEFTP;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 527 "pnfha.lpp"
lval.put("0"); yylval = lval; return RIGHTP;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 529 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPEQUAL;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 531 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPPLUS;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 533 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPMINUS;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 535 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPTIMES;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 537 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPDIV;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 539 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPMODULUS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 541 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPPOWER;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 543 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPROOT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 545 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPINC;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 547 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPDEC;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 549 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPAND;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 551 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPAMP;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 553 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPOR;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 555 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPNOT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 557 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPCOLON;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 559 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPSUB;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 561 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPEQU;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 563 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPNEQU;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 565 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPLSS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 567 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPGTR;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 569 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPLEQU;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 571 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPGEQU;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 573 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPCMP;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 575 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPQUES;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 577 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPDOT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 579 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPLSQ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 581 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPRSQ;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 583 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPSTR;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 585 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPSTRTIMES;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 587 "pnfha.lpp"
lval.put("0"); yylval = lval; return OPRUN;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 589 "pnfha.lpp"
lval.put("0"); yylval = lval; return VAR;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 591 "pnfha.lpp"
lval.put("0"); yylval = lval; return PRINT;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 593 "pnfha.lpp"
lval.put("0"); yylval = lval; return PRINTLN;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 595 "pnfha.lpp"
lval.put("0"); yylval = lval; return EPRINT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 597 "pnfha.lpp"
lval.put("0"); yylval = lval; return EPRINTLN;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 599 "pnfha.lpp"
lval.put("0"); yylval = lval; return END;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 601 "pnfha.lpp"
lval.put("0"); yylval = lval; return ASM;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 603 "pnfha.lpp"
lval.put("0"); yylval = lval; return LOAD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 605 "pnfha.lpp"
lval.put("0"); yylval = lval; return GOTO;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 607 "pnfha.lpp"
lval.put("0"); yylval = lval; return ST;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 609 "pnfha.lpp"
lval.put("0"); yylval = lval; return PUSH;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 611 "pnfha.lpp"
lval.put("0"); yylval = lval; return POP;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 613 "pnfha.lpp"
lval.put("0"); yylval = lval; return TOP;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 615 "pnfha.lpp"
lval.put("0"); yylval = lval; return TYPEOF;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 617 "pnfha.lpp"
lval.put("0"); yylval = lval; return ATOC;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 619 "pnfha.lpp"
lval.put("0"); yylval = lval; return SWITCH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 621 "pnfha.lpp"
lval.put("0"); yylval = lval; return CSWITCH;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 623 "pnfha.lpp"
lval.put("0"); yylval = lval; return CRASH;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 625 "pnfha.lpp"
lval.put("0"); yylval = lval; return VERSION;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 627 "pnfha.lpp"
lval.put("0"); yylval = lval; return HALT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 629 "pnfha.lpp"
lval.put("0"); yylval = lval; return MODT;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 631 "pnfha.lpp"
lval.put("0"); yylval = lval; return RETURN;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 633 "pnfha.lpp"
lval.put("0"); yylval = lval; return GOSUB;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 635 "pnfha.lpp"
lval.put("0"); yylval = lval; return SUB;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 637 "pnfha.lpp"
lval.put("0"); yylval = lval; return EVENT;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 639 "pnfha.lpp"
lval.put("0"); yylval = lval; return UNREGISTER;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 641 "pnfha.lpp"
lval.put("0"); yylval = lval; return REGISTER;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 643 "pnfha.lpp"
lval.put("0"); yylval = lval; return REREGISTER;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 645 "pnfha.lpp"
lval.put("0"); yylval = lval; return STORE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 647 "pnfha.lpp"
lval.put("0"); yylval = lval; return IF;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 649 "pnfha.lpp"
{
			 lval.put("0");
			 yylval = lval;
			 return ELSE;
			}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 655 "pnfha.lpp"
lval.put("0"); yylval = lval; return CASE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 657 "pnfha.lpp"
lval.put("0"); yylval = lval; return CCASE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 659 "pnfha.lpp"
lval.put("0"); yylval = lval; return DEFAULT;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 661 "pnfha.lpp"
lval.put("0"); yylval = lval; return CDEFAULT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 663 "pnfha.lpp"
lval.put("0"); yylval = lval; return BREAK;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 665 "pnfha.lpp"
lval.put("0"); yylval = lval; return LABEL;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 667 "pnfha.lpp"
lval.put("0"); yylval = lval; return WHILEC;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 669 "pnfha.lpp"
lval.put("0"); yylval = lval; return ADDRESSOF;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 671 "pnfha.lpp"
lval.put("0"); yylval = lval; return ADD2V;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 673 "pnfha.lpp"
lval.put("0"); yylval = lval; return STOREA;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 675 "pnfha.lpp"
lval.put("0"); yylval = lval; loopexpr = true; return DOWHILEC;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 677 "pnfha.lpp"
lval.put("0"); yylval = lval; loopexpr = true; return DOFORC;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 679 "pnfha.lpp"
lval.put("0"); yylval = lval; return FORC;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 681 "pnfha.lpp"
lval.put("0"); yylval = lval; return FVAR;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 683 "pnfha.lpp"
lval.put("0"); yylval = lval; inforever = true; return FOREVERC;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 685 "pnfha.lpp"
lval.put("0"); yylval = lval; return CONTINUE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 687 "pnfha.lpp"
lval.put("0"); yylval = lval; return CHECK;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 689 "pnfha.lpp"
lval.put("0"); yylval = lval; return HCMNT;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 691 "pnfha.lpp"
lval.put("0"); yylval = lval; return FMODE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 693 "pnfha.lpp"
lval.put("0"); yylval = lval; return FOPEN;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 695 "pnfha.lpp"
lval.put("0"); yylval = lval; return FCLOSE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 697 "pnfha.lpp"
lval.put("0"); yylval = lval; return FEOF;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 699 "pnfha.lpp"
lval.put("0"); yylval = lval; return FPRINT;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 701 "pnfha.lpp"
lval.put("0"); yylval = lval; return FPRINTLN;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 703 "pnfha.lpp"
lval.put("0"); yylval = lval; return FREAD;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 705 "pnfha.lpp"
lval.put("0"); yylval = lval; return MEML;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 707 "pnfha.lpp"
lval.put("0"); yylval = lval; return ENUM;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 709 "pnfha.lpp"
lval.put("0"); yylval = lval; return ENUMV;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 711 "pnfha.lpp"
lval.put("0"); yylval = lval; return RANGE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 713 "pnfha.lpp"
lval.put("0"); yylval = lval; return RANGEV;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 715 "pnfha.lpp"
lval.put("0"); yylval = lval; return ARRAY;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 717 "pnfha.lpp"
lval.put("0"); yylval = lval; return BLANK;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 719 "pnfha.lpp"
lval.put("0"); yylval = lval; return PNFASM;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 721 "pnfha.lpp"
lval.put("0"); yylval = lval; return LENGTH;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 723 "pnfha.lpp"
lval.put("0"); yylval = lval; return DUP;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 725 "pnfha.lpp"
lval.put("0"); yylval = lval; return THEN;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 727 "pnfha.lpp"
lval.put("0"); yylval = lval; return ENDIF;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 729 "pnfha.lpp"
lval.put("0"); yylval = lval; return DONEIF;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 731 "pnfha.lpp"
lval.put("0"); yylval = lval; return FRET;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 733 "pnfha.lpp"
lval.put("0"); yylval = lval; return DEFAULTV;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 735 "pnfha.lpp"
lval.put("0"); yylval = lval; return DEFAULTV2;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 737 "pnfha.lpp"
lval.put("0"); yylval = lval; return UNTILC;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 739 "pnfha.lpp"
lval.put("0"); yylval = lval; return UNLESS;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 741 "pnfha.lpp"
lval.put("0"); yylval = lval; loopexpr = true; return DOUNTILC;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 743 "pnfha.lpp"
lval.put("0"); yylval = lval; return STRUCT;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 745 "pnfha.lpp"
lval.put("0"); yylval = lval; return STRUCTVAR;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 747 "pnfha.lpp"
lval.put("0"); yylval = lval; return UNION;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 749 "pnfha.lpp"
lval.put("0"); yylval = lval; return UNIONVAR;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 751 "pnfha.lpp"
lval.put("0"); yylval = lval; return USE;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 753 "pnfha.lpp"
lval.put("0"); yylval = lval; return MODE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 755 "pnfha.lpp"
lval.put("0"); yylval = lval; return EXTMODE;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 757 "pnfha.lpp"
lval.put("0"); yylval = lval; return COPY;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 759 "pnfha.lpp"
lval.put("0"); yylval = lval; return SEGMENT;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 761 "pnfha.lpp"
lval.put("0"); yylval = lval; return WHILE;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 763 "pnfha.lpp"
lval.put("0"); yylval = lval; loopexpr = true; return DOWHILE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 765 "pnfha.lpp"
lval.put("0"); yylval = lval; return UNTIL;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 767 "pnfha.lpp"
lval.put("0"); yylval = lval; loopexpr = true; return DOUNTIL;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 769 "pnfha.lpp"
lval.put("0"); yylval = lval; return FOR;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 771 "pnfha.lpp"
lval.put("0"); yylval = lval; loopexpr = true; return DOFOR;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 773 "pnfha.lpp"
lval.put("0"); yylval = lval; inforever = true; return FOREVER;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 775 "pnfha.lpp"
lval.put("0"); yylval = lval; return LOOP;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 777 "pnfha.lpp"
lval.put("0"); yylval = lval; return ENDLOOP;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 779 "pnfha.lpp"
lval.put("0"); yylval = lval; return WHILEBC;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 781 "pnfha.lpp"
lval.put("0"); yylval = lval; return UNTILBC;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 783 "pnfha.lpp"
lval.put("0"); yylval = lval; return FORBC;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 785 "pnfha.lpp"
lval.put("0"); yylval = lval; return WHILEB;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 787 "pnfha.lpp"
lval.put("0"); yylval = lval; return UNTILB;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 789 "pnfha.lpp"
lval.put("0"); yylval = lval; return FORB;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 791 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return TYPE;
			}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 798 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return LTYPE;
			}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 805 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return GTYPE;
			}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 812 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return RTYPE;
			}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 819 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return VTYPE;
			}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 826 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return STYPE;
			}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 833 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return ATYPE;
			}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 840 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return CTYPE;
			}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 847 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return CMTYPE;
			}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 854 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return BFMODEC;
			}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 861 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FMODEC;
			}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 868 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return VTYPE2;
			}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 875 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return RTYPE2;
			}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 882 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return CETYPE;
			}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 889 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return RUNOPOP;
			}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 896 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return OTYPE;
			}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 903 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FUNCTION;
			}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 910 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FUNCDEF;
			}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 917 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FUNCCALL;
			}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 924 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return FPARAMETER;
			}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 932 "pnfha.lpp"
lval.put("0"); yylval = lval; return READ;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 934 "pnfha.lpp"
{
			 String str = yytext;
			 lval.put(str);
			 yylval.put(lval.to_string());
			 return ID;
			}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 941 "pnfha.lpp"
return PBIN;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 943 "pnfha.lpp"
return PPBIN;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 945 "pnfha.lpp"
return PLIB;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 947 "pnfha.lpp"
return PINCLUDE;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 949 "pnfha.lpp"
return PIMPORT;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 951 "pnfha.lpp"
return PDEFINE;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 953 "pnfha.lpp"
return PMACRO;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 955 "pnfha.lpp"
return PENDM;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 957 "pnfha.lpp"
return PUNDEF;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 959 "pnfha.lpp"
return PIFDEF;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 961 "pnfha.lpp"
return PIFNDEF;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 963 "pnfha.lpp"
return PELSE;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 965 "pnfha.lpp"
return PENDIF;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 967 "pnfha.lpp"
return PPDATE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 969 "pnfha.lpp"
return PPTIME;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 971 "pnfha.lpp"
return PPLINE;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 973 "pnfha.lpp"
return PPFILE;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 975 "pnfha.lpp"
return PPCDATE;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 977 "pnfha.lpp"
return PPCTIME;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 979 "pnfha.lpp"
{ 
		 ASTNode pp_statement("pp_statement");
		 pp_statement.conprint("' %s\n", yytext); 
		 tree.add_node(pp_statement); 
		}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 985 "pnfha.lpp"
return PPINCLUDE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 987 "pnfha.lpp"
return PPIMPORT;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 989 "pnfha.lpp"
return PPDEFINE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 991 "pnfha.lpp"
return PPMACRO;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 993 "pnfha.lpp"
return PPENDM;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 995 "pnfha.lpp"
return PPUNDEF;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 997 "pnfha.lpp"
return PPIFDEF;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 999 "pnfha.lpp"
return PPIFNDEF;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 1001 "pnfha.lpp"
return PPELSE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1003 "pnfha.lpp"
return PPENDIF;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1005 "pnfha.lpp"
return PPPDATE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 1007 "pnfha.lpp"
return PPPTIME;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1009 "pnfha.lpp"
return PPPLINE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1011 "pnfha.lpp"
return PPPFILE;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1013 "pnfha.lpp"
return PPPCDATE;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1015 "pnfha.lpp"
return PPPCTIME;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 1017 "pnfha.lpp"
{ 
		 ASTNode pp_statement("pp_statement");
		 pp_statement.conprint("'! %s\n", yytext); 
		 tree.add_node(pp_statement);
		}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 1023 "pnfha.lpp"
{
			 inblock = true;
			 blockinstmt = true;
			 if ((!loopexpr || midloop != 0) && !inloop && !infor && !inforever && !intop && !inif)
			 {
			  ++scope;
			  varTable.insert();
			  varTable[scope].insert();
			  ++midloop;
			 }

			 lval.put("0");
			 yylval = lval;
			 return LEFTB;
			}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1039 "pnfha.lpp"
{
			 if ((!loopexpr || midloop != 0) && !inloop && !infor && !inforever && !intop && !inif)
			 {
			  --scope;
			  varTable.remove();
			  --midloop;
			 }
			 else
			 {
			  if (infor)
			  {
			   --inforfor;
			   if (inforfor == 0)
			    infor = false;
			  }

			  if (loopexpr)
			   inloop = true;
			  else
			   inloop = false;

			  loopexpr = false;
			  inforever = false;

			  if (intop)
			  {
			   --intopfor;
			   if (intopfor == 0)
			    intop = false;
			  }
			 }

			 lval.put("0");
			 yylval = lval;
			 inblock = false;
			
			 return RIGHTB;
			}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 1078 "pnfha.lpp"
/* Eat up Whitespace */
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 1080 "pnfha.lpp"
/* Eat up comment */
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 1082 "pnfha.lpp"
{
			 String str = "Scan error: ";
			 str += yytext;
			 yyerror(str.getString().c_str());

			 lval.put("0");
			 yylval = lval;
			}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 1091 "pnfha.lpp"
ECHO;
	YY_BREAK
#line 2528 "pnfha.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 823 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 823 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 822);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1091 "pnfha.lpp"

/* Additional Code */
int main(int argc, char ** argv)
{
 try
 {
  yydebug = 0;


  varTable[scope].insert();


  if (argc == 3)
  {
   String extension = get_extension(argv[1]);
   if (extension == ".pppha")
    preprocess(strip_extension(argv[1]) + ".pppha");

   FILE * input = fopen((strip_extension(argv[1]) + ".pha").getString().c_str(), "r");
   if (!input)
   {
    yyerror("can't open file");
    return -1;
   }
   yyin = input;
   output = fopen(argv[2], "w");
   if (!output)
   {
    yyerror("can't open file for write");
    return -1;
   }
   fprintf(output, "VERSION TVOID 1\n");
   fprintf(output, "EXTMODE TVOID 1\n\n\n");

  
   int ret = yyparse();
   //generate_pcode(false);
   //generate_switch_code();
   //generate_comment_code();
   generate_code();


   fprintf(output, "\n\nEND TVOID 0V");
   fclose(output);
   return ret;
  }
  else
   yyerror("can't find input file or output file.");
 }
 catch (Exception e)
 {
  e.display();
 }
}

void yyerror(char const * c)
{
 cout << "* ERROR: " << yylineno << ": " << c << endl;
}

String get_extension(String fileName)
{
 unsigned long index = fileName.getString().find(".");
 if (index == string::npos)
  yyerror((char *)"File has No Extension.");

 String extension = fileName.getString().substr(index);


 return extension;
}

String strip_extension(String fileName)
{
 unsigned long index = fileName.getString().find(".");
 if (index == string::npos)
  yyerror((char *)"File has No Extension.");

 String stripped = fileName.getString().substr(0, index);


 return stripped;
}

void preprocess(String arg)
{
 #ifdef OS_WINDOWS 
 _spawnl(_P_WAIT, "pnfpp.exe", "pnfpp.exe", (strip_extension(arg) + (char *)".pppha").getString().c_str(), 
 		 (strip_extension(arg) + (char *)".pha").getString().c_str(), NULL);
 #endif // OS_WINDOWS
 #ifdef OS_LINUX
 String str = ("./pnfpp " + (strip_extension(arg) + (char *)".pppha") + " " + (strip_extension(arg) + (char *)".pha"));
 system(str.getString().c_str());
 #endif // OS_LINUX
}

int conprint(const char * format, ...)
{
 va_list arg;
 int done = 0;

 va_start(arg, format);

 out.insert();
 done = vsnprintf(outbuffer, 256, format, arg);
 String str = "";
 if (outbuffer != NULL)
  str += outbuffer;
 out[outcount] = str;
 ++outcount;

 va_end(arg);


 return done;
}

void generate_code()
{
 unsigned long len = out.length();
 for (unsigned long i = 0; i < out.length(); ++i)
 {
  if (out[i].getString() == "")
   out.remove(i);
 }

 for (unsigned long i = 0; i < out.length(); ++i)
 {
  fprintf(output, "%s", out[i].getString().c_str());
 }
}

void movelineno(unsigned long index, unsigned long line)
{
 unsigned long i;
 for (i = 0; i < out.length(); ++i)
 {
  if (i < statementlineno.length())
   if (statementlineno[i] == line)
    break;
 }
 cout << i << endl;
 //out.move(index, i);
}

void sort(Array<unsigned long> & array)
{
 bool changed = false;
 do
 {
  changed = false;
  for (unsigned long i = 0; (i + 1) < array.length(); ++i)
  {
   if (array[i + 1] < array[i])
   {
    swap(array[i], array[i + 1]);
    changed = true;
   }
  }
 } while (changed == true);
}

void sort_lines(Array<String> & array)
{
 bool changed = false;
 do
 {
  changed = false;
  for (unsigned long i = 0; (i + 1) < array.length(); ++i)
  {
   String str;
   str = array[i];
   unsigned long k = str.getString().find(':');
   if (k == string::npos)
   {
    continue;
   }
   str = array[i].getString().substr(k + 2);
   unsigned long l = atoi(str.getString().c_str());

   str = array[i + 1];
   k = str.getString().find(':');
   if (k == string::npos)
   {
    continue;
   }
   str = array[i + 1].getString().substr(k + 2);
   unsigned long l2 = atoi(str.getString().c_str());

   if (l2 < l)
   {
    String temp1 = array[i], temp2 = array[i + 1];
    array[i] = temp2;
    array[i + 1] = temp1;

    changed = true;
   }
  }
 } while (changed == true);
}

void generate_pcode(bool names)
{
 unsigned long len = tree.nodenumber();

 for (unsigned long i = 0; i < len; ++i)
 {
  ASTNode node(tree.getNode(i));
  String nodename = node.getName();
  nodename += ":\n\n";
  if (names)
   conprint("%s", nodename.getString().c_str());

  for (unsigned long j = 0; j < node.getValue().length(); ++j)
   conprint("%s", node.getValue()[j].getString().c_str());
 }
}

void generate_switch_code()
{
 /*
  1. Determine if there is a switch or not. Do other steps only if there is a switch.
  2. Find highest switch_case.
  3. Replace the skip_switch_case that is higher than that with GOTOL TSTRING default_switch_(switchcount).
 */
 // Step 1
 if (switchfound)
 {
  // Step 2
  String num;
  String num2;
  String underscore = "_";
  String str;
  unsigned long j = 0;
  for (unsigned long i = 0; i < out.length(); ++i)
  {
   num.from_long(i);
   String line = out[i].getString();
   for (unsigned long k = 1; k <= switchcounter; ++k)
   {
    num2.from_long(k);
    str = (String)"LBL TSTRING \"switch_case_" + num2 + underscore + num + (String)"\"\n";
   
    for (unsigned long l = 0; l < out.length(); ++l)
    {
     if (out[l] == str)
      ++j;
    }
   }
  }

  // Step 3
  for (unsigned long i = 0; i < out.length(); ++i)
  {
   String line = out[i];
   num.from_long(j + 1);

   for (unsigned long k = 1; k <= switchcounter; ++k)
   {
    num2.from_long(k);
    str = (String)"GOTOL TSTRING \"skip_switch_case_" + num2 + underscore + num + (String)"\"\n";
   
    for (unsigned long l = 0; l < out.length(); ++l)
    {
     if (out[l] == str)
      j = l;
    }
   }
  }

  String num3;
  num3.from_long(switchcounter);
  Array<String> out2;
  for (unsigned long i = 0, k = 0; i < out.length(); ++i)
  {
   if (i != j)
   {
    out2[k] = out[i];
    ++k;
    out2.insert();
   }
   else
   {
    out2[k] = "GOTOL TSTRING \"default_switch_";
    out2[k] += num3;
    out2[k] += "\"\n";
    ++k;
    out2.insert();
   }
  }
  out = out2;
 }
}

String strip_quotes(String str)
{
 String str2 = "";

 for (unsigned long i = 0; i < str.length(); ++i)
 {
  if (i == 0)
   continue;
  else if (i == str.length() - 1)
   continue;
  else
   str2 += str[i];
 }

 return str2;
}

void generate_comment_code()
{
 for (unsigned long i = 0; i < out.length(); ++i)
 {
  if (out[i][0] == ';' && out[i][1] == '\\')
  {
   String str = "";
   for (unsigned long j = 0; j < out[i].length(); ++j)
   {
    if (j == 1)
     continue;
    else
     str += out[i][j];
   }
   out[i] = str;
  }
 }
}

